function contactController(){}function landingController(e,t,r){function o(){}var l=this;l.navButtonClicked=function(t){var o="/"+t;e.info("redirecting to: "+o),r.path(o)},o()}function locationsController(e,t){e.info("params are: ",t)}function shoppingController(e,t,r,o,l){var a=this;a.currentlyFilling=r,a.cart=t,a.priceList=o,a.currentState=l.defaultState("shopping"),a.currentState.flavorsBtnList=l.buildButtonList(),a.updateSelectedTab=function(e){a.currentState.activeTab=e}}function backendComFactory(e){function t(){return new Promise(function(e,t){e("it worked")})}var r={get:t};return r}function fillingsFactory(e){var t={packaging:void 0,flavors:{0:"Secret Recipe Pecans",1:"Drunken Pecans",2:"Cinnamon Pecans",3:"Secret Recipe Almonds",4:"Cinnamon Pecans",5:"Secret Recipe Cashews",6:"Secret Recipe Peanuts"}};return t}function priceListFactory(e){function t(t,r){e.info("Packaging:",t),e.info("Pricing:",r);var o=0;if("undefined"==typeof t.mix[6])e.info("no peanuts"),o=t.size>2?r.withoutPeanuts[t.size.toString()][0]:r.withoutPeanuts[t.size.toString()];else if(e.info("there are peanuts"),t.size>2){var l=4*t.mix[6];e.info(l,"peanutSections"),o=r.withPeanuts[t.size.toString()][l.toString()]}else e.info("% peanuts",t.mix[6]),o=t.mix[6]>=.5?r.withPeanuts[t.size.toString()]:r.withoutPeanuts[t.size.toString()];return o}var r={packaging:{0:{title:"Small",volume:4,compartments:1,maxFlavors:100},1:{title:"Average",volume:8,compartments:1,maxFlavors:100},2:{title:"Impressive",volume:16,compartments:1,maxFlavors:100},3:{title:"Platter",volume:20,compartments:4,maxFlavors:4}},withPeanuts:{0:500,1:800,2:1100,3:{1:2e3,2:1800,3:1600,4:1400}},withoutPeanuts:{0:700,1:1300,2:1800,3:{0:2200}},calculatePurchasePrice:t};return r}function shoppingCartsFactory(e){function t(e){return e+1}function r(e){return e>0?e-1:0}function o(t){return e.info("adding a new package now",t),t}function l(e,t){}function a(e){var t=(e.cost*e.qty/100).toFixed(2);return t}function c(e){var t=0;return e.forEach(function(e){t+=e.cost*e.qty/100}),t.toFixed(2)}var n={items:[],cost:{subtotal:3500,taxes:0,discounts:0,shipping:{}},addASize:t,removeASize:r,addFilledPackage:o,removeAPackage:l,calculateItemSubtotal:a,calculateTotalCost:c};return n}function stateFactory(e){function t(e){var t;return"shopping"==e?t={activeTab:0,allTabs:{0:"package",1:"flavor",2:"access",3:"checkout"},packaging:{selected:!1,size:void 0,flavors:0,mix:{},cost:0},buttons:{flavorList:{0:{title:"Secret Recipe Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}}}}:"shoppingProgressBar"==e&&(t={0:{classes:{spbtabSelected:!0},styles:{}},1:{classes:{spbtabSelected:!1},styles:{}},2:{classes:{spbtabSelected:!1},styles:{}},3:{classes:{spbtabSelected:!1},styles:{}}}),t}function r(){var e={0:{title:"Secret Recipe Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}};return e}var o={defaultState:t,buildButtonList:r};return o}function aquisitionManager(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/aquisitionManager.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function cartSummary(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{cart:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function coneFiller(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/coneFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function emailHelper(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function listOfFlavors(){function e(e,t,r,o){}function t(e,t){function r(e){l.flavors[e].classes.availProductFlavor=!1,l.flavors[e].classes.selectedProductFlavor=!0,l.flavors[e].classes.unAvailProductFlavor=!1}function o(e){l.flavors[e].classes.availProductFlavor=!0,l.flavors[e].classes.selectedProductFlavor=!1,l.flavors[e].classes.unAvailProductFlavor=!1}var l=this;l.clickAFlavor=function(e){var t=!1;l.flavors[e].selected=!l.flavors[e].selected,l.flavors[e].selected?(r(e),t=!0):o(e),l.pickAFlavor()(e,t)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/listOfFlavors.directive.htm",replace:!0,scope:{flavors:"=",pickAFlavor:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsChronoView(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsMapView(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsThisWeek(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsTimeFilter(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsToday(){function e(e,t,r,o){}function t(e,t,r){var o=this,l=r;o.todaysMarkets=l.get(),console.log(o.todaysMarkets)}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],r}function packagingFiller(){function e(e,t,r,o){}function t(e,t){function r(){c.state.packaging.selected=!1,c.state.packaging.size=void 0,c.state.packaging.flavors=0,c.state.packaging.mix={},Object.keys(c.state.buttons.flavorList).forEach(function(e){c.state.buttons.flavorList[e].selected=!1,c.state.buttons.flavorList[e].classes.availProductFlavor=!0,c.state.buttons.flavorList[e].classes.unAvailProductFlavor=!1,c.state.buttons.flavorList[e].classes.selectedProductFlavor=!1})}function o(e){return 1/e}function l(e){e?c.state.packaging.flavors++:c.state.packaging.flavors--}function a(e,t){var r=e.toString();t?(Object.keys(c.state.packaging.mix).forEach(function(e){c.state.packaging.mix[e]=o(c.state.packaging.flavors)}),c.state.packaging.mix[r]=o(c.state.packaging.flavors)):(Object.keys(c.state.packaging.mix).forEach(function(e){c.state.packaging.mix[e]=o(c.state.packaging.flavors)}),delete c.state.packaging.mix[r])}var c=this;c.qty=1,c.pickAFlavor=function(e,t){l(t),a(e,t)},c.addToCart=function(e){var t=c.state.packaging.size,o=c.state.packaging.mix,l=c.qty,a=c.pricing.calculatePurchasePrice(c.state.packaging,c.pricing),n="Small: SR Pecans & SR Cashews",i={description:n,packaging:t,flavors:o,qty:l,cost:a};c.cart.items.push(c.addFilledPackage()(i)),r(),e?c.changeTab()(2):c.changeTab()(0)},c.discardButtonClicked=function(){r(),c.changeTab()(0)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{cart:"=",pricing:"=",changeTab:"&",state:"=",addFilledPackage:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function paymentManager(){function e(e,t,r,o){}function t(e,t,r){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/paymentManager.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],r}function platterFiller(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/platterFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function qtyManager(){function e(e,t,r,o){}function t(e,t){var r=this;r.subtract=function(){r.qty>1&&r.qty--},r.add=function(){r.qty++}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/qtyManager.directive.htm",replace:!0,scope:{qty:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeEmpties(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeFulls(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectFlavors(){function e(e,t,r,o){}function t(e,t){var r=this;r.fillAPackage=function(e){r.currentlyFilling.packaging=e},r.sizeBtnClicked=function(e){t.info("clikced",e,r.packagingSelected[e]),r.packagingSelected[e]=r.removeASize()(r.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectPackaging(){function e(e,t,r,o){}function t(e,t){var r=this;r.sizeBtnClicked=function(e){r.state.packaging.selected=!0,r.state.packaging.size=e,t.info("got this size, ",r.pricing.packaging[e].title),r.changeTab()(1)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{state:"=",pricing:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function shoppingProgressBar(){function e(e,t,r,o){e.$watch("vm.activeTab",function(t,r){e.vm.changeTabClass(t,r)})}function t(e,t,r){var o=this;o.tabs=r.defaultState("shoppingProgressBar"),o.changeTabClass=function(e,t){o.tabs[t].classes.spbtabSelected=!1,o.tabs[e].classes.spbtabSelected=!0},o.tabClick=function(e){o.changeTabClass(e,o.activeTab),o.changeTab()(e)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shoppingProgressBar.directive.htm",replace:!0,scope:{activeTab:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","stateFactory"],r}function toolBar(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"})}config.$inject=["$routeProvider"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=[],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory","fillingsFactory","priceListFactory","stateFactory"],angular.module("ahNutsWebApp").factory("backendComFactory",backendComFactory),backendComFactory.$inject=["$log","$http"],angular.module("ahNutsWebApp").factory("fillingsFactory",fillingsFactory),fillingsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("priceListFactory",priceListFactory),priceListFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"],angular.module("ahNutsWebApp").directive("aquisitionManager",aquisitionManager),angular.module("ahNutsWebApp").directive("cartSummary",cartSummary),angular.module("ahNutsWebApp").directive("coneFiller",coneFiller),angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("listOfFlavors",listOfFlavors),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("paymentManager",paymentManager),angular.module("ahNutsWebApp").directive("platterFiller",platterFiller),angular.module("ahNutsWebApp").directive("qtyManager",qtyManager),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("shoppingProgressBar",shoppingProgressBar),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").config(config);
//# sourceMappingURL=data:application/json;base64,
