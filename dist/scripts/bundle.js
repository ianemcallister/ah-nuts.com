"use strict";function adminController(e,t,o){function n(e){return fetch(e)}function r(e){return n(e).then(function(e){return e.json()})}var i=this;i.testText={},r("/api/get/list/regions").then(function(t){e.info(t),i.testText=t})["catch"](function(t){e.info("got this error",t)})}function contactController(e,t){var o=this;o.returnHome=function(o){var n="/";e.info("redirecting to: "+n),t.path(n)}}function landingController(e,t,o){function n(){}var r=this;r.navButtonClicked=function(t){var n="/"+t;e.info("redirecting to: "+n),o.path(n)},n()}function locationsController(e,t,o,n,r){var i=this;i.locationsModel=n,i.selectedLocation={state:t.state,region:t.region},i.state=r.state(t.state,i.locationsModel),e.info("locationsModel",i.locationsModel),i.locationRedirect=function(e,t){var n="locations/";n+=e,o.path(n)}}function shoppingController(e,t,o,n,r){var i=this;i.currentlyFilling=o,i.cart=t,i.priceList=n,i.currentState=r.defaultState("shopping"),i.currentState.flavorsBtnList=r.buildButtonList(),i.updateSelectedTab=function(t){i.currentState.activeTab=t,e.info("changing to tab",i.currentState.activeTab)}}function shoppingReceiptController(e){}function aquisitionManager(){function e(e,t,o,n){}function t(e,t){var o=this;o.methodClicked=function(e){var t="";o.state.buttons.aquisition.addressed=!0,o.state.buttons.aquisition[e].selected=!0,o.state.buttons.aquisition[e].classes["glyphicon-ok"]=!0,t="pickup"==e?"ship":"pickup",o.state.buttons.aquisition[t].selected=!1,o.state.buttons.aquisition[t].classes["glyphicon-ok"]=!1}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/aquisitionManager.directive.htm",replace:!0,scope:{state:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function cartSummary(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{cart:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function coneFiller(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/coneFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function emailHelper(){function e(e,t,o,n){}function t(e,t){function o(e,t){var o=!1;return e.length>=t&&(o=!0),o}var n=this;n.answers={name:{attempted:!1,value:""},email:{attempted:!1,value:""},message:{attempted:!1,value:""}},n.form={name:{error:{display:!1,message:"This is a test"},classes:{}},email:{error:{display:!1,message:"This is a test"},classes:{}},message:{error:{display:!1,message:"This is a test"},classes:{}},btn:{classes:{"btn-primary":!1,"btn-warning":!0,"btn-success":!1}}},n.checkName=function(e){},n.nameAttempt=function(e){n.answers.name.attempted=!0,o(e,3)?t.info("good check"):t.info("too short")},n.submitMessage=function(){n.redirect("")}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{redirect:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function errorMessage(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/errorMessage.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function listOfFlavors(){function e(e,t,o,n){}function t(e,t){function o(e){r.flavors[e].classes.availProductFlavor=!1,r.flavors[e].classes.selectedProductFlavor=!0,r.flavors[e].classes.unAvailProductFlavor=!1}function n(e){r.flavors[e].classes.availProductFlavor=!0,r.flavors[e].classes.selectedProductFlavor=!1,r.flavors[e].classes.unAvailProductFlavor=!1}var r=this;r.clickANut=function(e,i){t.info("clicking",e,i),e>=10&&(e=e/10-1);var a=!1;r.flavors[e].selected=!r.flavors[e].selected,r.flavors[e].selected?(o(e),a=!0):n(e),r.pickAFlavor()(e,a)},r.test=function(){t.info("click Test")}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/listOfFlavors.directive.htm",replace:!0,scope:{flavors:"=",pickAFlavor:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsChronoView(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsMapView(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsThisWeek(){function e(e,t,o,n){}function t(e,t,o){function n(){var e=new Date,t=new Date(e.getFullYear(),0,1);return Math.ceil(((e-t)/864e5+t.getDay()+1)/7)}var r=this;r.locationsThisWeek=o.weekly(r.locations,n())}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{locations:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","locationsFilter"],o}function locationsTimeFilter(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsToday(){function e(e,t,o,n){}function t(e,t){function o(e){var o=[];return Object.keys(e).forEach(function(n){var i=e[n];Object.keys(i).forEach(function(e){var n=i[e],a=new Date,c=a.getDay();if(t.info("weekeday",c),n.weekday==c){r.eventsToday=!0;var l={start:"64800000",end:"64800000",name:n.name,address:"147 W. Center Street, Anaheim"};o.push(l)}})}),o}function n(){r.eventsList=o(r.selectedLocation),r.todaysDate=new Date,t.info(r.todaysDate)}var r=this;r.eventsToday=!1,t.info("vm.selectedLocation",r.selectedLocation),n()}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{selectedLocation:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function packagingFiller(){function e(e,t,o,n){}function t(e,t){function o(){a.state.packaging.selected=!1,a.state.packaging.size=void 0,a.state.packaging.flavors=0,a.state.packaging.mix={},Object.keys(a.state.buttons.flavorList).forEach(function(e){a.state.buttons.flavorList[e].selected=!1,a.state.buttons.flavorList[e].classes.availProductFlavor=!0,a.state.buttons.flavorList[e].classes.unAvailProductFlavor=!1,a.state.buttons.flavorList[e].classes.selectedProductFlavor=!1})}function n(e){return 1/e}function r(e){e?a.state.packaging.flavors++:a.state.packaging.flavors--}function i(e,t){var o=e.toString();t?(Object.keys(a.state.packaging.mix).forEach(function(e){a.state.packaging.mix[e]=n(a.state.packaging.flavors)}),a.state.packaging.mix[o]=n(a.state.packaging.flavors)):(Object.keys(a.state.packaging.mix).forEach(function(e){a.state.packaging.mix[e]=n(a.state.packaging.flavors)}),delete a.state.packaging.mix[o])}var a=this;a.qty=1,a.pickAFlavor=function(e,t){r(t),i(e,t)},a.addToCart=function(e){var t=a.state.packaging.size,n=a.state.packaging.mix,r=a.qty,i=a.pricing.calculatePurchasePrice(a.state.packaging,a.pricing),c=a.pricing.buildDescription(a.state.packaging,a.pricing),l={description:c,packaging:t,flavors:n,qty:r,cost:i};a.cart.items.push(a.addFilledPackage()(l)),o(),e?a.changeTab()(2):a.changeTab()(0)},a.discardButtonClicked=function(){o(),a.changeTab()(0)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{cart:"=",pricing:"=",changeTab:"&",state:"=",addFilledPackage:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function paymentManager(){function e(e,t,o,n){}function t(e,t,o){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/paymentManager.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],o}function platterFiller(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/platterFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function qtyManager(){function e(e,t,o,n){}function t(e,t){var o=this;o.subtract=function(){o.qty>1&&o.qty--},o.add=function(){o.qty++}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/qtyManager.directive.htm",replace:!0,scope:{qty:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function regionFinder(){function e(e,t,o,n){}function t(e,t){var o=this,n=[];o.selectState=function(e){Object.keys(o.states).forEach(function(e){n.push(e)});var r=n[e];t.info("selectedState:",r),o.locationRedirect()(r)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/regionFinder.directive.htm",replace:!0,scope:{locationRedirect:"&",states:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeEmpties(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeFulls(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectFlavors(){function e(e,t,o,n){}function t(e,t){var o=this;o.fillAPackage=function(e){o.currentlyFilling.packaging=e},o.sizeBtnClicked=function(e){t.info("clikced",e,o.packagingSelected[e]),o.packagingSelected[e]=o.removeASize()(o.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectPackaging(){function e(e,t,o,n){}function t(e,t){var o=this;o.sizeBtnClicked=function(e){o.state.packaging.selected=!0,o.state.packaging.size=e,t.info("got this size, ",o.pricing.packaging[e].title),o.changeTab()(1)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{state:"=",pricing:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function shippingOptions(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/shippingOptions.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function shoppingProgressBar(){function e(e,t,o,n){e.$watch("vm.activeTab",function(t,o){e.vm.changeTabClass(t,o)})}function t(e,t,o){var n=this;n.tabs=o.defaultState("shoppingProgressBar"),n.changeTabClass=function(e,t){n.tabs[t].classes.spbtabSelected=!1,n.tabs[e].classes.spbtabSelected=!0},n.tabClick=function(e){n.changeTabClass(e,n.activeTab),n.changeTab()(e)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/shoppingProgressBar.directive.htm",replace:!0,scope:{activeTab:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","stateFactory"],o}function toolBar(){function e(e,t,o,n){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function backend(e,t){function o(e){return fetch(e)}function n(e){return o(e).then(function(e){return e.json()})}function r(){return new Promise(function(e,t){})}function i(){return new Promise(function(t,o){n("/api/get/list/regions").then(function(e){t(e)})["catch"](function(t){e.info("error:",t),o(t)})})}var a={get:r,getLocations:i};return a}function dataServices(e){var t={};return t}function fillingsFactory(e){var t={packaging:void 0,flavors:{0:"Secret Recipe Pecans",1:"Drunken Pecans",2:"Cinnamon Pecans",3:"Secret Recipe Almonds",4:"Cinnamon Almonds",5:"Secret Recipe Cashews",6:"Secret Recipe Peanuts"},types:{0:"Pecans",1:"Pecans",2:"Pecans",3:"Almonds",4:"Almonds",5:"Cashews",6:"Peanuts"},recipies:{0:"Secret Recipe",1:"Drunken",2:"Cinnamon",3:"Secret Recipe",4:"Cinnamon",5:"Secret Recipe",6:"Secret Recipe"}};return t}function locationsFilter(e){function t(e,t){return["test","testing","awesome"]}var o={weekly:t};return o}function locationsState(e){function t(e,t){return void 0!=e?(o.regionFinder.visable=!1,o.locationLabel.visable=!0,o.everyDayLocations.visable=!1,o.eventsAndMarkets.visable=!0,o.locationsToday.visable=!0,o.locationsThisWeek.visable=!0,o.locationsChronoView.visable=!1):(o.regionFinder.visable=!0,o.locationLabel.visable=!1,o.everyDayLocations.visable=!1,o.eventsAndMarkets.visable=!1,o.locationsToday.visable=!1,o.locationsThisWeek.visable=!1,o.locationsChronoView.visable=!1),o}var o={regionFinder:{visable:!0},locationLabel:{visable:!1},everyDayLocations:{visable:!1},eventsAndMarkets:{visable:!1},locationsToday:{visable:!1},locationsThisWeek:{visable:!1},locationsChronoView:{visable:!1},state:t};return o}function priceListFactory(e){function t(t,o){var n,r={},i=0;return e.info("mix",o),Object.keys(o).forEach(function(e){r[t[e]]=!0}),Object.keys(r).forEach(function(e){i++,n=e}),i>1&&(n="undefined"!=typeof o[6]&&o[6]>=.5?"Peanut Mix":"Mix"),n}function o(e,t){var o,n={},r=[];switch(Object.keys(t).forEach(function(t){n[e[t]]=!0}),Object.keys(n).forEach(function(e){r.push(e)}),r.length){case 1:o=r[0];break;case 2:o=r[0]+" & "+r[1];break;case 3:o=r[0]+", "+r[1]+" & "+r[2]}return o}function n(e,t){var o=0;if("undefined"==typeof e.mix[6])o=e.size>2?t.withoutPeanuts[e.size.toString()][0]:t.withoutPeanuts[e.size.toString()];else if(e.size>2){var n=4*e.mix[6];o=t.withPeanuts[e.size.toString()][n.toString()]}else o=e.mix[6]>=.5?t.withPeanuts[e.size.toString()]:t.withoutPeanuts[e.size.toString()];return o}function r(e,n){var r="";return r+=n.packaging[e.size.toString()].title,r+=": ",r+=t(n.types,e.mix),r+=" (",r+=o(n.recipies,e.mix),r+=")"}var i={packaging:{0:{title:"Small",volume:4,compartments:1,maxFlavors:100},1:{title:"Average",volume:8,compartments:1,maxFlavors:100},2:{title:"Impressive",volume:16,compartments:1,maxFlavors:100},3:{title:"Platter",volume:20,compartments:4,maxFlavors:4}},flavors:{0:"Secret Recipe Pecans",1:"Drunken Pecans",2:"Cinnamon Pecans",3:"Secret Recipe Almonds",4:"Cinnamon Almonds",5:"Secret Recipe Cashews",6:"Secret Recipe Peanuts"},types:{0:"Pecans",1:"Pecans",2:"Pecans",3:"Almonds",4:"Almonds",5:"Cashews",6:"Peanuts"},recipies:{0:"Secret Recipe",1:"Drunken",2:"Cinnamon",3:"Secret Recipe",4:"Cinnamon",5:"Secret Recipe",6:"Secret Recipe"},withPeanuts:{0:500,1:800,2:1100,3:{1:2e3,2:1800,3:1600,4:1400}},withoutPeanuts:{0:700,1:1300,2:1800,3:{0:2200}},_distillType:t,_distillFlavors:o,calculatePurchasePrice:n,buildDescription:r};return i}function shoppingCartsFactory(e){function t(e){return e+1}function o(e){return e>0?e-1:0}function n(t){return e.info("adding a new package now",t),t}function r(e,t){}function i(e){var t=(e.cost*e.qty/100).toFixed(2);return t}function a(e){var t=0;return e.forEach(function(e){t+=e.cost*e.qty/100}),t.toFixed(2)}var c={items:[],cost:{subtotal:3500,taxes:0,discounts:0,shipping:{}},addASize:t,removeASize:o,addFilledPackage:n,removeAPackage:r,calculateItemSubtotal:i,calculateTotalCost:a};return c}function stateFactory(e){function t(e){var t;return"shopping"==e?t={activeTab:0,allTabs:{0:"package",1:"flavor",2:"access",3:"checkout"},packaging:{selected:!1,size:void 0,flavors:0,mix:{},cost:0},buttons:{typeList:{0:{type:"Pecans",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:3,flavors:{0:{recipe:"SR",selected:!1},1:{recipe:"Drunk",selected:!1},2:{recipe:"Cinn",selected:!1}}},1:{type:"Almonds",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:2,flavors:{0:{recipe:"SR",selected:!1},1:{recipe:"Cinn",selected:!1}}},2:{type:"Cashews",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:1,flavors:{0:{recipe:"SR",selected:!1}}},3:{type:"Peanuts",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:1,flavors:{0:{recipe:"SR",selected:!1}}}},flavorList:{0:{title:"Secret Recipe Pecans",type:"Pecans",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",type:"Pecans",recipe:"Drunken",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",type:"Pecans",recipe:"Cinnamon",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",type:"Almonds",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Almonds",type:"Almonds",recipe:"Cinnamon",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",type:"Cashews",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",type:"Peanuts",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}},aquisition:{addressed:!1,pickup:{selected:!1,classes:{glyphicon:!0,"glyphicon-ok":!1}},ship:{selected:!1,classes:{glyphicon:!0,"glyphicon-ok":!1}}}}}:"shoppingProgressBar"==e&&(t={0:{classes:{spbtabSelected:!0},styles:{}},1:{classes:{spbtabSelected:!1},styles:{}},2:{classes:{spbtabSelected:!1},styles:{}},3:{classes:{spbtabSelected:!1},styles:{}}}),t}function o(){var e={0:{title:"Secret Recipe Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}};return e}var n={defaultState:t,buildButtonList:o};return n}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/shop/receipt",{templateUrl:"views/orderReceipt.htm",controller:"shoppingReceiptController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm",resolve:{locationsModel:loadLocationsModel}}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm",resolve:{locationsModel:loadLocationsModel}}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm",resolve:{locationsModel:loadLocationsModel}}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"}).when("/admin/server/test",{templateUrl:"views/admin.htm",controller:"adminController",controllerAs:"vm"})}function loadLocationsModel(e){return console.log("trying to load location model"),new Promise(function(t,o){e.getList("states").then(function(e){t(e)})["catch"](function(e){o("an error occured",e)})})}function firebase(e){this.test=function(){e.info("in firebase"),e.info(AH_NUTS_FB_APIKEY),e.info("got here in firebase")},this.init=function(){var e={apiKey:AH_NUTS_FB_APIKEY,authDomain:AH_NUTS_FB_AUTHDOMAIN,databaseURL:AH_NUTS_FB_DATABASEURL,storageBucket:AH_NUTS_FB_STORAGEBUCKET};firebase.initializeApp(e)}}function locationData(e,t,o){var n={states:0},r=[];this.set=function(e,t){this[e]=t},this.download=function(){var e=this;return new Promise(function(o,n){t.getLocations().then(function(t){e.set("_raw",t),e.set("_states",["California","Oregon"]),o(t)})["catch"](function(e){})})},this.getStates=function(){return r},this.getList=function(t){var o=this;switch(n[t]){case 0:return 0===r.length?new Promise(function(e,t){e(o.download())}):new Promise(function(e,t){e(o.getStates())});default:e.info("got the default case")}}}config.$inject=["$routeProvider"],loadLocationsModel.$inject=["locationData"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("adminController",adminController),adminController.$inject=["$log","$location"],angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=["$log","$location"],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams","$location","locationsModel","locationsState"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory","fillingsFactory","priceListFactory","stateFactory"],angular.module("ahNutsWebApp").controller("shoppingReceiptController",shoppingReceiptController),shoppingReceiptController.$inject=["$log"],angular.module("ahNutsWebApp").directive("aquisitionManager",aquisitionManager),angular.module("ahNutsWebApp").directive("cartSummary",cartSummary),angular.module("ahNutsWebApp").directive("coneFiller",coneFiller),angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("errorMessage",errorMessage),angular.module("ahNutsWebApp").directive("listOfFlavors",listOfFlavors),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("paymentManager",paymentManager),angular.module("ahNutsWebApp").directive("platterFiller",platterFiller),angular.module("ahNutsWebApp").directive("qtyManager",qtyManager),angular.module("ahNutsWebApp").directive("regionFinder",regionFinder),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("shippingOptions",shippingOptions),angular.module("ahNutsWebApp").directive("shoppingProgressBar",shoppingProgressBar),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").factory("backend",backend),backend.$inject=["$log","$http","firebase"],angular.module("ahNutsWebApp").factory("dataServices",dataServices),dataServices.$inject=["$log"],angular.module("ahNutsWebApp").factory("fillingsFactory",fillingsFactory),fillingsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("locationsFilter",locationsFilter),locationsFilter.$inject=["$log"],angular.module("ahNutsWebApp").factory("locationsState",locationsState),locationsState.$inject=["$log"],angular.module("ahNutsWebApp").factory("priceListFactory",priceListFactory),priceListFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"],angular.module("ahNutsWebApp").config(config),angular.module("ahNutsWebApp").service("firebase",firebase),firebase.$inject=["$log"],angular.module("ahNutsWebApp").service("locationData",locationData),locationData.$inject=["$log","backend","firebase"];
//# sourceMappingURL=data:application/json;base64,
