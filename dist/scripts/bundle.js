function adminController(e,t,o){function r(e){return fetch(e)}function n(e){return r(e).then(function(e){return e.json()})}var i=this;i.testText={},n("/api/get/list/regions").then(function(t){e.info(t),i.testText=t})["catch"](function(t){e.info("got this error",t)})}function contactController(e,t){var o=this;o.returnHome=function(o){var r="/";e.info("redirecting to: "+r),t.path(r)}}function landingController(e,t,o){function r(){}var n=this;n.navButtonClicked=function(t){var r="/"+t;e.info("redirecting to: "+r),o.path(r)},r()}function locationsController(e,t,o,r){function n(){l.getLocations().then(function(t){e.info("got this in locations controller",t),a.locationsModel=t})["catch"](function(t){e.info("there was an error",t)})}function i(){a.state.regionFinder.visable=!1,a.state.locationLabel.visable=!0,a.state.locationsToday.visable=!1,a.state.locationsThisWeek.visable=!0,a.state.locationsChronoView.visable=!1}function c(){n(),a.selectedLocation={state:t.state,region:t.region},a.state={regionFinder:{visable:!0},locationLabel:{visable:!1},everyDayLocations:{visable:!1},eventsAndMarkets:{visable:!0},locationsToday:{visable:!1},locationsThisWeek:{visable:!1},locationsChronoView:{visable:!1}},e.info("params are: ",t),e.info("vm.locationsModel",a.locationsModel),"undefined"!=typeof t.state?(e.info("found a state"),i(),"undefined"!=typeof t.region?e.info("found a region"):e.info("NO region")):e.info("NO state")}var a=this,l=r;a.locationsModel={},a.locationRedirect=function(t,r){var n="locations/";e.info("got this, state.id:",t),n+=t.id,o.path(n)},c()}function shoppingController(e,t,o,r,n){var i=this;i.currentlyFilling=o,i.cart=t,i.priceList=r,i.currentState=n.defaultState("shopping"),i.currentState.flavorsBtnList=n.buildButtonList(),i.updateSelectedTab=function(t){i.currentState.activeTab=t,e.info("changing to tab",i.currentState.activeTab)}}function shoppingReceiptController(e){}function aquisitionManager(){function e(e,t,o,r){}function t(e,t){var o=this;o.methodClicked=function(e){var t="";o.state.buttons.aquisition.addressed=!0,o.state.buttons.aquisition[e].selected=!0,o.state.buttons.aquisition[e].classes["glyphicon-ok"]=!0,t="pickup"==e?"ship":"pickup",o.state.buttons.aquisition[t].selected=!1,o.state.buttons.aquisition[t].classes["glyphicon-ok"]=!1}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/aquisitionManager.directive.htm",replace:!0,scope:{state:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function cartSummary(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{cart:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function coneFiller(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/coneFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function emailHelper(){function e(e,t,o,r){}function t(e,t){function o(e,t){var o=!1;return e.length>=t&&(o=!0),o}var r=this;r.answers={name:{attempted:!1,value:""},email:{attempted:!1,value:""},message:{attempted:!1,value:""}},r.form={name:{error:{display:!1,message:"This is a test"},classes:{}},email:{error:{display:!1,message:"This is a test"},classes:{}},message:{error:{display:!1,message:"This is a test"},classes:{}},btn:{classes:{"btn-primary":!1,"btn-warning":!0,"btn-success":!1}}},r.checkName=function(e){},r.nameAttempt=function(e){r.answers.name.attempted=!0,o(e,3)?t.info("good check"):t.info("too short")},r.submitMessage=function(){r.redirect("")}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{redirect:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function listOfFlavors(){function e(e,t,o,r){}function t(e,t){function o(e){n.flavors[e].classes.availProductFlavor=!1,n.flavors[e].classes.selectedProductFlavor=!0,n.flavors[e].classes.unAvailProductFlavor=!1}function r(e){n.flavors[e].classes.availProductFlavor=!0,n.flavors[e].classes.selectedProductFlavor=!1,n.flavors[e].classes.unAvailProductFlavor=!1}var n=this;n.clickANut=function(e,i){t.info("clicking",e,i),e>=10&&(e=e/10-1);var c=!1;n.flavors[e].selected=!n.flavors[e].selected,n.flavors[e].selected?(o(e),c=!0):r(e),n.pickAFlavor()(e,c)},n.test=function(){t.info("click Test")}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/listOfFlavors.directive.htm",replace:!0,scope:{flavors:"=",pickAFlavor:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsChronoView(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsMapView(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsThisWeek(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsTimeFilter(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsToday(){function e(e,t,o,r){}function t(e,t){function o(e){var t=[];return Object.keys(e).forEach(function(o){var r=e[o];Object.keys(r).forEach(function(e){var o=r[e],n={start:"64800000",end:"64800000",name:o.name,address:"147 W. Center Street, Anaheim"};t.push(n)})}),t}function r(){n.eventsList=o(n.selectedLocation),n.todaysDate=new Date,t.info(n.todaysDate)}var n=this;t.info("vm.selectedLocation",n.selectedLocation),r()}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{selectedLocation:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function packagingFiller(){function e(e,t,o,r){}function t(e,t){function o(){c.state.packaging.selected=!1,c.state.packaging.size=void 0,c.state.packaging.flavors=0,c.state.packaging.mix={},Object.keys(c.state.buttons.flavorList).forEach(function(e){c.state.buttons.flavorList[e].selected=!1,c.state.buttons.flavorList[e].classes.availProductFlavor=!0,c.state.buttons.flavorList[e].classes.unAvailProductFlavor=!1,c.state.buttons.flavorList[e].classes.selectedProductFlavor=!1})}function r(e){return 1/e}function n(e){e?c.state.packaging.flavors++:c.state.packaging.flavors--}function i(e,t){var o=e.toString();t?(Object.keys(c.state.packaging.mix).forEach(function(e){c.state.packaging.mix[e]=r(c.state.packaging.flavors)}),c.state.packaging.mix[o]=r(c.state.packaging.flavors)):(Object.keys(c.state.packaging.mix).forEach(function(e){c.state.packaging.mix[e]=r(c.state.packaging.flavors)}),delete c.state.packaging.mix[o])}var c=this;c.qty=1,c.pickAFlavor=function(e,t){n(t),i(e,t)},c.addToCart=function(e){var t=c.state.packaging.size,r=c.state.packaging.mix,n=c.qty,i=c.pricing.calculatePurchasePrice(c.state.packaging,c.pricing),a=c.pricing.buildDescription(c.state.packaging,c.pricing),l={description:a,packaging:t,flavors:r,qty:n,cost:i};c.cart.items.push(c.addFilledPackage()(l)),o(),e?c.changeTab()(2):c.changeTab()(0)},c.discardButtonClicked=function(){o(),c.changeTab()(0)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{cart:"=",pricing:"=",changeTab:"&",state:"=",addFilledPackage:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function paymentManager(){function e(e,t,o,r){}function t(e,t,o){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/paymentManager.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],o}function platterFiller(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/platterFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function qtyManager(){function e(e,t,o,r){}function t(e,t){var o=this;o.subtract=function(){o.qty>1&&o.qty--},o.add=function(){o.qty++}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/qtyManager.directive.htm",replace:!0,scope:{qty:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function regionFinder(){function e(e,t,o,r){}function t(e,t){var o=this;o.states=[{name:"California",id:"CA"},{name:"Oregon",id:"OR"},{name:"Utah",id:"UT"}],o.selectState=function(e){t.info("got this",o.states[e]),o.locationRedirect()(o.states[e])}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/regionFinder.directive.htm",replace:!0,scope:{locationRedirect:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeEmpties(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeFulls(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectFlavors(){function e(e,t,o,r){}function t(e,t){var o=this;o.fillAPackage=function(e){o.currentlyFilling.packaging=e},o.sizeBtnClicked=function(e){t.info("clikced",e,o.packagingSelected[e]),o.packagingSelected[e]=o.removeASize()(o.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectPackaging(){function e(e,t,o,r){}function t(e,t){var o=this;o.sizeBtnClicked=function(e){o.state.packaging.selected=!0,o.state.packaging.size=e,t.info("got this size, ",o.pricing.packaging[e].title),o.changeTab()(1)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{state:"=",pricing:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function shippingOptions(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/shippingOptions.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function shoppingProgressBar(){function e(e,t,o,r){e.$watch("vm.activeTab",function(t,o){e.vm.changeTabClass(t,o)})}function t(e,t,o){var r=this;r.tabs=o.defaultState("shoppingProgressBar"),r.changeTabClass=function(e,t){r.tabs[t].classes.spbtabSelected=!1,r.tabs[e].classes.spbtabSelected=!0},r.tabClick=function(e){r.changeTabClass(e,r.activeTab),r.changeTab()(e)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/shoppingProgressBar.directive.htm",replace:!0,scope:{activeTab:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","stateFactory"],o}function toolBar(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function backendComFactory(e){function t(e){return fetch(e)}function o(e){return t(e).then(function(e){return e.json()})}function r(){return new Promise(function(e,t){})}function n(){return new Promise(function(t,r){o("/api/get/list/events").then(function(o){e.info("success:",o),t(o)})["catch"](function(t){e.info("error:",t),r(t)})})}var i={get:r,getLocations:n};return i}function dataServices(e){var t={};return t}function fillingsFactory(e){var t={packaging:void 0,flavors:{0:"Secret Recipe Pecans",1:"Drunken Pecans",2:"Cinnamon Pecans",3:"Secret Recipe Almonds",4:"Cinnamon Almonds",5:"Secret Recipe Cashews",6:"Secret Recipe Peanuts"},types:{0:"Pecans",1:"Pecans",2:"Pecans",3:"Almonds",4:"Almonds",5:"Cashews",6:"Peanuts"},recipies:{0:"Secret Recipe",1:"Drunken",2:"Cinnamon",3:"Secret Recipe",4:"Cinnamon",5:"Secret Recipe",6:"Secret Recipe"}};return t}function priceListFactory(e){function t(t,o){var r,n={},i=0;return e.info("mix",o),Object.keys(o).forEach(function(e){n[t[e]]=!0}),Object.keys(n).forEach(function(e){i++,r=e}),i>1&&(r="undefined"!=typeof o[6]&&o[6]>=.5?"Peanut Mix":"Mix"),r}function o(e,t){var o,r={},n=[];switch(Object.keys(t).forEach(function(t){r[e[t]]=!0}),Object.keys(r).forEach(function(e){n.push(e)}),n.length){case 1:o=n[0];break;case 2:o=n[0]+" & "+n[1];break;case 3:o=n[0]+", "+n[1]+" & "+n[2]}return o}function r(e,t){var o=0;if("undefined"==typeof e.mix[6])o=e.size>2?t.withoutPeanuts[e.size.toString()][0]:t.withoutPeanuts[e.size.toString()];else if(e.size>2){var r=4*e.mix[6];o=t.withPeanuts[e.size.toString()][r.toString()]}else o=e.mix[6]>=.5?t.withPeanuts[e.size.toString()]:t.withoutPeanuts[e.size.toString()];return o}function n(e,r){var n="";return n+=r.packaging[e.size.toString()].title,n+=": ",n+=t(r.types,e.mix),n+=" (",n+=o(r.recipies,e.mix),n+=")"}var i={packaging:{0:{title:"Small",volume:4,compartments:1,maxFlavors:100},1:{title:"Average",volume:8,compartments:1,maxFlavors:100},2:{title:"Impressive",volume:16,compartments:1,maxFlavors:100},3:{title:"Platter",volume:20,compartments:4,maxFlavors:4}},flavors:{0:"Secret Recipe Pecans",1:"Drunken Pecans",2:"Cinnamon Pecans",3:"Secret Recipe Almonds",4:"Cinnamon Almonds",5:"Secret Recipe Cashews",6:"Secret Recipe Peanuts"},types:{0:"Pecans",1:"Pecans",2:"Pecans",3:"Almonds",4:"Almonds",5:"Cashews",6:"Peanuts"},recipies:{0:"Secret Recipe",1:"Drunken",2:"Cinnamon",3:"Secret Recipe",4:"Cinnamon",5:"Secret Recipe",6:"Secret Recipe"},withPeanuts:{0:500,1:800,2:1100,3:{1:2e3,2:1800,3:1600,4:1400}},withoutPeanuts:{0:700,1:1300,2:1800,3:{0:2200}},_distillType:t,_distillFlavors:o,calculatePurchasePrice:r,buildDescription:n};return i}function shoppingCartsFactory(e){function t(e){return e+1}function o(e){return e>0?e-1:0}function r(t){return e.info("adding a new package now",t),t}function n(e,t){}function i(e){var t=(e.cost*e.qty/100).toFixed(2);return t}function c(e){var t=0;return e.forEach(function(e){t+=e.cost*e.qty/100}),t.toFixed(2)}var a={items:[],cost:{subtotal:3500,taxes:0,discounts:0,shipping:{}},addASize:t,removeASize:o,addFilledPackage:r,removeAPackage:n,calculateItemSubtotal:i,calculateTotalCost:c};return a}function stateFactory(e){function t(e){var t;return"shopping"==e?t={activeTab:0,allTabs:{0:"package",1:"flavor",2:"access",3:"checkout"},packaging:{selected:!1,size:void 0,flavors:0,mix:{},cost:0},buttons:{typeList:{0:{type:"Pecans",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:3,flavors:{0:{recipe:"SR",selected:!1},1:{recipe:"Drunk",selected:!1},2:{recipe:"Cinn",selected:!1}}},1:{type:"Almonds",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:2,flavors:{0:{recipe:"SR",selected:!1},1:{recipe:"Cinn",selected:!1}}},2:{type:"Cashews",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:1,flavors:{0:{recipe:"SR",selected:!1}}},3:{type:"Peanuts",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:1,flavors:{0:{recipe:"SR",selected:!1}}}},flavorList:{0:{title:"Secret Recipe Pecans",type:"Pecans",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",type:"Pecans",recipe:"Drunken",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",type:"Pecans",recipe:"Cinnamon",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",type:"Almonds",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Almonds",type:"Almonds",recipe:"Cinnamon",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",type:"Cashews",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",type:"Peanuts",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}},aquisition:{addressed:!1,pickup:{selected:!1,classes:{glyphicon:!0,"glyphicon-ok":!1}},ship:{selected:!1,classes:{glyphicon:!0,"glyphicon-ok":!1}}}}}:"shoppingProgressBar"==e&&(t={0:{classes:{spbtabSelected:!0},styles:{}},1:{classes:{spbtabSelected:!1},styles:{}},2:{classes:{spbtabSelected:!1},styles:{}},3:{classes:{spbtabSelected:!1},styles:{}}}),t}function o(){var e={0:{title:"Secret Recipe Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}};return e}var r={defaultState:t,buildButtonList:o};return r}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/shop/receipt",{templateUrl:"views/orderReceipt.htm",controller:"shoppingReceiptController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"}).when("/admin/server/test",{templateUrl:"views/admin.htm",controller:"adminController",controllerAs:"vm"})}config.$inject=["$routeProvider"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("adminController",adminController),adminController.$inject=["$log","$location"],angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=["$log","$location"],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams","$location","backendComFactory"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory","fillingsFactory","priceListFactory","stateFactory"],angular.module("ahNutsWebApp").controller("shoppingReceiptController",shoppingReceiptController),shoppingReceiptController.$inject=["$log"],angular.module("ahNutsWebApp").directive("aquisitionManager",aquisitionManager),angular.module("ahNutsWebApp").directive("cartSummary",cartSummary),angular.module("ahNutsWebApp").directive("coneFiller",coneFiller),angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("listOfFlavors",listOfFlavors),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("paymentManager",paymentManager),angular.module("ahNutsWebApp").directive("platterFiller",platterFiller),angular.module("ahNutsWebApp").directive("qtyManager",qtyManager),angular.module("ahNutsWebApp").directive("regionFinder",regionFinder),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("shippingOptions",shippingOptions),angular.module("ahNutsWebApp").directive("shoppingProgressBar",shoppingProgressBar),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").factory("backendComFactory",backendComFactory),backendComFactory.$inject=["$log","$http"],angular.module("ahNutsWebApp").factory("dataServices",dataServices),dataServices.$inject=["$log"],angular.module("ahNutsWebApp").factory("fillingsFactory",fillingsFactory),fillingsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("priceListFactory",priceListFactory),priceListFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"],angular.module("ahNutsWebApp").config(config);
//# sourceMappingURL=data:application/json;base64,
