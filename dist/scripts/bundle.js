function contactController(){}function landingController(e,t,r){function l(){}var o=this;o.navButtonClicked=function(t){var l="/"+t;e.info("redirecting to: "+l),r.path(l)},l()}function locationsController(e,t){e.info("params are: ",t)}function shoppingController(e,t,r,l,o){var n=this;n.currentlyFilling=r,n.cart=t,n.priceList=l,n.currentState=o.defaultState("shopping"),n.updateSelectedTab=function(t){n.currentState.activeTab=t,e.info("changing to tab",n.currentState.activeTab)}}function coneFiller(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/coneFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function emailHelper(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function listOfFlavors(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/listOfFlavors.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsChronoView(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsMapView(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsThisWeek(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsTimeFilter(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsToday(){function e(e,t,r,l){}function t(e,t,r){var l=this,o=r;l.todaysMarkets=o.get(),console.log(l.todaysMarkets)}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],r}function packagingFiller(){function e(e,t,r,l){}function t(e,t){function r(e){return 1/e}function l(e){Object.keys(a.currentlyFilling.flavors.selected).forEach(function(t){a.currentlyFilling.flavors.selected[t]?a.currentlyFilling.flavors.proportions[t]=e:a.currentlyFilling.flavors.proportions[t]=0})}function o(e){var t={};return Object.keys(e).forEach(function(r){e[r]>0&&(t[r]=e[r])}),t}function n(e,t){var r=void 0;return r="platter"==e?t.SRPeanut>0:t.SRPeanut>=.5}function i(e,t){var r=0,l="withoutPeanuts",o=0,i=n(e,t);return i&&(l="withPeanuts",o=4*t.SRPeanut),r="platter"==e?a.pricing[l][e][o]:a.pricing[l][e]}function c(e,t,r){var l=i(e,t);return l*r}var a=this;a.qty=1,a.pickAFlavor=function(e){a.currentlyFilling.flavors.selected[e]=!a.currentlyFilling.flavors.selected[e],a.currentlyFilling.flavors.selected[e]?a.currentlyFilling.flavors.noOfFlavors++:a.currentlyFilling.flavors.noOfFlavors--;var o=r(a.currentlyFilling.flavors.noOfFlavors);l(o),t.info("# of Flavors",a.currentlyFilling.flavors.noOfFlavors,"split",o,"propritions",a.currentlyFilling.flavors.proportions)},a.addToCart=function(){var e=a.currentlyFilling.packaging,t=o(a.currentlyFilling.flavors.proportions),r=a.qty,l={selectedPackaging:e,mixture:t,qty:r,subtotatl:c(e,t,r)};a.addFilledPackage()(l)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{pricing:"=",currentlyFilling:"=",addFilledPackage:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function platterFiller(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/platterFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeEmpties(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeFulls(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectFlavors(){function e(e,t,r,l){}function t(e,t){var r=this;r.fillAPackage=function(e){r.currentlyFilling.packaging=e},r.sizeBtnClicked=function(e){t.info("clikced",e,r.packagingSelected[e]),r.packagingSelected[e]=r.removeASize()(r.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectPackaging(){function e(e,t,r,l){}function t(e,t){var r=this;r.sizeBtnClicked=function(e){r.currentlyFilling.packaging=e,t.info("got this size, ",e),r.changeTab()(1)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{currentlyFilling:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function shoppingProgressBar(){function e(e,t,r,l){e.$watch("vm.activeTab",function(t,r){console.log("the tab changed",r,t),e.vm.changeTabClass(t,r)})}function t(e,t,r){var l=this;l.tabs=r.defaultState("shoppingProgressBar"),l.changeTabClass=function(e,t){l.tabs[t].classes.spbtabSelected=!1,l.tabs[e].classes.spbtabSelected=!0},l.tabClick=function(e){l.changeTabClass(e,l.activeTab),l.changeTab()(e)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shoppingProgressBar.directive.htm",replace:!0,scope:{activeTab:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","stateFactory"],r}function toolBar(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"})}function backendComFactory(e){function t(){return new Promise(function(e,t){e("it worked")})}var r={get:t};return r}function fillingsFactory(e){var t={packaging:void 0,flavors:{noOfFlavors:0,selected:{SRPecans:!1,DRPecans:!1,CNPecans:!1,SRAlmond:!1,CNAlmond:!1,SRCashew:!1,SRPeanut:!1},proportions:{SRPecans:0,DRPecans:0,CNPecans:0,SRAlmond:0,CNAlmond:0,SRCashew:0,SRPeanut:0}}};return t}function priceListFactory(e){var t={withPeanuts:{small:500,medium:800,large:1100,platter:{1:2e3,2:1800,3:1600,4:1400}},withoutPeanuts:{small:700,medium:1300,large:1800,platter:{0:2200}}};return t}function shoppingCartsFactory(e){function t(t){return e.info("got this",t," returning this ",t+1),t+1}function r(t){return t>0?(e.info("got this",t," returning this ",t-1),t-1):0}function l(t){e.info("adding a new package now",t)}function o(e,t){}var n={selectedPackaging:{smalls:0,mediums:0,larges:0,platters:0},filledPackaging:{smalls:{qty:0,mixes:[],subtotal:0},mediums:{qty:0,mixes:[],subtotal:0},larges:{qty:0,mixes:[],subtotal:0},platters:{qty:0,mixes:[],subtotal:0}},cost:{subtotal:0,taxes:0,discounts:0},addASize:t,removeASize:r,addFilledPackage:l,removeAPackage:o};return n}function stateFactory(e){function t(e){var t;return"shopping"==e?t={activeTab:0,allTabs:{0:"package",1:"flavor",2:"access",3:"checkout"},sizeSelected:!1}:"shoppingProgressBar"==e&&(t={0:{classes:{spbtabSelected:!0},styles:{}},1:{classes:{spbtabSelected:!1},styles:{}},2:{classes:{spbtabSelected:!1},styles:{}},3:{classes:{spbtabSelected:!1},styles:{}}}),t}var r={defaultState:t};return r}config.$inject=["$routeProvider"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=[],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory","fillingsFactory","priceListFactory","stateFactory"],angular.module("ahNutsWebApp").directive("coneFiller",coneFiller),angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("listOfFlavors",listOfFlavors),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("platterFiller",platterFiller),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("shoppingProgressBar",shoppingProgressBar),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").config(config),angular.module("ahNutsWebApp").factory("backendComFactory",backendComFactory),backendComFactory.$inject=["$log","$http"],angular.module("ahNutsWebApp").factory("fillingsFactory",fillingsFactory),fillingsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("priceListFactory",priceListFactory),priceListFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvY29udHJvbGxlcnMvY29udGFjdC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sYW5kaW5nLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvY2F0aW9ucy5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9zaG9wcGluZy5jb250cm9sbGVyLmpzIiwiYnVuZGxlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2NvbmVGaWxsZXIuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2VtYWlsSGVscGVyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9saXN0T2ZGbGF2b3JzLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9sb2NhdGlvbnNDaHJvbm9WaWV3LmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9sb2NhdGlvbnNNYXBWaWV3LmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9sb2NhdGlvbnNUaGlzV2Vlay5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvbG9jYXRpb25zVGltZUZpbHRlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvbG9jYXRpb25zVG9kYXkuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3BhY2thZ2luZ0ZpbGxlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcGxhdHRlckZpbGxlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2VlRW1wdGllcy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2VlRnVsbHMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NlbGVjdEZsYXZvcnMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NlbGVjdFBhY2thZ2luZy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2hvcHBpbmdQcm9ncmVzc0Jhci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdG9vbGJhci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL3JvdXRlcy9yb3V0ZS1jb25maWcuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9iYWNrZW5kQ29tLmZhY3RvcnkuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9maWxsaW5ncy5mYWN0b3J5LmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvcHJpY2VMaXN0cy5mYWN0b3J5LmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvc2hvcHBpbmdDYXJ0cy5mYWN0b3J5LmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvc3RhdGUuZmFjdG9yeS5qcyIsInNjcmlwdHMvYXBwLmpzIl0sIm5hbWVzIjpbImNvbnRhY3RDb250cm9sbGVyIiwibGFuZGluZ0NvbnRyb2xsZXIiLCIkbG9nIiwiJHJvdXRlUGFyYW1zIiwiJGxvY2F0aW9uIiwiaW5pdCIsInZtIiwidGhpcyIsIm5hdkJ1dHRvbkNsaWNrZWQiLCJwYXJhbSIsImZ1bGxQYXRoIiwiaW5mbyIsInBhdGgiLCJsb2NhdGlvbnNDb250cm9sbGVyIiwic2hvcHBpbmdDb250cm9sbGVyIiwic2hvcHBpbmdDYXJ0c0ZhY3RvcnkiLCJmaWxsaW5nc0ZhY3RvcnkiLCJwcmljZUxpc3RGYWN0b3J5Iiwic3RhdGVGYWN0b3J5IiwiY3VycmVudGx5RmlsbGluZyIsImNhcnQiLCJwcmljZUxpc3QiLCJjdXJyZW50U3RhdGUiLCJkZWZhdWx0U3RhdGUiLCJ1cGRhdGVTZWxlY3RlZFRhYiIsInRhYiIsImFjdGl2ZVRhYiIsImNvbmVGaWxsZXIiLCJsaW5rRnVuYyIsInNjb3BlIiwiZWwiLCJhdHRyIiwiY3RybCIsImNvbmVGaWxsZXJDb250cm9sbGVyIiwiJHNjb3BlIiwiJGluamVjdCIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwidGVtcGxhdGVVcmwiLCJyZXBsYWNlIiwibGluayIsImNvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJiaW5kVG9Db250cm9sbGVyIiwiZW1haWxIZWxwZXIiLCJlbWFpbEhlbHBlckNvbnRyb2xsZXIiLCJsaXN0T2ZGbGF2b3JzIiwibGlzdE9mRmxhdm9yc0NvbnRyb2xsZXIiLCJsb2NhdGlvbnNDaHJvbm9WaWV3IiwibG9jYXRpb25zQ2hyb25vVmlld0NvbnRyb2xsZXIiLCJsb2NhdGlvbnNNYXBWaWV3IiwibG9jYXRpb25zTWFwVmlld0NvbnRyb2xsZXIiLCJsb2NhdGlvbnNUaGlzV2VlayIsImxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlciIsImxvY2F0aW9uc1RpbWVGaWx0ZXIiLCJsb2NhdGlvbnNUaW1lRmlsdGVyQ29udHJvbGxlciIsImxvY2F0aW9uc1RvZGF5IiwibG9jYXRpb25zVG9kYXlDb250cm9sbGVyIiwiYmFja2VuZENvbUZhY3RvcnkiLCJiYWNrZW5kIiwidG9kYXlzTWFya2V0cyIsImdldCIsImNvbnNvbGUiLCJsb2ciLCJwYWNrYWdpbmdGaWxsZXIiLCJwYWNrYWdpbmdGaWxsZXJDb250cm9sbGVyIiwiZXF1YWxTcGxpdCIsImRpdmlzaW9ucyIsImFzc2lnbkVxdWFsU3BsaXQiLCJlcXVhbFBvcnRpb24iLCJPYmplY3QiLCJrZXlzIiwiZmxhdm9ycyIsInNlbGVjdGVkIiwiZm9yRWFjaCIsImZsYXZvciIsInByb3BvcnRpb25zIiwic3VwcGx5TWl4dHVyZU9iamVjdCIsImZsYXZvclByb3BvcnRpb25zIiwicmV0dXJuT2JqZWN0IiwiY2hlY2tGb3JQZWFudXRzIiwicGFja2FnaW5nIiwibWl4dHVyZSIsImhhc1BlYW51dHMiLCJ1bmRlZmluZWQiLCJTUlBlYW51dCIsImNhbGN1bGF0ZVB1cmNoYXNlUHJpY2UiLCJzYWxlUHJpY2UiLCJwZWFudXRTdGF0dXMiLCJwZWFudXRTZWN0aW9ucyIsInBlYW51dHNBcmVQcmVzZW50IiwicHJpY2luZyIsImNhbGN1bGF0ZUl0ZW1TdWJ0b3RhbCIsInF0eSIsInB1cmNoYXNlUHJpY2UiLCJwaWNrQUZsYXZvciIsIm5vT2ZGbGF2b3JzIiwiZXF1YWxQb3J0aW9ucyIsImFkZFRvQ2FydCIsInRoaXNQYWNrYWdpbmciLCJ0aGlzTWl4dHVyZSIsInRoaXNRdWFudGl0eSIsIm5ld1BhY2thZ2UiLCJzZWxlY3RlZFBhY2thZ2luZyIsInN1YnRvdGF0bCIsImFkZEZpbGxlZFBhY2thZ2UiLCJwbGF0dGVyRmlsbGVyIiwicGxhdHRlckZpbGxlckNvbnRyb2xsZXIiLCJzZWVFbXB0aWVzIiwic2VlRW1wdGllc0NvbnRyb2xsZXIiLCJzZWVGdWxscyIsInNlZUZ1bGxzQ29udHJvbGxlciIsInNlbGVjdEZsYXZvcnMiLCJzZWxlY3RGbGF2b3JzQ29udHJvbGxlciIsImZpbGxBUGFja2FnZSIsInNpemVCdG5DbGlja2VkIiwicGFja2FnaW5nU2VsZWN0ZWQiLCJyZW1vdmVBU2l6ZSIsInNlbGVjdFBhY2thZ2luZyIsInNlbGVjdFBhY2thZ2luZ0NvbnRyb2xsZXIiLCJzaXplIiwiY2hhbmdlVGFiIiwic2hvcHBpbmdQcm9ncmVzc0JhciIsIiR3YXRjaCIsIm5leHQiLCJjdXJyZW50IiwiY2hhbmdlVGFiQ2xhc3MiLCJzaG9wcGluZ1Byb2dyZXNzQmFyQ29udHJvbGxlciIsInRhYnMiLCJjbGFzc2VzIiwic3BidGFiU2VsZWN0ZWQiLCJ0YWJDbGljayIsInRvb2xCYXIiLCJUb29sQmFyQ29udHJvbGxlciIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYmFja2VuZENvbUVsZW1lbnRzIiwiYWxsRmlsbGluZ3MiLCJTUlBlY2FucyIsIkRSUGVjYW5zIiwiQ05QZWNhbnMiLCJTUkFsbW9uZCIsIkNOQWxtb25kIiwiU1JDYXNoZXciLCJhbGxQcmljZXMiLCJ3aXRoUGVhbnV0cyIsInNtYWxsIiwibWVkaXVtIiwibGFyZ2UiLCJwbGF0dGVyIiwiMSIsIjIiLCIzIiwiNCIsIndpdGhvdXRQZWFudXRzIiwiMCIsImFkZEFTaXplIiwic3RhcnRpbmdWYWx1ZSIsInJlbW92ZUFQYWNrYWdlIiwiaWQiLCJhbGxDYXJ0RWxlbWVudHMiLCJzbWFsbHMiLCJtZWRpdW1zIiwibGFyZ2VzIiwicGxhdHRlcnMiLCJmaWxsZWRQYWNrYWdpbmciLCJtaXhlcyIsInN1YnRvdGFsIiwiY29zdCIsInRheGVzIiwiZGlzY291bnRzIiwic2VjdGlvbiIsImFsbFRhYnMiLCJzaXplU2VsZWN0ZWQiLCJzdHlsZXMiLCJzdGF0ZXNGYWN0b3J5IiwiYWhOdXRzV2ViQXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImZhY3RvcnkiXSwibWFwcGluZ3MiOiJBQU9BLFFBQUFBLHNCQ0FBLFFBQUFDLG1CQUFBQyxFQUFBQyxFQUFBQyxHQU1BLFFBQUFDLE1BSEEsR0FBQUMsR0FBQUMsSUFXQUQsR0FBQUUsaUJBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBLElBQUFELENBRUFQLEdBQUFTLEtBQUEsbUJBQUFELEdBQ0FOLEVBQUFRLEtBQUFGLElBSUFMLElDdEJBLFFBQUFRLHFCQUFBWCxFQUFBQyxHQU1BRCxFQUFBUyxLQUFBLGVBQUFSLEdDTkEsUUFBQVcsb0JBQUFaLEVBQUFhLEVBQUFDLEVBQUFDLEVBQUFDLEdBR0EsR0FBQVosR0FBQUMsSUFHQUQsR0FBQWEsaUJBQUFILEVBQ0FWLEVBQUFjLEtBQUFMLEVBQ0FULEVBQUFlLFVBQUFKLEVBR0FYLEVBQUFnQixhQUFBSixFQUFBSyxhQUFBLFlBS0FqQixFQUFBa0Isa0JBQUEsU0FBQUMsR0FDQW5CLEVBQUFnQixhQUFBSSxVQUFBRCxFQUNBdkIsRUFBQVMsS0FBQSxrQkFBQUwsRUFBQWdCLGFBQUFJLFlDa0ZBLFFBQVNDLGNDakZULFFBQUFDLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsUUFBQUMsR0FBQUMsRUFBQWhDLElENkVJMEIsRUFBU08sU0FBVyxRQUFTLEtBQU0sT0FBUSxPQy9GL0MsSUFBQUMsSUFDQUMsU0FBQSxPQUNBQyxZQUFBLDRDQUNBQyxTQUFBLEVBQ0FWLFNBRUFXLEtBQUFaLEVBQ0FhLFdBQUFSLEVBQ0FTLGFBQUEsS0FDQUMsa0JBQUEsRUFjQSxPQVBBVixHQUFBRSxTQUFBLFNBQUEsUUFPQUMsRUQrR0EsUUFBU1EsZUUxSFQsUUFBQWhCLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsUUFBQWEsR0FBQVgsRUFBQWhDLElGc0hJMEIsRUFBU08sU0FBVyxRQUFTLEtBQU0sT0FBUSxPRXZJL0MsSUFBQUMsSUFDQUMsU0FBQSxPQUNBQyxZQUFBLDZDQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFJLEVBQ0FILGFBQUEsS0FDQUMsa0JBQUEsRUFjQSxPQVBBRSxHQUFBVixTQUFBLFNBQUEsUUFPQUMsRUZ1SkEsUUFBU1UsaUJHaEtULFFBQUFsQixHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFFBQUFlLEdBQUFiLEVBQUFoQyxJSDRKSTBCLEVBQVNPLFNBQVcsUUFBUyxLQUFNLE9BQVEsT0c5Sy9DLElBQUFDLElBQ0FDLFNBQUEsT0FDQUMsWUFBQSwrQ0FDQUMsU0FBQSxFQUNBVixTQUVBVyxLQUFBWixFQUNBYSxXQUFBTSxFQUNBTCxhQUFBLEtBQ0FDLGtCQUFBLEVBY0EsT0FQQUksR0FBQVosU0FBQSxTQUFBLFFBT0FDLEVIOExBLFFBQVNZLHVCSXpNVCxRQUFBcEIsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxRQUFBaUIsR0FBQWYsRUFBQWhDLElKcU1JMEIsRUFBU08sU0FBVyxRQUFTLEtBQU0sT0FBUSxPSXROL0MsSUFBQUMsSUFDQUMsU0FBQSxPQUNBQyxZQUFBLHFEQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFRLEVBQ0FQLGFBQUEsS0FDQUMsa0JBQUEsRUFjQSxPQVBBTSxHQUFBZCxTQUFBLFNBQUEsUUFPQUMsRUpzT0EsUUFBU2Msb0JLaFBULFFBQUF0QixHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFFBQUFtQixHQUFBakIsRUFBQWhDLElMNE9JMEIsRUFBU08sU0FBVyxRQUFTLEtBQU0sT0FBUSxPSzdQL0MsSUFBQUMsSUFDQUMsU0FBQSxPQUNBQyxZQUFBLGtEQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFVLEVBQ0FULGFBQUEsS0FDQUMsa0JBQUEsRUEwQkEsT0FuQkFRLEdBQUFoQixTQUFBLFNBQUEsUUFtQkFDLEVMNlFBLFFBQVNnQixxQk1uU1QsUUFBQXhCLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsUUFBQXFCLEdBQUFuQixFQUFBaEMsSU4rUkkwQixFQUFTTyxTQUFXLFFBQVMsS0FBTSxPQUFRLE9NaFQvQyxJQUFBQyxJQUNBQyxTQUFBLE9BQ0FDLFlBQUEsbURBQ0FDLFNBQUEsRUFDQVYsU0FDQVcsS0FBQVosRUFDQWEsV0FBQVksRUFDQVgsYUFBQSxLQUNBQyxrQkFBQSxFQWNBLE9BUEFVLEdBQUFsQixTQUFBLFNBQUEsUUFPQUMsRU5nVUEsUUFBU2tCLHVCTzFVVCxRQUFBMUIsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxRQUFBdUIsR0FBQXJCLEVBQUFoQyxJUHNVSTBCLEVBQVNPLFNBQVcsUUFBUyxLQUFNLE9BQVEsT092Vi9DLElBQUFDLElBQ0FDLFNBQUEsT0FDQUMsWUFBQSxxREFDQUMsU0FBQSxFQUNBVixTQUNBVyxLQUFBWixFQUNBYSxXQUFBYyxFQUNBYixhQUFBLEtBQ0FDLGtCQUFBLEVBY0EsT0FQQVksR0FBQXBCLFNBQUEsU0FBQSxRQU9BQyxFUHVXQSxRQUFTb0Isa0JRalhULFFBQUE1QixHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFFBQUF5QixHQUFBdkIsRUFBQWhDLEVBQUF3RCxHQUNBLEdBQUFwRCxHQUFBQyxLQUNBb0QsRUFBQUQsQ0FFQXBELEdBQUFzRCxjQUFBRCxFQUFBRSxNQUVBQyxRQUFBQyxJQUFBekQsRUFBQXNELGVSdVdJaEMsRUFBU08sU0FBVyxRQUFTLEtBQU0sT0FBUSxPUTlYL0MsSUFBQUMsSUFDQUMsU0FBQSxPQUNBQyxZQUFBLGdEQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFnQixFQUNBZixhQUFBLEtBQ0FDLGtCQUFBLEVBa0JBLE9BWEFjLEdBQUF0QixTQUFBLFNBQUEsT0FBQSxxQkFXQUMsRVI4WUEsUUFBUzRCLG1CU3haVCxRQUFBcEMsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxRQUFBaUMsR0FBQS9CLEVBQUFoQyxHQU1BLFFBQUFnRSxHQUFBQyxHQUNBLE1BQUEsR0FBQUEsRUFHQSxRQUFBQyxHQUFBQyxHQUVBQyxPQUFBQyxLQUFBakUsRUFBQWEsaUJBQUFxRCxRQUFBQyxVQUFBQyxRQUFBLFNBQUFDLEdBRUFyRSxFQUFBYSxpQkFBQXFELFFBQUFDLFNBQUFFLEdBQ0FyRSxFQUFBYSxpQkFBQXFELFFBQUFJLFlBQUFELEdBQUFOLEVBRUEvRCxFQUFBYSxpQkFBQXFELFFBQUFJLFlBQUFELEdBQUEsSUFNQSxRQUFBRSxHQUFBQyxHQUVBLEdBQUFDLEtBVUEsT0FQQVQsUUFBQUMsS0FBQU8sR0FBQUosUUFBQSxTQUFBQyxHQUVBRyxFQUFBSCxHQUFBLElBQ0FJLEVBQUFKLEdBQUFHLEVBQUFILE1BSUFJLEVBR0EsUUFBQUMsR0FBQUMsRUFBQUMsR0FFQSxHQUFBQyxHQUFBQyxNQWNBLE9BVEFELEdBRkEsV0FBQUYsRUFFQUMsRUFBQUcsU0FBQSxFQUtBSCxFQUFBRyxVQUFBLEdBT0EsUUFBQUMsR0FBQUwsRUFBQUMsR0FHQSxHQUFBSyxHQUFBLEVBQ0FDLEVBQUEsaUJBQ0FDLEVBQUEsRUFHQUMsRUFBQVYsRUFBQUMsRUFBQUMsRUFnQkEsT0FkQVEsS0FFQUYsRUFBQSxjQUVBQyxFQUFBLEVBQUFQLEVBQUFHLFVBS0FFLEVBREEsV0FBQU4sRUFDQTNFLEVBQUFxRixRQUFBSCxHQUFBUCxHQUFBUSxHQUVBbkYsRUFBQXFGLFFBQUFILEdBQUFQLEdBTUEsUUFBQVcsR0FBQVgsRUFBQUMsRUFBQVcsR0FFQSxHQUFBQyxHQUFBUixFQUFBTCxFQUFBQyxFQUVBLE9BQUFZLEdBQUFELEVBdkZBLEdBQUF2RixHQUFBQyxJQUdBRCxHQUFBdUYsSUFBQSxFQXdGQXZGLEVBQUF5RixZQUFBLFNBQUFwQixHQUdBckUsRUFBQWEsaUJBQUFxRCxRQUFBQyxTQUFBRSxJQUFBckUsRUFBQWEsaUJBQUFxRCxRQUFBQyxTQUFBRSxHQUdBckUsRUFBQWEsaUJBQUFxRCxRQUFBQyxTQUFBRSxHQUNBckUsRUFBQWEsaUJBQUFxRCxRQUFBd0IsY0FFQTFGLEVBQUFhLGlCQUFBcUQsUUFBQXdCLGFBR0EsSUFBQUMsR0FBQS9CLEVBQUE1RCxFQUFBYSxpQkFBQXFELFFBQUF3QixZQUNBNUIsR0FBQTZCLEdBR0EvRixFQUFBUyxLQUFBLGVBQUFMLEVBQUFhLGlCQUFBcUQsUUFBQXdCLFlBQUEsUUFBQUMsRUFBQSxjQUFBM0YsRUFBQWEsaUJBQUFxRCxRQUFBSSxjQUdBdEUsRUFBQTRGLFVBQUEsV0FHQSxHQUFBQyxHQUFBN0YsRUFBQWEsaUJBQUE4RCxVQUNBbUIsRUFBQXZCLEVBQUF2RSxFQUFBYSxpQkFBQXFELFFBQUFJLGFBQ0F5QixFQUFBL0YsRUFBQXVGLElBR0FTLEdBQ0FDLGtCQUFBSixFQUNBakIsUUFBQWtCLEVBQ0FQLElBQUFRLEVBQ0FHLFVBQUFaLEVBQUFPLEVBQUFDLEVBQUFDLEdBSUEvRixHQUFBbUcsbUJBQUFILElUcVJJMUUsRUFBU08sU0FBVyxRQUFTLEtBQU0sT0FBUSxPU3phL0MsSUFBQUMsSUFDQUMsU0FBQSxPQUNBQyxZQUFBLGlEQUNBQyxTQUFBLEVBQ0FWLE9BQ0E4RCxRQUFBLElBQ0F4RSxpQkFBQSxJQUNBc0YsaUJBQUEsS0FFQWpFLEtBQUFaLEVBQ0FhLFdBQUF3QixFQUNBdkIsYUFBQSxLQUNBQyxrQkFBQSxFQTZJQSxPQXRJQXNCLEdBQUE5QixTQUFBLFNBQUEsUUFzSUFDLEVUeWJBLFFBQVNzRSxpQlVya0JULFFBQUE5RSxHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFFBQUEyRSxHQUFBekUsRUFBQWhDLElWaWtCSTBCLEVBQVNPLFNBQVcsUUFBUyxLQUFNLE9BQVEsT1VubEIvQyxJQUFBQyxJQUNBQyxTQUFBLE9BQ0FDLFlBQUEsK0NBQ0FDLFNBQUEsRUFDQVYsU0FFQVcsS0FBQVosRUFDQWEsV0FBQWtFLEVBQ0FqRSxhQUFBLEtBQ0FDLGtCQUFBLEVBY0EsT0FQQWdFLEdBQUF4RSxTQUFBLFNBQUEsUUFPQUMsRVZtbUJBLFFBQVN3RSxjVzltQlQsUUFBQWhGLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLElBS0EsUUFBQTZFLEdBQUEzRSxFQUFBaEMsSVgwbUJJMEIsRUFBU08sU0FBVyxRQUFTLEtBQU0sT0FBUSxPVzNuQi9DLElBQUFDLElBQ0FDLFNBQUEsT0FDQUMsWUFBQSw0Q0FDQUMsU0FBQSxFQUNBVixTQUNBVyxLQUFBWixFQUNBYSxXQUFBb0UsRUFDQW5FLGFBQUEsS0FDQUMsa0JBQUEsRUFjQSxPQVBBa0UsR0FBQTFFLFNBQUEsU0FBQSxRQU9BQyxFWDJvQkEsUUFBUzBFLFlZcnBCVCxRQUFBbEYsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxRQUFBK0UsR0FBQTdFLEVBQUFoQyxJWmlwQkkwQixFQUFTTyxTQUFXLFFBQVMsS0FBTSxPQUFRLE9ZbHFCL0MsSUFBQUMsSUFDQUMsU0FBQSxPQUNBQyxZQUFBLDBDQUNBQyxTQUFBLEVBQ0FWLFNBQ0FXLEtBQUFaLEVBQ0FhLFdBQUFzRSxFQUNBckUsYUFBQSxLQUNBQyxrQkFBQSxFQWNBLE9BUEFvRSxHQUFBNUUsU0FBQSxTQUFBLFFBT0FDLEVaa3JCQSxRQUFTNEUsaUJhenJCVCxRQUFBcEYsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxRQUFBaUYsR0FBQS9FLEVBQUFoQyxHQUNBLEdBQUFJLEdBQUFDLElBSUFELEdBQUE0RyxhQUFBLFNBQUFqQyxHQUNBM0UsRUFBQWEsaUJBQUE4RCxVQUFBQSxHQUdBM0UsRUFBQTZHLGVBQUEsU0FBQWxDLEdBQ0EvRSxFQUFBUyxLQUFBLFVBQUFzRSxFQUFBM0UsRUFBQThHLGtCQUFBbkMsSUFFQTNFLEVBQUE4RyxrQkFBQW5DLEdBQUEzRSxFQUFBK0csY0FBQS9HLEVBQUE4RyxrQkFBQW5DLEtieXFCSXJELEVBQVNPLFNBQVcsUUFBUyxLQUFNLE9BQVEsT2F6c0IvQyxJQUFBQyxJQUNBQyxTQUFBLE9BQ0FDLFlBQUEsK0NBQ0FDLFNBQUEsRUFDQVYsT0FDQXVGLGtCQUFBLElBQ0FDLFlBQUEsS0FFQTdFLEtBQUFaLEVBQ0FhLFdBQUF3RSxFQUNBdkUsYUFBQSxLQUNBQyxrQkFBQSxFQTBCQSxPQW5CQXNFLEdBQUE5RSxTQUFBLFNBQUEsUUFtQkFDLEVieXRCQSxRQUFTa0YsbUJjL3VCVCxRQUFBMUYsR0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsSUFLQSxRQUFBdUYsR0FBQXJGLEVBQUFoQyxHQUNBLEdBQUFJLEdBQUFDLElBRUFELEdBQUE2RyxlQUFBLFNBQUFLLEdBRUFsSCxFQUFBYSxpQkFBQThELFVBQUF1QyxFQUNBdEgsRUFBQVMsS0FBQSxrQkFBQTZHLEdBR0FsSCxFQUFBbUgsWUFBQSxJZGt1Qkk3RixFQUFTTyxTQUFXLFFBQVMsS0FBTSxPQUFRLE9jL3ZCL0MsSUFBQUMsSUFDQUMsU0FBQSxPQUNBQyxZQUFBLGlEQUNBQyxTQUFBLEVBQ0FWLE9BQ0FWLGlCQUFBLElBQ0FzRyxVQUFBLEtBRUFqRixLQUFBWixFQUNBYSxXQUFBOEUsRUFDQTdFLGFBQUEsS0FDQUMsa0JBQUEsRUF1QkEsT0FoQkE0RSxHQUFBcEYsU0FBQSxTQUFBLFFBZ0JBQyxFZCt3QkEsUUFBU3NGLHVCZWx5QlQsUUFBQTlGLEdBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBR0FILEVBQUE4RixPQUFBLGVBQUEsU0FBQUMsRUFBQUMsR0FDQS9ELFFBQUFDLElBQUEsa0JBQUE4RCxFQUFBRCxHQUVBL0YsRUFBQXZCLEdBQUF3SCxlQUFBRixFQUFBQyxLQU9BLFFBQUFFLEdBQUE3RixFQUFBaEMsRUFBQWdCLEdBQ0EsR0FBQVosR0FBQUMsSUFHQUQsR0FBQTBILEtBQUE5RyxFQUFBSyxhQUFBLHVCQUdBakIsRUFBQXdILGVBQUEsU0FBQUYsRUFBQUMsR0FFQXZILEVBQUEwSCxLQUFBSCxHQUFBSSxRQUFBQyxnQkFBQSxFQUNBNUgsRUFBQTBILEtBQUFKLEdBQUFLLFFBQUFDLGdCQUFBLEdBR0E1SCxFQUFBNkgsU0FBQSxTQUFBMUcsR0FHQW5CLEVBQUF3SCxlQUFBckcsRUFBQW5CLEVBQUFvQixXQUdBcEIsRUFBQW1ILFlBQUFoRyxJZm13QklHLEVBQVNPLFNBQVcsUUFBUyxLQUFNLE9BQVEsT2VsekIvQyxJQUFBQyxJQUNBQyxTQUFBLE9BQ0FDLFlBQUEscURBQ0FDLFNBQUEsRUFDQVYsT0FDQUgsVUFBQSxJQUNBK0YsVUFBQSxLQUVBakYsS0FBQVosRUFDQWEsV0FBQXNGLEVBQ0FyRixhQUFBLEtBQ0FDLGtCQUFBLEVBd0NBLE9BekJBb0YsR0FBQTVGLFNBQUEsU0FBQSxPQUFBLGdCQXlCQUMsRWZrMEJBLFFBQVNnRyxXZ0J6MkJULFFBQUF4RyxHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxJQUtBLFFBQUFxRyxHQUFBbkcsRUFBQWhDLEloQnEyQkkwQixFQUFTTyxTQUFXLFFBQVMsS0FBTSxPQUFRLE9nQnQzQi9DLElBQUFDLElBQ0FDLFNBQUEsT0FDQUMsWUFBQSx5Q0FDQUMsU0FBQSxFQUNBVixTQUNBVyxLQUFBWixFQUNBYSxXQUFBNEYsRUFDQTNGLGFBQUEsS0FDQUMsa0JBQUEsRUFjQSxPQVBBMEYsR0FBQWxHLFNBQUEsU0FBQSxRQU9BQyxFQy9CQSxRQUFBa0csUUFBQUMsR0FDQUEsRUFFQUMsS0FBQSxLQUNBbEcsWUFBQSx3QkFDQUcsV0FBQSxvQkFDQUMsYUFBQSxPQUdBOEYsS0FBQSxTQUNBbEcsWUFBQSxxQkFDQUcsV0FBQSxxQkFDQUMsYUFBQSxPQUdBOEYsS0FBQSxjQUNBbEcsWUFBQSxzQkFDQUcsV0FBQSxzQkFDQUMsYUFBQSxPQUVBOEYsS0FBQSxxQkFDQWxHLFlBQUEsc0JBQ0FHLFdBQUEsc0JBQ0FDLGFBQUEsT0FFQThGLEtBQUEsNkJBQ0FsRyxZQUFBLHNCQUNBRyxXQUFBLHNCQUNBQyxhQUFBLE9BR0E4RixLQUFBLFlBQ0FsRyxZQUFBLG9CQUNBRyxXQUFBLG9CQUNBQyxhQUFBLE9DL0JBLFFBQUFnQixtQkFBQXhELEdBTUEsUUFBQTJELEtBQ0EsTUFBQSxJQUFBNEUsU0FBQSxTQUFBQyxFQUFBQyxHQUNBRCxFQUFBLGVBTkEsR0FBQUUsSUFDQS9FLElBQUFBLEVBVUEsT0FBQStFLEdDYkEsUUFBQTVILGlCQUFBZCxHQUdBLEdBQUEySSxJQUNBNUQsVUFBQUcsT0FDQVosU0FDQXdCLFlBQUEsRUFDQXZCLFVBQ0FxRSxVQUFBLEVBQ0FDLFVBQUEsRUFDQUMsVUFBQSxFQUNBQyxVQUFBLEVBQ0FDLFVBQUEsRUFDQUMsVUFBQSxFQUNBOUQsVUFBQSxHQUVBVCxhQUNBa0UsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQUMsU0FBQSxFQUNBQyxTQUFBLEVBQ0FDLFNBQUEsRUFDQTlELFNBQUEsSUFLQSxPQUFBd0QsR0M1QkEsUUFBQTVILGtCQUFBZixHQUdBLEdBQUFrSixJQUNBQyxhQUNBQyxNQUFBLElBQ0FDLE9BQUEsSUFDQUMsTUFBQSxLQUNBQyxTQUNBQyxFQUFBLElBQ0FDLEVBQUEsS0FDQUMsRUFBQSxLQUNBQyxFQUFBLE9BR0FDLGdCQUNBUixNQUFBLElBQ0FDLE9BQUEsS0FDQUMsTUFBQSxLQUNBQyxTQUNBTSxFQUFBLE9BS0EsT0FBQVgsR0N6QkEsUUFBQXJJLHNCQUFBYixHQTJDQSxRQUFBOEosR0FBQUMsR0FNQSxNQUhBL0osR0FBQVMsS0FBQSxXQUFBc0osRUFBQSxtQkFBQUEsRUFBQSxHQUdBQSxFQUFBLEVBRUEsUUFBQTVDLEdBQUE0QyxHQUVBLE1BQUFBLEdBQUEsR0FHQS9KLEVBQUFTLEtBQUEsV0FBQXNKLEVBQUEsbUJBQUFBLEVBQUEsR0FHQUEsRUFBQSxHQUNBLEVBRUEsUUFBQXhELEdBQUFILEdBQ0FwRyxFQUFBUyxLQUFBLDJCQUFBMkYsR0FFQSxRQUFBNEQsR0FBQTFDLEVBQUEyQyxJQTlEQSxHQUFBQyxJQUNBN0QsbUJBQ0E4RCxPQUFBLEVBQ0FDLFFBQUEsRUFDQUMsT0FBQSxFQUNBQyxTQUFBLEdBRUFDLGlCQUNBSixRQUNBeEUsSUFBQSxFQUNBNkUsU0FDQUMsU0FBQSxHQUVBTCxTQUNBekUsSUFBQSxFQUNBNkUsU0FDQUMsU0FBQSxHQUVBSixRQUNBMUUsSUFBQSxFQUNBNkUsU0FDQUMsU0FBQSxHQUVBSCxVQUNBM0UsSUFBQSxFQUNBNkUsU0FDQUMsU0FBQSxJQUdBQyxNQUNBRCxTQUFBLEVBQ0FFLE1BQUEsRUFDQUMsVUFBQSxHQUVBZCxTQUFBQSxFQUNBM0MsWUFBQUEsRUFDQVosaUJBQUFBLEVBQ0F5RCxlQUFBQSxFQTRCQSxPQUFBRSxHQ3BFQSxRQUFBbEosY0FBQWhCLEdBT0EsUUFBQXFCLEdBQUF3SixHQUVBLEdBQUFoRyxFQTBDQSxPQXhDQSxZQUFBZ0csRUFDQWhHLEdBQ0FyRCxVQUFBLEVBQ0FzSixTQUNBakIsRUFBQSxVQUNBTCxFQUFBLFNBQ0FDLEVBQUEsU0FDQUMsRUFBQSxZQUVBcUIsY0FBQSxHQUVBLHVCQUFBRixJQUNBaEcsR0FDQWdGLEdBQ0E5QixTQUNBQyxnQkFBQSxHQUVBZ0QsV0FFQXhCLEdBQ0F6QixTQUNBQyxnQkFBQSxHQUVBZ0QsV0FFQXZCLEdBQ0ExQixTQUNBQyxnQkFBQSxHQUVBZ0QsV0FFQXRCLEdBQ0EzQixTQUNBQyxnQkFBQSxHQUVBZ0QsYUFLQW5HLEVBaERBLEdBQUFvRyxJQUNBNUosYUFBQUEsRUFrREEsT0FBQTRKLEd0QjVEQTdDLE9BQU9uRyxTQUFXLGlCdUJBbEIsSUFBQWlKLGNBQUFDLFFBQUFDLE9BQUEsZ0JBQUEsVzNCREFELFNBQ0FDLE9BQUEsZ0JBQ0E3SSxXQUFBLG9CQUFBekMsbUJBRUFBLGtCQUFBbUMsV0NKQWtKLFFBQ0FDLE9BQUEsZ0JBQ0E3SSxXQUFBLG9CQUFBeEMsbUJBRUFBLGtCQUFBa0MsU0FBQSxPQUFBLGVBQUEsYUNKQWtKLFFBQ0FDLE9BQUEsZ0JBQ0E3SSxXQUFBLHNCQUFBNUIscUJBRUFBLG9CQUFBc0IsU0FBQSxPQUFBLGdCQ0pBa0osUUFDQUMsT0FBQSxnQkFDQTdJLFdBQUEscUJBQUEzQixvQkFFQUEsbUJBQUFxQixTQUFBLE9BQUEsdUJBQUEsa0JBQUEsbUJBQUEsZ0JFR0FrSixRQUNBQyxPQUFBLGdCQUNBbEosVUFBQSxhQUFBVCxZQ0ZBMEosUUFDQUMsT0FBQSxnQkFDQWxKLFVBQUEsY0FBQVEsYUNGQXlJLFFBQ0FDLE9BQUEsZ0JBQ0FsSixVQUFBLGdCQUFBVSxlQ0ZBdUksUUFDQUMsT0FBQSxnQkFDQWxKLFVBQUEsc0JBQUFZLHFCQ0ZBcUksUUFDQUMsT0FBQSxnQkFDQWxKLFVBQUEsbUJBQUFjLGtCQ0ZBbUksUUFDQUMsT0FBQSxnQkFDQWxKLFVBQUEsb0JBQUFnQixtQkNGQWlJLFFBQ0FDLE9BQUEsZ0JBQ0FsSixVQUFBLHNCQUFBa0IscUJDRkErSCxRQUNBQyxPQUFBLGdCQUNBbEosVUFBQSxpQkFBQW9CLGdCQ0ZBNkgsUUFDQUMsT0FBQSxnQkFDQWxKLFVBQUEsa0JBQUE0QixpQkNGQXFILFFBQ0FDLE9BQUEsZ0JBQ0FsSixVQUFBLGdCQUFBc0UsZUNGQTJFLFFBQ0FDLE9BQUEsZ0JBQ0FsSixVQUFBLGFBQUF3RSxZQ0ZBeUUsUUFDQUMsT0FBQSxnQkFDQWxKLFVBQUEsV0FBQTBFLFVDRkF1RSxRQUNBQyxPQUFBLGdCQUNBbEosVUFBQSxnQkFBQTRFLGVDRkFxRSxRQUNBQyxPQUFBLGdCQUNBbEosVUFBQSxrQkFBQWtGLGlCQ0ZBK0QsUUFDQUMsT0FBQSxnQkFDQWxKLFVBQUEsc0JBQUFzRixxQkNGQTJELFFBQ0FDLE9BQUEsZ0JBQ0FsSixVQUFBLFVBQUFnRyxTQ1RBaUQsUUFDQUMsT0FBQSxnQkFDQWhELE9BQUFBLFFDRkErQyxRQUNBQyxPQUFBLGdCQUNBQyxRQUFBLG9CQUFBN0gsbUJBRUFBLGtCQUFBdkIsU0FBQSxPQUFBLFNDSkFrSixRQUNBQyxPQUFBLGdCQUNBQyxRQUFBLGtCQUFBdkssaUJBRUFBLGdCQUFBbUIsU0FBQSxRQ0pBa0osUUFDQUMsT0FBQSxnQkFDQUMsUUFBQSxtQkFBQXRLLGtCQUVBQSxpQkFBQWtCLFNBQUEsUUNKQWtKLFFBQ0FDLE9BQUEsZ0JBQ0FDLFFBQUEsdUJBQUF4SyxzQkFFQUEscUJBQUFvQixTQUFBLFFDSkFrSixRQUNBQyxPQUFBLGdCQUNBQyxRQUFBLGVBQUFySyxjQUVBQSxhQUFBaUIsU0FBQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuY29udHJvbGxlcignY29udGFjdENvbnRyb2xsZXInLCBjb250YWN0Q29udHJvbGxlcik7XG5cbmNvbnRhY3RDb250cm9sbGVyLiRpbmplY3QgPSBbXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb250YWN0Q29udHJvbGxlcigpIHtcblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5jb250cm9sbGVyKCdsYW5kaW5nQ29udHJvbGxlcicsIGxhbmRpbmdDb250cm9sbGVyKTtcblxubGFuZGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbGFuZGluZ0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24pIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9sb2NhbCBtZXRob2RzXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cdFx0Ly9kZWZpbmUgdGhlIHN0YXRlIG9mIHRoaXMgcGFnZVxuXHRcdFxuXHRcdFxuXG5cdH07XG5cblx0Ly92aWV3IG1ldGhvZHNcblx0dm0ubmF2QnV0dG9uQ2xpY2tlZCA9IGZ1bmN0aW9uKHBhcmFtKSB7XG5cdFx0dmFyIGZ1bGxQYXRoID0gJy8nICsgcGFyYW07XG5cdFx0Ly9yZWRpcmVjdFxuXHRcdCRsb2cuaW5mbygncmVkaXJlY3RpbmcgdG86ICcgKyBmdWxsUGF0aCk7XG5cdFx0JGxvY2F0aW9uLnBhdGgoZnVsbFBhdGgpO1xuXHR9XG5cblx0Ly9ydW4gaW5pdCBmdW5jdGlvblxuXHRpbml0KCk7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ2xvY2F0aW9uc0NvbnRyb2xsZXInLCBsb2NhdGlvbnNDb250cm9sbGVyKTtcblxubG9jYXRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxvY2F0aW9uc0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vbm90aWZ5IHRoZSBwYXJhbXMgZm9yIHRoZSB0aW1lIGJlaW5nXHRUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cdCRsb2cuaW5mbygncGFyYW1zIGFyZTogJywgJHJvdXRlUGFyYW1zKTtcblxuXHQvL2xvY2FsIG1ldGhvZHNcblxuXHQvL3ZpZXcgbWV0aG9kc1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5jb250cm9sbGVyKCdzaG9wcGluZ0NvbnRyb2xsZXInLCBzaG9wcGluZ0NvbnRyb2xsZXIpO1xuXG5zaG9wcGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICdzaG9wcGluZ0NhcnRzRmFjdG9yeScsICdmaWxsaW5nc0ZhY3RvcnknLCAncHJpY2VMaXN0RmFjdG9yeScsICdzdGF0ZUZhY3RvcnknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzaG9wcGluZ0NvbnRyb2xsZXIoJGxvZywgc2hvcHBpbmdDYXJ0c0ZhY3RvcnksIGZpbGxpbmdzRmFjdG9yeSwgcHJpY2VMaXN0RmFjdG9yeSwgc3RhdGVGYWN0b3J5KSB7XG5cblx0Ly9kZWZpbmUgdGhlIGxvY2FsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9pbXBvcnQgcmVxdWlyZWQgb2JqZWN0c1xuICAgIHZtLmN1cnJlbnRseUZpbGxpbmcgPSBmaWxsaW5nc0ZhY3Rvcnk7XG5cdHZtLmNhcnQgPSBzaG9wcGluZ0NhcnRzRmFjdG9yeTtcblx0dm0ucHJpY2VMaXN0ID0gcHJpY2VMaXN0RmFjdG9yeTtcblxuXHQvL3N0YXRlIHRyYWNraW5nXG5cdHZtLmN1cnJlbnRTdGF0ZSA9IHN0YXRlRmFjdG9yeS5kZWZhdWx0U3RhdGUoJ3Nob3BwaW5nJyk7XG5cblx0Ly92aWV3IG1vZGVsIGZ1bmN0aW9uc1xuXG5cdC8vd2hlbiBhIHRhYiBpcyBzZWxlY3RlZCBjaGFuZ2UgdGhlIHRhYlxuXHR2bS51cGRhdGVTZWxlY3RlZFRhYiA9IGZ1bmN0aW9uKHRhYikge1xuXHRcdHZtLmN1cnJlbnRTdGF0ZS5hY3RpdmVUYWIgPSB0YWI7XG5cdFx0JGxvZy5pbmZvKCdjaGFuZ2luZyB0byB0YWInLCB2bS5jdXJyZW50U3RhdGUuYWN0aXZlVGFiKTtcblx0fVxuXG5cdFxufSIsIi8vIE1PRFVMRVxuY29uZmlnLiRpbmplY3QgPSBbXCIkcm91dGVQcm92aWRlclwiXTtcbnZhciBhaE51dHNXZWJBcHAgPSBhbmd1bGFyLm1vZHVsZSgnYWhOdXRzV2ViQXBwJywgWyduZ1JvdXRlJ10pO1xuXG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5jb250cm9sbGVyKCdjb250YWN0Q29udHJvbGxlcicsIGNvbnRhY3RDb250cm9sbGVyKTtcblxuY29udGFjdENvbnRyb2xsZXIuJGluamVjdCA9IFtdO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbnRhY3RDb250cm9sbGVyKCkge1xuXG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuY29udHJvbGxlcignbGFuZGluZ0NvbnRyb2xsZXInLCBsYW5kaW5nQ29udHJvbGxlcik7XG5cbmxhbmRpbmdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbiddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxhbmRpbmdDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vbG9jYWwgbWV0aG9kc1xuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdC8vZGVmaW5lIHRoZSBzdGF0ZSBvZiB0aGlzIHBhZ2Vcblx0XHRcblx0XHRcblxuXHR9O1xuXG5cdC8vdmlldyBtZXRob2RzXG5cdHZtLm5hdkJ1dHRvbkNsaWNrZWQgPSBmdW5jdGlvbihwYXJhbSkge1xuXHRcdHZhciBmdWxsUGF0aCA9ICcvJyArIHBhcmFtO1xuXHRcdC8vcmVkaXJlY3Rcblx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIHRvOiAnICsgZnVsbFBhdGgpO1xuXHRcdCRsb2NhdGlvbi5wYXRoKGZ1bGxQYXRoKTtcblx0fVxuXG5cdC8vcnVuIGluaXQgZnVuY3Rpb25cblx0aW5pdCgpO1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ2xvY2F0aW9uc0NvbnRyb2xsZXInLCBsb2NhdGlvbnNDb250cm9sbGVyKTtcblxubG9jYXRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxvY2F0aW9uc0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vbm90aWZ5IHRoZSBwYXJhbXMgZm9yIHRoZSB0aW1lIGJlaW5nXHRUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cdCRsb2cuaW5mbygncGFyYW1zIGFyZTogJywgJHJvdXRlUGFyYW1zKTtcblxuXHQvL2xvY2FsIG1ldGhvZHNcblxuXHQvL3ZpZXcgbWV0aG9kc1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ3Nob3BwaW5nQ29udHJvbGxlcicsIHNob3BwaW5nQ29udHJvbGxlcik7XG5cbnNob3BwaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJ3Nob3BwaW5nQ2FydHNGYWN0b3J5JywgJ2ZpbGxpbmdzRmFjdG9yeScsICdwcmljZUxpc3RGYWN0b3J5JywgJ3N0YXRlRmFjdG9yeSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNob3BwaW5nQ29udHJvbGxlcigkbG9nLCBzaG9wcGluZ0NhcnRzRmFjdG9yeSwgZmlsbGluZ3NGYWN0b3J5LCBwcmljZUxpc3RGYWN0b3J5LCBzdGF0ZUZhY3RvcnkpIHtcblxuXHQvL2RlZmluZSB0aGUgbG9jYWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQvL2ltcG9ydCByZXF1aXJlZCBvYmplY3RzXG4gICAgdm0uY3VycmVudGx5RmlsbGluZyA9IGZpbGxpbmdzRmFjdG9yeTtcblx0dm0uY2FydCA9IHNob3BwaW5nQ2FydHNGYWN0b3J5O1xuXHR2bS5wcmljZUxpc3QgPSBwcmljZUxpc3RGYWN0b3J5O1xuXG5cdC8vc3RhdGUgdHJhY2tpbmdcblx0dm0uY3VycmVudFN0YXRlID0gc3RhdGVGYWN0b3J5LmRlZmF1bHRTdGF0ZSgnc2hvcHBpbmcnKTtcblxuXHQvL3ZpZXcgbW9kZWwgZnVuY3Rpb25zXG5cblx0Ly93aGVuIGEgdGFiIGlzIHNlbGVjdGVkIGNoYW5nZSB0aGUgdGFiXG5cdHZtLnVwZGF0ZVNlbGVjdGVkVGFiID0gZnVuY3Rpb24odGFiKSB7XG5cdFx0dm0uY3VycmVudFN0YXRlLmFjdGl2ZVRhYiA9IHRhYjtcblx0XHQkbG9nLmluZm8oJ2NoYW5naW5nIHRvIHRhYicsIHZtLmN1cnJlbnRTdGF0ZS5hY3RpdmVUYWIpO1xuXHR9XG5cblx0XG59XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdjb25lRmlsbGVyJywgY29uZUZpbGxlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY29uZUZpbGxlcigpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2NvbmVGaWxsZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY29uZUZpbGxlckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjb25lRmlsbGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGNvbmVGaWxsZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnZW1haWxIZWxwZXInLCBlbWFpbEhlbHBlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZW1haWxIZWxwZXIoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9lbWFpbEhlbHBlci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBlbWFpbEhlbHBlckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBlbWFpbEhlbHBlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBlbWFpbEhlbHBlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdsaXN0T2ZGbGF2b3JzJywgbGlzdE9mRmxhdm9ycyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbGlzdE9mRmxhdm9ycygpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xpc3RPZkZsYXZvcnMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbGlzdE9mRmxhdm9yc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsaXN0T2ZGbGF2b3JzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxpc3RPZkZsYXZvcnNDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnbG9jYXRpb25zQ2hyb25vVmlldycsIGxvY2F0aW9uc0Nocm9ub1ZpZXcpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxvY2F0aW9uc0Nocm9ub1ZpZXcoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2NhdGlvbnNDaHJvbm9WaWV3LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxvY2F0aW9uc0Nocm9ub1ZpZXdDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgbG9jYXRpb25zQ2hyb25vVmlld0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsb2NhdGlvbnNDaHJvbm9WaWV3Q29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xvY2F0aW9uc01hcFZpZXcnLCBsb2NhdGlvbnNNYXBWaWV3KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNNYXBWaWV3KCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvbG9jYXRpb25zTWFwVmlldy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2NhdGlvbnNNYXBWaWV3Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGxvY2F0aW9uc01hcFZpZXdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gbG9jYXRpb25zTWFwVmlld0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvKmZ1bmN0aW9uIGluaXRNYXAoKSB7XG5cdCAgICAgICAgdmFyIHVsdXJ1ID0ge2xhdDogLTI1LjM2MywgbG5nOiAxMzEuMDQ0fTtcblx0ICAgICAgICB2YXIgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcblx0ICAgICAgICAgIHpvb206IDQsXG5cdCAgICAgICAgICBjZW50ZXI6IHVsdXJ1XG5cdCAgICAgICAgfSk7XG5cdCAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuXHQgICAgICAgICAgcG9zaXRpb246IHVsdXJ1LFxuXHQgICAgICAgICAgbWFwOiBtYXBcblx0ICAgICAgICB9KTtcblx0ICAgIH0qL1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdsb2NhdGlvbnNUaGlzV2VlaycsIGxvY2F0aW9uc1RoaXNXZWVrKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNUaGlzV2VlaygpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc1RoaXNXZWVrLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xvY2F0aW9uc1RpbWVGaWx0ZXInLCBsb2NhdGlvbnNUaW1lRmlsdGVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNUaW1lRmlsdGVyKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvbG9jYXRpb25zVGltZUZpbHRlci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2NhdGlvbnNUaW1lRmlsdGVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGxvY2F0aW9uc1RpbWVGaWx0ZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gbG9jYXRpb25zVGltZUZpbHRlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdsb2NhdGlvbnNUb2RheScsIGxvY2F0aW9uc1RvZGF5KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNUb2RheSgpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc1RvZGF5LmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxvY2F0aW9uc1RvZGF5Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGxvY2F0aW9uc1RvZGF5Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdiYWNrZW5kQ29tRmFjdG9yeSddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc1RvZGF5Q29udHJvbGxlcigkc2NvcGUsICRsb2csIGJhY2tlbmRDb21GYWN0b3J5KSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXHQgICAgdmFyIGJhY2tlbmQgPSBiYWNrZW5kQ29tRmFjdG9yeTtcblxuXHQgICAgdm0udG9kYXlzTWFya2V0cyA9IGJhY2tlbmQuZ2V0KCk7XG5cblx0ICAgIGNvbnNvbGUubG9nKHZtLnRvZGF5c01hcmtldHMpO1xuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgncGFja2FnaW5nRmlsbGVyJywgcGFja2FnaW5nRmlsbGVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwYWNrYWdpbmdGaWxsZXIoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wYWNrYWdpbmdGaWxsZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cHJpY2luZzogXCI9XCIsXG5cdFx0XHRjdXJyZW50bHlGaWxsaW5nOiBcIj1cIixcblx0XHRcdGFkZEZpbGxlZFBhY2thZ2U6IFwiJlwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwYWNrYWdpbmdGaWxsZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcGFja2FnaW5nRmlsbGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHBhY2thZ2luZ0ZpbGxlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvL3ZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdCAgICB2bS5xdHkgPSAxO1xuXG5cdCAgICBmdW5jdGlvbiBlcXVhbFNwbGl0KGRpdmlzaW9ucykge1xuXHQgICAgXHRyZXR1cm4gMSAvIGRpdmlzaW9ucztcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gYXNzaWduRXF1YWxTcGxpdChlcXVhbFBvcnRpb24pIHtcblxuXHQgICAgXHRPYmplY3Qua2V5cyh2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWQpLmZvckVhY2goZnVuY3Rpb24oZmxhdm9yKSB7XG5cdCAgICBcdFx0XG5cdCAgICBcdFx0aWYodm0uY3VycmVudGx5RmlsbGluZy5mbGF2b3JzLnNlbGVjdGVkW2ZsYXZvcl0pXG5cdCAgICBcdFx0XHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMucHJvcG9ydGlvbnNbZmxhdm9yXSA9IGVxdWFsUG9ydGlvbjtcblx0ICAgIFx0XHRlbHNlXG5cdCAgICBcdFx0XHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMucHJvcG9ydGlvbnNbZmxhdm9yXSA9IDAuMDBcblxuXHQgICAgXHR9KVxuXG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHN1cHBseU1peHR1cmVPYmplY3QoZmxhdm9yUHJvcG9ydGlvbnMpIHtcdFx0Ly9yZWNlaXZlIGFsbCB0aGUgcHJvcHJ0aW9uc1xuXHQgICAgXHQvL2luaXRpYWxpemUgbG9jYWwgdmFyaWFibGVcblx0ICAgIFx0dmFyIHJldHVybk9iamVjdCA9IHt9O1xuXG5cdCAgICBcdC8vY3ljbGUgdGhyb3VnaCBhbGwgdGhlIGZsYXZvcnMsIGlmIHByb3BvcnRpb24gaXMgZ3JlYXQgdGhhbiBcblx0ICAgIFx0T2JqZWN0LmtleXMoZmxhdm9yUHJvcG9ydGlvbnMpLmZvckVhY2goZnVuY3Rpb24oZmxhdm9yKSB7XG5cblx0ICAgIFx0XHRpZihmbGF2b3JQcm9wb3J0aW9uc1tmbGF2b3JdID4gMClcblx0ICAgIFx0XHRcdHJldHVybk9iamVjdFtmbGF2b3JdID0gZmxhdm9yUHJvcG9ydGlvbnNbZmxhdm9yXVxuXG5cdCAgICBcdH0pO1xuXG5cdCAgICBcdHJldHVybiByZXR1cm5PYmplY3RcdFx0Ly9yZXR1cm4gYSBkaXN0aWxsZWQgbGlzdCBvZiBwcm9wb3J0aW9uc1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBjaGVja0ZvclBlYW51dHMocGFja2FnaW5nLCBtaXh0dXJlKSB7XG5cblx0ICAgIFx0dmFyIGhhc1BlYW51dHMgPSB1bmRlZmluZWQ7XG5cblx0ICAgIFx0Ly9pcyB0aGlzIGEgbWl4dHVyZSBvciBhIHBsYXR0ZXI/XG5cdCAgICBcdGlmKHBhY2thZ2luZz09J3BsYXR0ZXInKSB7XG5cdCAgICBcdFx0Ly9hIHBsYXR0ZXIgd2l0aCBhdCBsZWFzdCBvbmUgc2VjdGlvbiBvZiBwZWFudXRzIGhhcyBwZWFudXRzXG5cdCAgICBcdFx0aWYobWl4dHVyZS5TUlBlYW51dCA+IDApIGhhc1BlYW51dHMgPSB0cnVlO1xuXHQgICAgXHRcdGVsc2UgaGFzUGVhbnV0cyA9IGZhbHNlO1xuXG5cdCAgICBcdH0gZWxzZSB7XG5cdCAgICBcdFx0Ly9hIG1peHR1cmUgbXVzdCBoYXZlIGF0IGxlYXN0IDUwJSBwZWFudXRzIHRvIGJlIGNvbnNpZGVyZWQgcGVhbnV0XG5cdCAgICBcdFx0aWYobWl4dHVyZS5TUlBlYW51dCA+PSAwLjUpIGhhc1BlYW51dHMgPSB0cnVlO1xuXHQgICAgXHRcdGVsc2UgaGFzUGVhbnV0cyA9IGZhbHNlO1xuXHQgICAgXHR9XG5cblx0ICAgIFx0cmV0dXJuIGhhc1BlYW51dHM7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVB1cmNoYXNlUHJpY2UocGFja2FnaW5nLCBtaXh0dXJlKSB7XG5cdCAgICBcdFxuXHQgICAgXHQvL2RlZmluZSB0aGUgbG9jYWwgdmFyaWFibGVcblx0ICAgIFx0dmFyIHNhbGVQcmljZSA9IDA7XG5cdCAgICBcdHZhciBwZWFudXRTdGF0dXMgPSAnd2l0aG91dFBlYW51dHMnO1xuXHQgICAgXHR2YXIgcGVhbnV0U2VjdGlvbnMgPSAwO1xuXG5cdCAgICBcdC8vZGV0ZXJtaW5lIHBlYW51dHMgcHJlc2VuY2UgYW5kIHF0eVxuXHQgICAgXHR2YXIgcGVhbnV0c0FyZVByZXNlbnQgPSBjaGVja0ZvclBlYW51dHMocGFja2FnaW5nLCBtaXh0dXJlKTtcblxuXHQgICAgXHRpZihwZWFudXRzQXJlUHJlc2VudCkge1xuXHQgICAgXHRcdC8vc2V0IHRoZSBvYmplY3QgdmFsdWVcblx0ICAgIFx0XHRwZWFudXRTdGF0dXMgPSAnd2l0aFBlYW51dHMnO1xuXHQgICAgXHRcdC8vY2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgcGVhbnV0IHNlY3Rpb25zXG5cdCAgICBcdFx0cGVhbnV0U2VjdGlvbnMgPSBtaXh0dXJlLlNSUGVhbnV0ICogNDtcblx0ICAgIFx0fVxuXG5cdCAgICBcdC8vcGFja2FnaW5nIGRpZmZlcnMgZm9yIHBsYXR0ZXJzIGFuZCBiYWdzXG5cdCAgICBcdGlmKHBhY2thZ2luZz09J3BsYXR0ZXInKSB7XG5cdCAgICBcdFx0c2FsZVByaWNlID0gdm0ucHJpY2luZ1twZWFudXRTdGF0dXNdW3BhY2thZ2luZ11bcGVhbnV0U2VjdGlvbnNdO1xuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdHNhbGVQcmljZSA9IHZtLnByaWNpbmdbcGVhbnV0U3RhdHVzXVtwYWNrYWdpbmddO1xuXHQgICAgXHR9XG5cblx0ICAgIFx0cmV0dXJuIHNhbGVQcmljZTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY2FsY3VsYXRlSXRlbVN1YnRvdGFsKHBhY2thZ2luZywgbWl4dHVyZSwgcXR5KSB7XG5cblx0ICAgIFx0dmFyIHB1cmNoYXNlUHJpY2UgPSBjYWxjdWxhdGVQdXJjaGFzZVByaWNlKHBhY2thZ2luZywgbWl4dHVyZSk7XG5cblx0ICAgIFx0cmV0dXJuIHB1cmNoYXNlUHJpY2UgKiBxdHk7XG5cdCAgICB9XG5cblx0ICAgIC8vdmlld21vZGVsIG1ldGhvZHNcblx0ICAgIHZtLnBpY2tBRmxhdm9yID0gZnVuY3Rpb24oZmxhdm9yKSB7XG5cblx0ICAgIFx0Ly9maXJzdCBmbGlwIHRoZSBjaGVja2JveFxuXHQgICAgXHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXSA9ICF2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXTtcblxuXHQgICAgXHQvL2luY3JlYXNlIG9yIGRlY3JlYXNlIHRoZSBudW1iZXIgb2YgZmxhdm9ycyBiYXNlZCBvbiB0aGUgc2lnblxuXHQgICAgXHRpZih2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXSlcblx0ICAgIFx0XHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMubm9PZkZsYXZvcnMrKztcblx0ICAgIFx0ZWxzZVxuXHQgICAgXHRcdHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5ub09mRmxhdm9ycy0tO1xuXG5cdCAgICBcdC8vdGhlbiBmb3IgZXF1YWwgc3BsaXQgY2FsY3VsYXRlIHRoZSBwZXJjZW50YWdlLCBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGZsYXZvcnNcblx0ICAgIFx0dmFyIGVxdWFsUG9ydGlvbnMgPSBlcXVhbFNwbGl0KHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5ub09mRmxhdm9ycyk7XG5cdCAgICBcdGFzc2lnbkVxdWFsU3BsaXQoZXF1YWxQb3J0aW9ucyk7XG5cblx0ICAgIFx0Ly9ub3RpZnkgdGhlIHVzZXJcblx0ICAgIFx0JGxvZy5pbmZvKCcjIG9mIEZsYXZvcnMnLCB2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMubm9PZkZsYXZvcnMsIFwic3BsaXRcIiwgZXF1YWxQb3J0aW9ucywgJ3Byb3ByaXRpb25zJywgdm0uY3VycmVudGx5RmlsbGluZy5mbGF2b3JzLnByb3BvcnRpb25zKTtcblx0ICAgIH1cblxuXHQgICAgdm0uYWRkVG9DYXJ0ID0gZnVuY3Rpb24oKSB7XHRcdC8vYWRkIHRoZSBjdXJyZW50IGl0ZW0gdG8gdGhlIGNhcnRcblx0ICAgIFx0XG5cdCAgICBcdC8vZGlzdGlsbCB0aGUgbWl4dHVyZVxuXHQgICAgXHR2YXIgdGhpc1BhY2thZ2luZyA9IHZtLmN1cnJlbnRseUZpbGxpbmcucGFja2FnaW5nO1xuXHQgICAgXHR2YXIgdGhpc01peHR1cmUgPSBzdXBwbHlNaXh0dXJlT2JqZWN0KHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5wcm9wb3J0aW9ucyk7XG5cdCAgICBcdHZhciB0aGlzUXVhbnRpdHkgPSB2bS5xdHk7XG5cblx0ICAgIFx0Ly9mb3JtYXQgdGhlIG9iamVjdCB0byBiZSBhZGRlZCB0byB0aGUgY2FydFxuXHQgICAgXHR2YXIgbmV3UGFja2FnZSA9IHtcblx0ICAgIFx0XHRzZWxlY3RlZFBhY2thZ2luZzogdGhpc1BhY2thZ2luZyxcblx0ICAgIFx0XHRtaXh0dXJlOiB0aGlzTWl4dHVyZSxcblx0ICAgIFx0XHRxdHk6IHRoaXNRdWFudGl0eSxcblx0ICAgIFx0XHRzdWJ0b3RhdGw6IGNhbGN1bGF0ZUl0ZW1TdWJ0b3RhbCh0aGlzUGFja2FnaW5nLCB0aGlzTWl4dHVyZSwgdGhpc1F1YW50aXR5KVxuXHQgICAgXHR9O1xuXG5cdCAgICBcdC8vcGFzcyBpdCB0byB0aGUgY2FydFxuXHQgICAgXHR2bS5hZGRGaWxsZWRQYWNrYWdlKCkobmV3UGFja2FnZSk7XG5cdCAgICB9XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3BsYXR0ZXJGaWxsZXInLCBwbGF0dGVyRmlsbGVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwbGF0dGVyRmlsbGVyKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcGxhdHRlckZpbGxlci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwbGF0dGVyRmlsbGVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHBsYXR0ZXJGaWxsZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcGxhdHRlckZpbGxlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdzZWVFbXB0aWVzJywgc2VlRW1wdGllcyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VlRW1wdGllcygpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3NlZUVtcHRpZXMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogc2VlRW1wdGllc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzZWVFbXB0aWVzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHNlZUVtcHRpZXNDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2VlRnVsbHMnLCBzZWVGdWxscyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VlRnVsbHMoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWVGdWxscy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWVGdWxsc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzZWVGdWxsc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWVGdWxsc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdzZWxlY3RGbGF2b3JzJywgc2VsZWN0Rmxhdm9ycyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VsZWN0Rmxhdm9ycygpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3NlbGVjdEZsYXZvcnMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cGFja2FnaW5nU2VsZWN0ZWQ6ICc9Jyxcblx0XHRcdHJlbW92ZUFTaXplOiAnJidcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNlbGVjdEZsYXZvcnNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VsZWN0Rmxhdm9yc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWxlY3RGbGF2b3JzQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblxuXHQgICAgLy9hc3NpZ24gYSBiYWcgdG8gYmUgZmlsbGVkXG5cdCAgICB2bS5maWxsQVBhY2thZ2UgPSBmdW5jdGlvbihwYWNrYWdpbmcpIHtcblx0ICAgIFx0dm0uY3VycmVudGx5RmlsbGluZy5wYWNrYWdpbmcgPSBwYWNrYWdpbmc7XG5cdCAgICB9XG5cblx0ICAgIHZtLnNpemVCdG5DbGlja2VkID0gZnVuY3Rpb24ocGFja2FnaW5nKSB7XG5cdCAgICBcdCRsb2cuaW5mbygnY2xpa2NlZCcsIHBhY2thZ2luZywgdm0ucGFja2FnaW5nU2VsZWN0ZWRbcGFja2FnaW5nXSk7XG5cdCAgICBcdC8vZGVjcmVtZW50IHRoZSBjb3VudCBvZiB0aGlzIHBhY2thZ2UgdGhhdCB3YXMgY2xpY2tlZFxuXHQgICAgXHR2bS5wYWNrYWdpbmdTZWxlY3RlZFtwYWNrYWdpbmddID0gdm0ucmVtb3ZlQVNpemUoKSh2bS5wYWNrYWdpbmdTZWxlY3RlZFtwYWNrYWdpbmddKTtcblx0ICAgIH1cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2VsZWN0UGFja2FnaW5nJywgc2VsZWN0UGFja2FnaW5nKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzZWxlY3RQYWNrYWdpbmcoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWxlY3RQYWNrYWdpbmcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0Y3VycmVudGx5RmlsbGluZzogJz0nLFxuXHRcdFx0Y2hhbmdlVGFiOiAnJidcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNlbGVjdFBhY2thZ2luZ0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzZWxlY3RQYWNrYWdpbmdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2VsZWN0UGFja2FnaW5nQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIHZtLnNpemVCdG5DbGlja2VkID0gZnVuY3Rpb24oc2l6ZSkge1xuXG5cdCAgICBcdHZtLmN1cnJlbnRseUZpbGxpbmcucGFja2FnaW5nID0gc2l6ZTtcblx0ICAgIFx0JGxvZy5pbmZvKCdnb3QgdGhpcyBzaXplLCAnLCBzaXplKTtcblxuXHQgICAgXHQvL2NoYW5nZSB0aGUgYWN0aXZlIHRhYlxuXHQgICAgXHR2bS5jaGFuZ2VUYWIoKSgxKTtcblx0ICAgIH1cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2hvcHBpbmdQcm9ncmVzc0JhcicsIHNob3BwaW5nUHJvZ3Jlc3NCYXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNob3BwaW5nUHJvZ3Jlc3NCYXIoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zaG9wcGluZ1Byb2dyZXNzQmFyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGFjdGl2ZVRhYjogJz0nLFxuXHRcdFx0Y2hhbmdlVGFiOiAnJidcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNob3BwaW5nUHJvZ3Jlc3NCYXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cdFx0Ly9uZWVkcyB0byBsaXN0ZW4gZm9yIGNoYW5nZXMgaW4gYWN0aXZlIHRhYiwgYXMgb3RoZXIgZGlyZWN0aXZlc1xuXHRcdC8vY2FuIHByb21wdCB0aGVzZSBjaGFuZ2VzXG5cdFx0c2NvcGUuJHdhdGNoKCd2bS5hY3RpdmVUYWInLCBmdW5jdGlvbihuZXh0LCBjdXJyZW50KSB7XG5cdFx0XHRjb25zb2xlLmxvZygndGhlIHRhYiBjaGFuZ2VkJywgY3VycmVudCwgbmV4dCk7XG5cdFx0XHQvL3VwZGF0ZSBzdHlsZXNcblx0ICAgIFx0c2NvcGUudm0uY2hhbmdlVGFiQ2xhc3MobmV4dCwgY3VycmVudCk7XG5cblx0XHR9KTtcbiAgICB9XG5cbiAgICBzaG9wcGluZ1Byb2dyZXNzQmFyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdzdGF0ZUZhY3RvcnknXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzaG9wcGluZ1Byb2dyZXNzQmFyQ29udHJvbGxlcigkc2NvcGUsICRsb2csIHN0YXRlRmFjdG9yeSkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy92aWV3IG1vZGVsIHZhcmlhYmxlc1xuXHQgICAgdm0udGFicyA9IHN0YXRlRmFjdG9yeS5kZWZhdWx0U3RhdGUoJ3Nob3BwaW5nUHJvZ3Jlc3NCYXInKTtcblxuXHQgICAgLy92aWV3IG1vZGVsIGZ1bmN0aW9uc1xuXHQgICAgdm0uY2hhbmdlVGFiQ2xhc3MgPSBmdW5jdGlvbihuZXh0LCBjdXJyZW50KSB7XG5cdCAgICBcdC8vdXBkYXRlIHN0eWxlc1xuXHQgICAgXHR2bS50YWJzW2N1cnJlbnRdLmNsYXNzZXMuc3BidGFiU2VsZWN0ZWQgPSBmYWxzZTtcblx0ICAgIFx0dm0udGFic1tuZXh0XS5jbGFzc2VzLnNwYnRhYlNlbGVjdGVkID0gdHJ1ZTtcdCAgICBcdFxuXHQgICAgfVxuXG5cdCAgICB2bS50YWJDbGljayA9IGZ1bmN0aW9uKHRhYikge1xuXG5cdCAgICBcdC8vdXBkYXRlIHRoZSBzdHlsZXNcblx0ICAgIFx0dm0uY2hhbmdlVGFiQ2xhc3ModGFiLCB2bS5hY3RpdmVUYWIpO1xuXG5cdCAgICBcdC8vdXBkYXRlIHBhcmVudCBtb2RlbFxuXHQgICAgXHR2bS5jaGFuZ2VUYWIoKSh0YWIpO1xuXHQgICAgfVxuXHR9XHRcblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCd0b29sQmFyJywgdG9vbEJhcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gdG9vbEJhcigpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3Rvb2xCYXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogVG9vbEJhckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBUb29sQmFyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIFRvb2xCYXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmNvbmZpZyhjb25maWcpO1xuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHsgICBcbiAgICAkcm91dGVQcm92aWRlclxuICAgIC8vZGVmaW5lIHRoZSBsYW5kaW5nIHBhZ2VcbiAgICAud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sYW5kaW5nUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnbGFuZGluZ0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBzaG9wcGluZyByb3V0ZXNcbiAgICAud2hlbignL3Nob3AnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2hvcHBpbmcuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ3Nob3BwaW5nQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIGxvY2F0aW9ucyByb3V0ZXNcbiAgICAud2hlbignL2xvY2F0aW9ucycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2NhdGlvbnMuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2xvY2F0aW9uc0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KSAgICBcbiAgICAud2hlbignL2xvY2F0aW9ucy86c3RhdGUnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbG9jYXRpb25zLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsb2NhdGlvbnNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2xvY2F0aW9ucy86c3RhdGUvOnJlZ2lvbicsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2NhdGlvbnMuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2xvY2F0aW9uc0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBjb250YWN0IHJvdXRlc1xuICAgIC53aGVuKCcvY29udGFjdCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jb250YWN0Lmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdjb250YWN0Q29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pO1xufVxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuZmFjdG9yeSgnYmFja2VuZENvbUZhY3RvcnknLCBiYWNrZW5kQ29tRmFjdG9yeSk7XG5cbmJhY2tlbmRDb21GYWN0b3J5LiRpbmplY3QgPSBbJyRsb2cnLCAnJGh0dHAnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBiYWNrZW5kQ29tRmFjdG9yeSgkbG9nKSB7XG5cblx0dmFyIGJhY2tlbmRDb21FbGVtZW50cyA9IHtcblx0XHRnZXQ6IGdldFxuXHR9O1xuXG5cdGZ1bmN0aW9uIGdldCgpIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRyZXNvbHZlKCdpdCB3b3JrZWQnKTtcblxuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIGJhY2tlbmRDb21FbGVtZW50cztcblxufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmZhY3RvcnkoJ2ZpbGxpbmdzRmFjdG9yeScsIGZpbGxpbmdzRmFjdG9yeSk7XG5cbmZpbGxpbmdzRmFjdG9yeS4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZmlsbGluZ3NGYWN0b3J5KCRsb2cpIHtcblxuXHQvL1RFTVBPUkFSWSBPQkpFQ1Rcblx0dmFyIGFsbEZpbGxpbmdzID0ge1xuICAgIFx0cGFja2FnaW5nOiB1bmRlZmluZWQsXG4gICAgXHRmbGF2b3JzOiB7XG4gICAgXHRcdG5vT2ZGbGF2b3JzOiAwLFxuICAgIFx0XHRzZWxlY3RlZDoge1xuXHQgICAgXHRcdFNSUGVjYW5zOiBmYWxzZSxcblx0ICAgIFx0XHREUlBlY2FuczogZmFsc2UsXG5cdCAgICBcdFx0Q05QZWNhbnM6IGZhbHNlLFxuXHQgICAgXHRcdFNSQWxtb25kOiBmYWxzZSxcblx0ICAgIFx0XHRDTkFsbW9uZDogZmFsc2UsXG5cdCAgICBcdFx0U1JDYXNoZXc6IGZhbHNlLFxuXHQgICAgXHRcdFNSUGVhbnV0OiBmYWxzZVxuICAgIFx0XHR9LFxuICAgIFx0XHRwcm9wb3J0aW9uczoge1xuXHQgICAgXHRcdFNSUGVjYW5zOiAwLjAwLFxuXHQgICAgXHRcdERSUGVjYW5zOiAwLjAwLFxuXHQgICAgXHRcdENOUGVjYW5zOiAwLjAwLFxuXHQgICAgXHRcdFNSQWxtb25kOiAwLjAwLFxuXHQgICAgXHRcdENOQWxtb25kOiAwLjAwLFxuXHQgICAgXHRcdFNSQ2FzaGV3OiAwLjAwLFxuXHQgICAgXHRcdFNSUGVhbnV0OiAwLjAwXG4gICAgXHRcdH1cbiAgICBcdH1cbiAgICB9O1xuXHRcblx0cmV0dXJuIGFsbEZpbGxpbmdzO1xuXG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuZmFjdG9yeSgncHJpY2VMaXN0RmFjdG9yeScsIHByaWNlTGlzdEZhY3RvcnkpO1xuXG5wcmljZUxpc3RGYWN0b3J5LiRpbmplY3QgPSBbJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwcmljZUxpc3RGYWN0b3J5KCRsb2cpIHtcblxuXHQvL1RFTVBPUkFSWSBPQkpFQ1Rcblx0dmFyIGFsbFByaWNlcyA9IHtcblx0XHR3aXRoUGVhbnV0czoge1xuXHRcdFx0c21hbGw6IDUwMCxcblx0XHRcdG1lZGl1bTogODAwLFxuXHRcdFx0bGFyZ2U6IDExMDAsXG5cdFx0XHRwbGF0dGVyOiB7XG5cdFx0XHRcdDE6IDIwMDAsXG5cdFx0XHRcdDI6IDE4MDAsXG5cdFx0XHRcdDM6IDE2MDAsXG5cdFx0XHRcdDQ6IDE0MDBcblx0XHRcdH1cblx0XHR9LFxuXHRcdHdpdGhvdXRQZWFudXRzOiB7XG5cdFx0XHRzbWFsbDogNzAwLFxuXHRcdFx0bWVkaXVtOiAxMzAwLFxuXHRcdFx0bGFyZ2U6IDE4MDAsXG5cdFx0XHRwbGF0dGVyOiB7XG5cdFx0XHRcdDA6IDIyMDBcblx0XHRcdH1cdFx0XHRcblx0XHR9XG5cdH07XG5cdFxuXHRyZXR1cm4gYWxsUHJpY2VzO1xuXG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuZmFjdG9yeSgnc2hvcHBpbmdDYXJ0c0ZhY3RvcnknLCBzaG9wcGluZ0NhcnRzRmFjdG9yeSk7XG5cbnNob3BwaW5nQ2FydHNGYWN0b3J5LiRpbmplY3QgPSBbJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzaG9wcGluZ0NhcnRzRmFjdG9yeSgkbG9nKSB7XG5cblx0Ly9URU1QT1JBUlkgT0JKRUNUXG5cdHZhciBhbGxDYXJ0RWxlbWVudHMgPSB7XG5cdFx0c2VsZWN0ZWRQYWNrYWdpbmc6IHtcblx0XHRcdHNtYWxsczogMCxcblx0XHRcdG1lZGl1bXM6IDAsXG5cdFx0XHRsYXJnZXM6IDAsXG5cdFx0XHRwbGF0dGVyczogMFxuXHRcdH0sXG5cdFx0ZmlsbGVkUGFja2FnaW5nOiB7XG5cdFx0XHRzbWFsbHM6IHtcblx0XHRcdFx0cXR5OiAwLFxuXHRcdFx0XHRtaXhlczogW10sXG5cdFx0XHRcdHN1YnRvdGFsOiAwXG5cdFx0XHR9LFxuXHRcdFx0bWVkaXVtczogIHtcblx0XHRcdFx0cXR5OiAwLFxuXHRcdFx0XHRtaXhlczogW10sXG5cdFx0XHRcdHN1YnRvdGFsOiAwXG5cdFx0XHR9LFxuXHRcdFx0bGFyZ2VzOiAge1xuXHRcdFx0XHRxdHk6IDAsXG5cdFx0XHRcdG1peGVzOiBbXSxcblx0XHRcdFx0c3VidG90YWw6IDBcblx0XHRcdH0sXG5cdFx0XHRwbGF0dGVyczogIHtcblx0XHRcdFx0cXR5OiAwLFxuXHRcdFx0XHRtaXhlczogW10sXG5cdFx0XHRcdHN1YnRvdGFsOiAwXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRjb3N0OiB7XG5cdFx0XHRzdWJ0b3RhbDogMCxcblx0XHRcdHRheGVzOiAwLFxuXHRcdFx0ZGlzY291bnRzOiAwXG5cdFx0fSxcblx0XHRhZGRBU2l6ZTogYWRkQVNpemUsXG5cdFx0cmVtb3ZlQVNpemU6IHJlbW92ZUFTaXplLFxuXHRcdGFkZEZpbGxlZFBhY2thZ2U6IGFkZEZpbGxlZFBhY2thZ2UsXG5cdFx0cmVtb3ZlQVBhY2thZ2U6IHJlbW92ZUFQYWNrYWdlXG5cdH07XG5cblx0ZnVuY3Rpb24gYWRkQVNpemUoc3RhcnRpbmdWYWx1ZSkge1xuXHRcdC8vVE9ETzogUkVNT1ZFIFRISVMgTEFURVJcblx0XHQvL25vdGlmeSB0aGUgdXNlciB3aGF0IGlzIGNvbWluZyBpbiBhbmQgd2hhdCBpcyBnb2luZyBvdXRcblx0XHQkbG9nLmluZm8oJ2dvdCB0aGlzJywgc3RhcnRpbmdWYWx1ZSwgJyByZXR1cm5pbmcgdGhpcyAnLCBzdGFydGluZ1ZhbHVlICsgMSk7XG5cblx0XHQvL2luY3JpbWVudCB0aGUgc3RhcnRpbmcgdmFsdWUgXG5cdFx0cmV0dXJuIHN0YXJ0aW5nVmFsdWUgKyAxO1xuXHR9XG5cdGZ1bmN0aW9uIHJlbW92ZUFTaXplKHN0YXJ0aW5nVmFsdWUpIHtcblx0XHRcblx0XHRpZihzdGFydGluZ1ZhbHVlID4gMCkge1xuXHRcdFx0Ly9UT0RPOiBSRU1PVkUgVEhJUyBMQVRFUlxuXHRcdFx0Ly9ub3RpZnkgdGhlIHVzZXIgd2hhdCBpcyBjb21pbmcgaW4gYW5kIHdoYXQgaXMgZ29pbmcgb3V0XG5cdFx0XHQkbG9nLmluZm8oJ2dvdCB0aGlzJywgc3RhcnRpbmdWYWx1ZSwgJyByZXR1cm5pbmcgdGhpcyAnLCBzdGFydGluZ1ZhbHVlIC0gMSk7XG5cblx0XHRcdC8vaW5jcmltZW50IHRoZSBzdGFydGluZyB2YWx1ZSBcblx0XHRcdHJldHVybiBzdGFydGluZ1ZhbHVlIC0gMTtcblx0XHR9IGVsc2UgcmV0dXJuIDA7XHRcdFxuXHR9XG5cdGZ1bmN0aW9uIGFkZEZpbGxlZFBhY2thZ2UobmV3UGFja2FnZSkge1xuXHRcdCRsb2cuaW5mbygnYWRkaW5nIGEgbmV3IHBhY2thZ2Ugbm93JywgbmV3UGFja2FnZSk7XG5cdH1cblx0ZnVuY3Rpb24gcmVtb3ZlQVBhY2thZ2Uoc2l6ZSwgaWQpIHt9XG5cblx0XG5cdHJldHVybiBhbGxDYXJ0RWxlbWVudHM7XG5cbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5mYWN0b3J5KCdzdGF0ZUZhY3RvcnknLCBzdGF0ZUZhY3RvcnkpO1xuXG5zdGF0ZUZhY3RvcnkuJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHN0YXRlRmFjdG9yeSgkbG9nKSB7XG5cblx0Ly9URU1QT1JBUlkgT0JKRUNUXG5cdHZhciBzdGF0ZXNGYWN0b3J5ID0ge1xuXHRcdGRlZmF1bHRTdGF0ZTogZGVmYXVsdFN0YXRlXG5cdH07XG5cdFxuXHRmdW5jdGlvbiBkZWZhdWx0U3RhdGUoc2VjdGlvbikge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZVxuXHRcdHZhciByZXR1cm5PYmplY3Q7XG5cblx0XHRpZihzZWN0aW9uPT0nc2hvcHBpbmcnKSB7XG5cdFx0XHRyZXR1cm5PYmplY3QgPSB7XG5cdFx0XHRcdGFjdGl2ZVRhYjogMCxcblx0XHRcdFx0YWxsVGFiczoge1xuXHRcdFx0XHRcdDA6ICdwYWNrYWdlJyxcblx0XHRcdFx0XHQxOiAnZmxhdm9yJyxcblx0XHRcdFx0XHQyOiAnYWNjZXNzJyxcblx0XHRcdFx0XHQzOiAnY2hlY2tvdXQnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNpemVTZWxlY3RlZDogZmFsc2Vcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYoc2VjdGlvbj09J3Nob3BwaW5nUHJvZ3Jlc3NCYXInKSB7XG5cdFx0XHRyZXR1cm5PYmplY3QgPSB7XG5cdFx0XHRcdDA6IHtcblx0XHRcdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdFx0XHRzcGJ0YWJTZWxlY3RlZDogdHJ1ZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0c3R5bGVzOiB7fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHQxOiB7XG5cdFx0XHRcdFx0Y2xhc3Nlczoge1xuXHRcdFx0XHRcdFx0c3BidGFiU2VsZWN0ZWQ6IGZhbHNlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdHlsZXM6IHt9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdDI6IHtcblx0XHRcdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdFx0XHRzcGJ0YWJTZWxlY3RlZDogZmFsc2Vcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHN0eWxlczoge31cblx0XHRcdFx0fSxcblx0XHRcdFx0Mzoge1xuXHRcdFx0XHRcdGNsYXNzZXM6IHtcblx0XHRcdFx0XHRcdHNwYnRhYlNlbGVjdGVkOiBmYWxzZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0c3R5bGVzOiB7fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldHVybk9iamVjdDtcblx0fVxuXG5cdHJldHVybiBzdGF0ZXNGYWN0b3J5O1xuXG59IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnY29uZUZpbGxlcicsIGNvbmVGaWxsZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmVGaWxsZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY29uZUZpbGxlci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjb25lRmlsbGVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNvbmVGaWxsZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY29uZUZpbGxlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnZW1haWxIZWxwZXInLCBlbWFpbEhlbHBlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZW1haWxIZWxwZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZW1haWxIZWxwZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogZW1haWxIZWxwZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZW1haWxIZWxwZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZW1haWxIZWxwZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xpc3RPZkZsYXZvcnMnLCBsaXN0T2ZGbGF2b3JzKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsaXN0T2ZGbGF2b3JzKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xpc3RPZkZsYXZvcnMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbGlzdE9mRmxhdm9yc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsaXN0T2ZGbGF2b3JzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxpc3RPZkZsYXZvcnNDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xvY2F0aW9uc0Nocm9ub1ZpZXcnLCBsb2NhdGlvbnNDaHJvbm9WaWV3KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNDaHJvbm9WaWV3KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc0Nocm9ub1ZpZXcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbG9jYXRpb25zQ2hyb25vVmlld0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNDaHJvbm9WaWV3Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc0Nocm9ub1ZpZXdDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xvY2F0aW9uc01hcFZpZXcnLCBsb2NhdGlvbnNNYXBWaWV3KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNNYXBWaWV3KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc01hcFZpZXcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbG9jYXRpb25zTWFwVmlld0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNNYXBWaWV3Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc01hcFZpZXdDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLypmdW5jdGlvbiBpbml0TWFwKCkge1xuXHQgICAgICAgIHZhciB1bHVydSA9IHtsYXQ6IC0yNS4zNjMsIGxuZzogMTMxLjA0NH07XG5cdCAgICAgICAgdmFyIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XG5cdCAgICAgICAgICB6b29tOiA0LFxuXHQgICAgICAgICAgY2VudGVyOiB1bHVydVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcblx0ICAgICAgICAgIHBvc2l0aW9uOiB1bHVydSxcblx0ICAgICAgICAgIG1hcDogbWFwXG5cdCAgICAgICAgfSk7XG5cdCAgICB9Ki9cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xvY2F0aW9uc1RoaXNXZWVrJywgbG9jYXRpb25zVGhpc1dlZWspO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxvY2F0aW9uc1RoaXNXZWVrKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc1RoaXNXZWVrLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdsb2NhdGlvbnNUaW1lRmlsdGVyJywgbG9jYXRpb25zVGltZUZpbHRlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9jYXRpb25zVGltZUZpbHRlcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2NhdGlvbnNUaW1lRmlsdGVyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxvY2F0aW9uc1RpbWVGaWx0ZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgbG9jYXRpb25zVGltZUZpbHRlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsb2NhdGlvbnNUaW1lRmlsdGVyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdsb2NhdGlvbnNUb2RheScsIGxvY2F0aW9uc1RvZGF5KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNUb2RheSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2NhdGlvbnNUb2RheS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2NhdGlvbnNUb2RheUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNUb2RheUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnYmFja2VuZENvbUZhY3RvcnknXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsb2NhdGlvbnNUb2RheUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBiYWNrZW5kQ29tRmFjdG9yeSkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZhciBiYWNrZW5kID0gYmFja2VuZENvbUZhY3Rvcnk7XG5cblx0ICAgIHZtLnRvZGF5c01hcmtldHMgPSBiYWNrZW5kLmdldCgpO1xuXG5cdCAgICBjb25zb2xlLmxvZyh2bS50b2RheXNNYXJrZXRzKTtcblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdwYWNrYWdpbmdGaWxsZXInLCBwYWNrYWdpbmdGaWxsZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHBhY2thZ2luZ0ZpbGxlcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wYWNrYWdpbmdGaWxsZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cHJpY2luZzogXCI9XCIsXG5cdFx0XHRjdXJyZW50bHlGaWxsaW5nOiBcIj1cIixcblx0XHRcdGFkZEZpbGxlZFBhY2thZ2U6IFwiJlwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwYWNrYWdpbmdGaWxsZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcGFja2FnaW5nRmlsbGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHBhY2thZ2luZ0ZpbGxlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvL3ZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdCAgICB2bS5xdHkgPSAxO1xuXG5cdCAgICBmdW5jdGlvbiBlcXVhbFNwbGl0KGRpdmlzaW9ucykge1xuXHQgICAgXHRyZXR1cm4gMSAvIGRpdmlzaW9ucztcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gYXNzaWduRXF1YWxTcGxpdChlcXVhbFBvcnRpb24pIHtcblxuXHQgICAgXHRPYmplY3Qua2V5cyh2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWQpLmZvckVhY2goZnVuY3Rpb24oZmxhdm9yKSB7XG5cdCAgICBcdFx0XG5cdCAgICBcdFx0aWYodm0uY3VycmVudGx5RmlsbGluZy5mbGF2b3JzLnNlbGVjdGVkW2ZsYXZvcl0pXG5cdCAgICBcdFx0XHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMucHJvcG9ydGlvbnNbZmxhdm9yXSA9IGVxdWFsUG9ydGlvbjtcblx0ICAgIFx0XHRlbHNlXG5cdCAgICBcdFx0XHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMucHJvcG9ydGlvbnNbZmxhdm9yXSA9IDAuMDBcblxuXHQgICAgXHR9KVxuXG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHN1cHBseU1peHR1cmVPYmplY3QoZmxhdm9yUHJvcG9ydGlvbnMpIHtcdFx0Ly9yZWNlaXZlIGFsbCB0aGUgcHJvcHJ0aW9uc1xuXHQgICAgXHQvL2luaXRpYWxpemUgbG9jYWwgdmFyaWFibGVcblx0ICAgIFx0dmFyIHJldHVybk9iamVjdCA9IHt9O1xuXG5cdCAgICBcdC8vY3ljbGUgdGhyb3VnaCBhbGwgdGhlIGZsYXZvcnMsIGlmIHByb3BvcnRpb24gaXMgZ3JlYXQgdGhhbiBcblx0ICAgIFx0T2JqZWN0LmtleXMoZmxhdm9yUHJvcG9ydGlvbnMpLmZvckVhY2goZnVuY3Rpb24oZmxhdm9yKSB7XG5cblx0ICAgIFx0XHRpZihmbGF2b3JQcm9wb3J0aW9uc1tmbGF2b3JdID4gMClcblx0ICAgIFx0XHRcdHJldHVybk9iamVjdFtmbGF2b3JdID0gZmxhdm9yUHJvcG9ydGlvbnNbZmxhdm9yXVxuXG5cdCAgICBcdH0pO1xuXG5cdCAgICBcdHJldHVybiByZXR1cm5PYmplY3RcdFx0Ly9yZXR1cm4gYSBkaXN0aWxsZWQgbGlzdCBvZiBwcm9wb3J0aW9uc1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBjaGVja0ZvclBlYW51dHMocGFja2FnaW5nLCBtaXh0dXJlKSB7XG5cblx0ICAgIFx0dmFyIGhhc1BlYW51dHMgPSB1bmRlZmluZWQ7XG5cblx0ICAgIFx0Ly9pcyB0aGlzIGEgbWl4dHVyZSBvciBhIHBsYXR0ZXI/XG5cdCAgICBcdGlmKHBhY2thZ2luZz09J3BsYXR0ZXInKSB7XG5cdCAgICBcdFx0Ly9hIHBsYXR0ZXIgd2l0aCBhdCBsZWFzdCBvbmUgc2VjdGlvbiBvZiBwZWFudXRzIGhhcyBwZWFudXRzXG5cdCAgICBcdFx0aWYobWl4dHVyZS5TUlBlYW51dCA+IDApIGhhc1BlYW51dHMgPSB0cnVlO1xuXHQgICAgXHRcdGVsc2UgaGFzUGVhbnV0cyA9IGZhbHNlO1xuXG5cdCAgICBcdH0gZWxzZSB7XG5cdCAgICBcdFx0Ly9hIG1peHR1cmUgbXVzdCBoYXZlIGF0IGxlYXN0IDUwJSBwZWFudXRzIHRvIGJlIGNvbnNpZGVyZWQgcGVhbnV0XG5cdCAgICBcdFx0aWYobWl4dHVyZS5TUlBlYW51dCA+PSAwLjUpIGhhc1BlYW51dHMgPSB0cnVlO1xuXHQgICAgXHRcdGVsc2UgaGFzUGVhbnV0cyA9IGZhbHNlO1xuXHQgICAgXHR9XG5cblx0ICAgIFx0cmV0dXJuIGhhc1BlYW51dHM7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVB1cmNoYXNlUHJpY2UocGFja2FnaW5nLCBtaXh0dXJlKSB7XG5cdCAgICBcdFxuXHQgICAgXHQvL2RlZmluZSB0aGUgbG9jYWwgdmFyaWFibGVcblx0ICAgIFx0dmFyIHNhbGVQcmljZSA9IDA7XG5cdCAgICBcdHZhciBwZWFudXRTdGF0dXMgPSAnd2l0aG91dFBlYW51dHMnO1xuXHQgICAgXHR2YXIgcGVhbnV0U2VjdGlvbnMgPSAwO1xuXG5cdCAgICBcdC8vZGV0ZXJtaW5lIHBlYW51dHMgcHJlc2VuY2UgYW5kIHF0eVxuXHQgICAgXHR2YXIgcGVhbnV0c0FyZVByZXNlbnQgPSBjaGVja0ZvclBlYW51dHMocGFja2FnaW5nLCBtaXh0dXJlKTtcblxuXHQgICAgXHRpZihwZWFudXRzQXJlUHJlc2VudCkge1xuXHQgICAgXHRcdC8vc2V0IHRoZSBvYmplY3QgdmFsdWVcblx0ICAgIFx0XHRwZWFudXRTdGF0dXMgPSAnd2l0aFBlYW51dHMnO1xuXHQgICAgXHRcdC8vY2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgcGVhbnV0IHNlY3Rpb25zXG5cdCAgICBcdFx0cGVhbnV0U2VjdGlvbnMgPSBtaXh0dXJlLlNSUGVhbnV0ICogNDtcblx0ICAgIFx0fVxuXG5cdCAgICBcdC8vcGFja2FnaW5nIGRpZmZlcnMgZm9yIHBsYXR0ZXJzIGFuZCBiYWdzXG5cdCAgICBcdGlmKHBhY2thZ2luZz09J3BsYXR0ZXInKSB7XG5cdCAgICBcdFx0c2FsZVByaWNlID0gdm0ucHJpY2luZ1twZWFudXRTdGF0dXNdW3BhY2thZ2luZ11bcGVhbnV0U2VjdGlvbnNdO1xuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdHNhbGVQcmljZSA9IHZtLnByaWNpbmdbcGVhbnV0U3RhdHVzXVtwYWNrYWdpbmddO1xuXHQgICAgXHR9XG5cblx0ICAgIFx0cmV0dXJuIHNhbGVQcmljZTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY2FsY3VsYXRlSXRlbVN1YnRvdGFsKHBhY2thZ2luZywgbWl4dHVyZSwgcXR5KSB7XG5cblx0ICAgIFx0dmFyIHB1cmNoYXNlUHJpY2UgPSBjYWxjdWxhdGVQdXJjaGFzZVByaWNlKHBhY2thZ2luZywgbWl4dHVyZSk7XG5cblx0ICAgIFx0cmV0dXJuIHB1cmNoYXNlUHJpY2UgKiBxdHk7XG5cdCAgICB9XG5cblx0ICAgIC8vdmlld21vZGVsIG1ldGhvZHNcblx0ICAgIHZtLnBpY2tBRmxhdm9yID0gZnVuY3Rpb24oZmxhdm9yKSB7XG5cblx0ICAgIFx0Ly9maXJzdCBmbGlwIHRoZSBjaGVja2JveFxuXHQgICAgXHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXSA9ICF2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXTtcblxuXHQgICAgXHQvL2luY3JlYXNlIG9yIGRlY3JlYXNlIHRoZSBudW1iZXIgb2YgZmxhdm9ycyBiYXNlZCBvbiB0aGUgc2lnblxuXHQgICAgXHRpZih2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXSlcblx0ICAgIFx0XHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMubm9PZkZsYXZvcnMrKztcblx0ICAgIFx0ZWxzZVxuXHQgICAgXHRcdHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5ub09mRmxhdm9ycy0tO1xuXG5cdCAgICBcdC8vdGhlbiBmb3IgZXF1YWwgc3BsaXQgY2FsY3VsYXRlIHRoZSBwZXJjZW50YWdlLCBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGZsYXZvcnNcblx0ICAgIFx0dmFyIGVxdWFsUG9ydGlvbnMgPSBlcXVhbFNwbGl0KHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5ub09mRmxhdm9ycyk7XG5cdCAgICBcdGFzc2lnbkVxdWFsU3BsaXQoZXF1YWxQb3J0aW9ucyk7XG5cblx0ICAgIFx0Ly9ub3RpZnkgdGhlIHVzZXJcblx0ICAgIFx0JGxvZy5pbmZvKCcjIG9mIEZsYXZvcnMnLCB2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMubm9PZkZsYXZvcnMsIFwic3BsaXRcIiwgZXF1YWxQb3J0aW9ucywgJ3Byb3ByaXRpb25zJywgdm0uY3VycmVudGx5RmlsbGluZy5mbGF2b3JzLnByb3BvcnRpb25zKTtcblx0ICAgIH1cblxuXHQgICAgdm0uYWRkVG9DYXJ0ID0gZnVuY3Rpb24oKSB7XHRcdC8vYWRkIHRoZSBjdXJyZW50IGl0ZW0gdG8gdGhlIGNhcnRcblx0ICAgIFx0XG5cdCAgICBcdC8vZGlzdGlsbCB0aGUgbWl4dHVyZVxuXHQgICAgXHR2YXIgdGhpc1BhY2thZ2luZyA9IHZtLmN1cnJlbnRseUZpbGxpbmcucGFja2FnaW5nO1xuXHQgICAgXHR2YXIgdGhpc01peHR1cmUgPSBzdXBwbHlNaXh0dXJlT2JqZWN0KHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5wcm9wb3J0aW9ucyk7XG5cdCAgICBcdHZhciB0aGlzUXVhbnRpdHkgPSB2bS5xdHk7XG5cblx0ICAgIFx0Ly9mb3JtYXQgdGhlIG9iamVjdCB0byBiZSBhZGRlZCB0byB0aGUgY2FydFxuXHQgICAgXHR2YXIgbmV3UGFja2FnZSA9IHtcblx0ICAgIFx0XHRzZWxlY3RlZFBhY2thZ2luZzogdGhpc1BhY2thZ2luZyxcblx0ICAgIFx0XHRtaXh0dXJlOiB0aGlzTWl4dHVyZSxcblx0ICAgIFx0XHRxdHk6IHRoaXNRdWFudGl0eSxcblx0ICAgIFx0XHRzdWJ0b3RhdGw6IGNhbGN1bGF0ZUl0ZW1TdWJ0b3RhbCh0aGlzUGFja2FnaW5nLCB0aGlzTWl4dHVyZSwgdGhpc1F1YW50aXR5KVxuXHQgICAgXHR9O1xuXG5cdCAgICBcdC8vcGFzcyBpdCB0byB0aGUgY2FydFxuXHQgICAgXHR2bS5hZGRGaWxsZWRQYWNrYWdlKCkobmV3UGFja2FnZSk7XG5cdCAgICB9XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdwbGF0dGVyRmlsbGVyJywgcGxhdHRlckZpbGxlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcGxhdHRlckZpbGxlcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wbGF0dGVyRmlsbGVyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHBsYXR0ZXJGaWxsZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcGxhdHRlckZpbGxlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBwbGF0dGVyRmlsbGVyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdzZWVFbXB0aWVzJywgc2VlRW1wdGllcyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VlRW1wdGllcygpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWVFbXB0aWVzLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNlZUVtcHRpZXNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VlRW1wdGllc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWVFbXB0aWVzQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdzZWVGdWxscycsIHNlZUZ1bGxzKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzZWVGdWxscygpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWVGdWxscy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWVGdWxsc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzZWVGdWxsc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWVGdWxsc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2VsZWN0Rmxhdm9ycycsIHNlbGVjdEZsYXZvcnMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNlbGVjdEZsYXZvcnMoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2VsZWN0Rmxhdm9ycy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRwYWNrYWdpbmdTZWxlY3RlZDogJz0nLFxuXHRcdFx0cmVtb3ZlQVNpemU6ICcmJ1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogc2VsZWN0Rmxhdm9yc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBzZWxlY3RGbGF2b3JzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHNlbGVjdEZsYXZvcnNDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXG5cdCAgICAvL2Fzc2lnbiBhIGJhZyB0byBiZSBmaWxsZWRcblx0ICAgIHZtLmZpbGxBUGFja2FnZSA9IGZ1bmN0aW9uKHBhY2thZ2luZykge1xuXHQgICAgXHR2bS5jdXJyZW50bHlGaWxsaW5nLnBhY2thZ2luZyA9IHBhY2thZ2luZztcblx0ICAgIH1cblxuXHQgICAgdm0uc2l6ZUJ0bkNsaWNrZWQgPSBmdW5jdGlvbihwYWNrYWdpbmcpIHtcblx0ICAgIFx0JGxvZy5pbmZvKCdjbGlrY2VkJywgcGFja2FnaW5nLCB2bS5wYWNrYWdpbmdTZWxlY3RlZFtwYWNrYWdpbmddKTtcblx0ICAgIFx0Ly9kZWNyZW1lbnQgdGhlIGNvdW50IG9mIHRoaXMgcGFja2FnZSB0aGF0IHdhcyBjbGlja2VkXG5cdCAgICBcdHZtLnBhY2thZ2luZ1NlbGVjdGVkW3BhY2thZ2luZ10gPSB2bS5yZW1vdmVBU2l6ZSgpKHZtLnBhY2thZ2luZ1NlbGVjdGVkW3BhY2thZ2luZ10pO1xuXHQgICAgfVxuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2VsZWN0UGFja2FnaW5nJywgc2VsZWN0UGFja2FnaW5nKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzZWxlY3RQYWNrYWdpbmcoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2VsZWN0UGFja2FnaW5nLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGN1cnJlbnRseUZpbGxpbmc6ICc9Jyxcblx0XHRcdGNoYW5nZVRhYjogJyYnXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWxlY3RQYWNrYWdpbmdDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VsZWN0UGFja2FnaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHNlbGVjdFBhY2thZ2luZ0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICB2bS5zaXplQnRuQ2xpY2tlZCA9IGZ1bmN0aW9uKHNpemUpIHtcblxuXHQgICAgXHR2bS5jdXJyZW50bHlGaWxsaW5nLnBhY2thZ2luZyA9IHNpemU7XG5cdCAgICBcdCRsb2cuaW5mbygnZ290IHRoaXMgc2l6ZSwgJywgc2l6ZSk7XG5cblx0ICAgIFx0Ly9jaGFuZ2UgdGhlIGFjdGl2ZSB0YWJcblx0ICAgIFx0dm0uY2hhbmdlVGFiKCkoMSk7XG5cdCAgICB9XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdzaG9wcGluZ1Byb2dyZXNzQmFyJywgc2hvcHBpbmdQcm9ncmVzc0Jhcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2hvcHBpbmdQcm9ncmVzc0JhcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zaG9wcGluZ1Byb2dyZXNzQmFyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGFjdGl2ZVRhYjogJz0nLFxuXHRcdFx0Y2hhbmdlVGFiOiAnJidcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNob3BwaW5nUHJvZ3Jlc3NCYXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG5cdFx0Ly9uZWVkcyB0byBsaXN0ZW4gZm9yIGNoYW5nZXMgaW4gYWN0aXZlIHRhYiwgYXMgb3RoZXIgZGlyZWN0aXZlc1xuXHRcdC8vY2FuIHByb21wdCB0aGVzZSBjaGFuZ2VzXG5cdFx0c2NvcGUuJHdhdGNoKCd2bS5hY3RpdmVUYWInLCBmdW5jdGlvbihuZXh0LCBjdXJyZW50KSB7XG5cdFx0XHRjb25zb2xlLmxvZygndGhlIHRhYiBjaGFuZ2VkJywgY3VycmVudCwgbmV4dCk7XG5cdFx0XHQvL3VwZGF0ZSBzdHlsZXNcblx0ICAgIFx0c2NvcGUudm0uY2hhbmdlVGFiQ2xhc3MobmV4dCwgY3VycmVudCk7XG5cblx0XHR9KTtcbiAgICB9XG5cbiAgICBzaG9wcGluZ1Byb2dyZXNzQmFyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdzdGF0ZUZhY3RvcnknXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzaG9wcGluZ1Byb2dyZXNzQmFyQ29udHJvbGxlcigkc2NvcGUsICRsb2csIHN0YXRlRmFjdG9yeSkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLy92aWV3IG1vZGVsIHZhcmlhYmxlc1xuXHQgICAgdm0udGFicyA9IHN0YXRlRmFjdG9yeS5kZWZhdWx0U3RhdGUoJ3Nob3BwaW5nUHJvZ3Jlc3NCYXInKTtcblxuXHQgICAgLy92aWV3IG1vZGVsIGZ1bmN0aW9uc1xuXHQgICAgdm0uY2hhbmdlVGFiQ2xhc3MgPSBmdW5jdGlvbihuZXh0LCBjdXJyZW50KSB7XG5cdCAgICBcdC8vdXBkYXRlIHN0eWxlc1xuXHQgICAgXHR2bS50YWJzW2N1cnJlbnRdLmNsYXNzZXMuc3BidGFiU2VsZWN0ZWQgPSBmYWxzZTtcblx0ICAgIFx0dm0udGFic1tuZXh0XS5jbGFzc2VzLnNwYnRhYlNlbGVjdGVkID0gdHJ1ZTtcdCAgICBcdFxuXHQgICAgfVxuXG5cdCAgICB2bS50YWJDbGljayA9IGZ1bmN0aW9uKHRhYikge1xuXG5cdCAgICBcdC8vdXBkYXRlIHRoZSBzdHlsZXNcblx0ICAgIFx0dm0uY2hhbmdlVGFiQ2xhc3ModGFiLCB2bS5hY3RpdmVUYWIpO1xuXG5cdCAgICBcdC8vdXBkYXRlIHBhcmVudCBtb2RlbFxuXHQgICAgXHR2bS5jaGFuZ2VUYWIoKSh0YWIpO1xuXHQgICAgfVxuXHR9XHRcblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgndG9vbEJhcicsIHRvb2xCYXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHRvb2xCYXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvdG9vbEJhci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBUb29sQmFyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIFRvb2xCYXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gVG9vbEJhckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmNvbmZpZyhjb25maWcpO1xuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHsgICBcbiAgICAkcm91dGVQcm92aWRlclxuICAgIC8vZGVmaW5lIHRoZSBsYW5kaW5nIHBhZ2VcbiAgICAud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sYW5kaW5nUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnbGFuZGluZ0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBzaG9wcGluZyByb3V0ZXNcbiAgICAud2hlbignL3Nob3AnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2hvcHBpbmcuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ3Nob3BwaW5nQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIGxvY2F0aW9ucyByb3V0ZXNcbiAgICAud2hlbignL2xvY2F0aW9ucycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2NhdGlvbnMuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2xvY2F0aW9uc0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KSAgICBcbiAgICAud2hlbignL2xvY2F0aW9ucy86c3RhdGUnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbG9jYXRpb25zLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsb2NhdGlvbnNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2xvY2F0aW9ucy86c3RhdGUvOnJlZ2lvbicsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2NhdGlvbnMuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2xvY2F0aW9uc0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBjb250YWN0IHJvdXRlc1xuICAgIC53aGVuKCcvY29udGFjdCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jb250YWN0Lmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdjb250YWN0Q29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pO1xufVxuIiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmZhY3RvcnkoJ2JhY2tlbmRDb21GYWN0b3J5JywgYmFja2VuZENvbUZhY3RvcnkpO1xuXG5iYWNrZW5kQ29tRmFjdG9yeS4kaW5qZWN0ID0gWyckbG9nJywgJyRodHRwJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gYmFja2VuZENvbUZhY3RvcnkoJGxvZykge1xuXG5cdHZhciBiYWNrZW5kQ29tRWxlbWVudHMgPSB7XG5cdFx0Z2V0OiBnZXRcblx0fTtcblxuXHRmdW5jdGlvbiBnZXQoKSB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXHRcdFx0cmVzb2x2ZSgnaXQgd29ya2VkJyk7XG5cblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiBiYWNrZW5kQ29tRWxlbWVudHM7XG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuZmFjdG9yeSgnZmlsbGluZ3NGYWN0b3J5JywgZmlsbGluZ3NGYWN0b3J5KTtcblxuZmlsbGluZ3NGYWN0b3J5LiRpbmplY3QgPSBbJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBmaWxsaW5nc0ZhY3RvcnkoJGxvZykge1xuXG5cdC8vVEVNUE9SQVJZIE9CSkVDVFxuXHR2YXIgYWxsRmlsbGluZ3MgPSB7XG4gICAgXHRwYWNrYWdpbmc6IHVuZGVmaW5lZCxcbiAgICBcdGZsYXZvcnM6IHtcbiAgICBcdFx0bm9PZkZsYXZvcnM6IDAsXG4gICAgXHRcdHNlbGVjdGVkOiB7XG5cdCAgICBcdFx0U1JQZWNhbnM6IGZhbHNlLFxuXHQgICAgXHRcdERSUGVjYW5zOiBmYWxzZSxcblx0ICAgIFx0XHRDTlBlY2FuczogZmFsc2UsXG5cdCAgICBcdFx0U1JBbG1vbmQ6IGZhbHNlLFxuXHQgICAgXHRcdENOQWxtb25kOiBmYWxzZSxcblx0ICAgIFx0XHRTUkNhc2hldzogZmFsc2UsXG5cdCAgICBcdFx0U1JQZWFudXQ6IGZhbHNlXG4gICAgXHRcdH0sXG4gICAgXHRcdHByb3BvcnRpb25zOiB7XG5cdCAgICBcdFx0U1JQZWNhbnM6IDAuMDAsXG5cdCAgICBcdFx0RFJQZWNhbnM6IDAuMDAsXG5cdCAgICBcdFx0Q05QZWNhbnM6IDAuMDAsXG5cdCAgICBcdFx0U1JBbG1vbmQ6IDAuMDAsXG5cdCAgICBcdFx0Q05BbG1vbmQ6IDAuMDAsXG5cdCAgICBcdFx0U1JDYXNoZXc6IDAuMDAsXG5cdCAgICBcdFx0U1JQZWFudXQ6IDAuMDBcbiAgICBcdFx0fVxuICAgIFx0fVxuICAgIH07XG5cdFxuXHRyZXR1cm4gYWxsRmlsbGluZ3M7XG5cbn0iLCJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuZmFjdG9yeSgncHJpY2VMaXN0RmFjdG9yeScsIHByaWNlTGlzdEZhY3RvcnkpO1xuXG5wcmljZUxpc3RGYWN0b3J5LiRpbmplY3QgPSBbJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwcmljZUxpc3RGYWN0b3J5KCRsb2cpIHtcblxuXHQvL1RFTVBPUkFSWSBPQkpFQ1Rcblx0dmFyIGFsbFByaWNlcyA9IHtcblx0XHR3aXRoUGVhbnV0czoge1xuXHRcdFx0c21hbGw6IDUwMCxcblx0XHRcdG1lZGl1bTogODAwLFxuXHRcdFx0bGFyZ2U6IDExMDAsXG5cdFx0XHRwbGF0dGVyOiB7XG5cdFx0XHRcdDE6IDIwMDAsXG5cdFx0XHRcdDI6IDE4MDAsXG5cdFx0XHRcdDM6IDE2MDAsXG5cdFx0XHRcdDQ6IDE0MDBcblx0XHRcdH1cblx0XHR9LFxuXHRcdHdpdGhvdXRQZWFudXRzOiB7XG5cdFx0XHRzbWFsbDogNzAwLFxuXHRcdFx0bWVkaXVtOiAxMzAwLFxuXHRcdFx0bGFyZ2U6IDE4MDAsXG5cdFx0XHRwbGF0dGVyOiB7XG5cdFx0XHRcdDA6IDIyMDBcblx0XHRcdH1cdFx0XHRcblx0XHR9XG5cdH07XG5cdFxuXHRyZXR1cm4gYWxsUHJpY2VzO1xuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmZhY3RvcnkoJ3Nob3BwaW5nQ2FydHNGYWN0b3J5Jywgc2hvcHBpbmdDYXJ0c0ZhY3RvcnkpO1xuXG5zaG9wcGluZ0NhcnRzRmFjdG9yeS4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2hvcHBpbmdDYXJ0c0ZhY3RvcnkoJGxvZykge1xuXG5cdC8vVEVNUE9SQVJZIE9CSkVDVFxuXHR2YXIgYWxsQ2FydEVsZW1lbnRzID0ge1xuXHRcdHNlbGVjdGVkUGFja2FnaW5nOiB7XG5cdFx0XHRzbWFsbHM6IDAsXG5cdFx0XHRtZWRpdW1zOiAwLFxuXHRcdFx0bGFyZ2VzOiAwLFxuXHRcdFx0cGxhdHRlcnM6IDBcblx0XHR9LFxuXHRcdGZpbGxlZFBhY2thZ2luZzoge1xuXHRcdFx0c21hbGxzOiB7XG5cdFx0XHRcdHF0eTogMCxcblx0XHRcdFx0bWl4ZXM6IFtdLFxuXHRcdFx0XHRzdWJ0b3RhbDogMFxuXHRcdFx0fSxcblx0XHRcdG1lZGl1bXM6ICB7XG5cdFx0XHRcdHF0eTogMCxcblx0XHRcdFx0bWl4ZXM6IFtdLFxuXHRcdFx0XHRzdWJ0b3RhbDogMFxuXHRcdFx0fSxcblx0XHRcdGxhcmdlczogIHtcblx0XHRcdFx0cXR5OiAwLFxuXHRcdFx0XHRtaXhlczogW10sXG5cdFx0XHRcdHN1YnRvdGFsOiAwXG5cdFx0XHR9LFxuXHRcdFx0cGxhdHRlcnM6ICB7XG5cdFx0XHRcdHF0eTogMCxcblx0XHRcdFx0bWl4ZXM6IFtdLFxuXHRcdFx0XHRzdWJ0b3RhbDogMFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y29zdDoge1xuXHRcdFx0c3VidG90YWw6IDAsXG5cdFx0XHR0YXhlczogMCxcblx0XHRcdGRpc2NvdW50czogMFxuXHRcdH0sXG5cdFx0YWRkQVNpemU6IGFkZEFTaXplLFxuXHRcdHJlbW92ZUFTaXplOiByZW1vdmVBU2l6ZSxcblx0XHRhZGRGaWxsZWRQYWNrYWdlOiBhZGRGaWxsZWRQYWNrYWdlLFxuXHRcdHJlbW92ZUFQYWNrYWdlOiByZW1vdmVBUGFja2FnZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIGFkZEFTaXplKHN0YXJ0aW5nVmFsdWUpIHtcblx0XHQvL1RPRE86IFJFTU9WRSBUSElTIExBVEVSXG5cdFx0Ly9ub3RpZnkgdGhlIHVzZXIgd2hhdCBpcyBjb21pbmcgaW4gYW5kIHdoYXQgaXMgZ29pbmcgb3V0XG5cdFx0JGxvZy5pbmZvKCdnb3QgdGhpcycsIHN0YXJ0aW5nVmFsdWUsICcgcmV0dXJuaW5nIHRoaXMgJywgc3RhcnRpbmdWYWx1ZSArIDEpO1xuXG5cdFx0Ly9pbmNyaW1lbnQgdGhlIHN0YXJ0aW5nIHZhbHVlIFxuXHRcdHJldHVybiBzdGFydGluZ1ZhbHVlICsgMTtcblx0fVxuXHRmdW5jdGlvbiByZW1vdmVBU2l6ZShzdGFydGluZ1ZhbHVlKSB7XG5cdFx0XG5cdFx0aWYoc3RhcnRpbmdWYWx1ZSA+IDApIHtcblx0XHRcdC8vVE9ETzogUkVNT1ZFIFRISVMgTEFURVJcblx0XHRcdC8vbm90aWZ5IHRoZSB1c2VyIHdoYXQgaXMgY29taW5nIGluIGFuZCB3aGF0IGlzIGdvaW5nIG91dFxuXHRcdFx0JGxvZy5pbmZvKCdnb3QgdGhpcycsIHN0YXJ0aW5nVmFsdWUsICcgcmV0dXJuaW5nIHRoaXMgJywgc3RhcnRpbmdWYWx1ZSAtIDEpO1xuXG5cdFx0XHQvL2luY3JpbWVudCB0aGUgc3RhcnRpbmcgdmFsdWUgXG5cdFx0XHRyZXR1cm4gc3RhcnRpbmdWYWx1ZSAtIDE7XG5cdFx0fSBlbHNlIHJldHVybiAwO1x0XHRcblx0fVxuXHRmdW5jdGlvbiBhZGRGaWxsZWRQYWNrYWdlKG5ld1BhY2thZ2UpIHtcblx0XHQkbG9nLmluZm8oJ2FkZGluZyBhIG5ldyBwYWNrYWdlIG5vdycsIG5ld1BhY2thZ2UpO1xuXHR9XG5cdGZ1bmN0aW9uIHJlbW92ZUFQYWNrYWdlKHNpemUsIGlkKSB7fVxuXG5cdFxuXHRyZXR1cm4gYWxsQ2FydEVsZW1lbnRzO1xuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmZhY3RvcnkoJ3N0YXRlRmFjdG9yeScsIHN0YXRlRmFjdG9yeSk7XG5cbnN0YXRlRmFjdG9yeS4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc3RhdGVGYWN0b3J5KCRsb2cpIHtcblxuXHQvL1RFTVBPUkFSWSBPQkpFQ1Rcblx0dmFyIHN0YXRlc0ZhY3RvcnkgPSB7XG5cdFx0ZGVmYXVsdFN0YXRlOiBkZWZhdWx0U3RhdGVcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGRlZmF1bHRTdGF0ZShzZWN0aW9uKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlXG5cdFx0dmFyIHJldHVybk9iamVjdDtcblxuXHRcdGlmKHNlY3Rpb249PSdzaG9wcGluZycpIHtcblx0XHRcdHJldHVybk9iamVjdCA9IHtcblx0XHRcdFx0YWN0aXZlVGFiOiAwLFxuXHRcdFx0XHRhbGxUYWJzOiB7XG5cdFx0XHRcdFx0MDogJ3BhY2thZ2UnLFxuXHRcdFx0XHRcdDE6ICdmbGF2b3InLFxuXHRcdFx0XHRcdDI6ICdhY2Nlc3MnLFxuXHRcdFx0XHRcdDM6ICdjaGVja291dCdcblx0XHRcdFx0fSxcblx0XHRcdFx0c2l6ZVNlbGVjdGVkOiBmYWxzZVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZihzZWN0aW9uPT0nc2hvcHBpbmdQcm9ncmVzc0JhcicpIHtcblx0XHRcdHJldHVybk9iamVjdCA9IHtcblx0XHRcdFx0MDoge1xuXHRcdFx0XHRcdGNsYXNzZXM6IHtcblx0XHRcdFx0XHRcdHNwYnRhYlNlbGVjdGVkOiB0cnVlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdHlsZXM6IHt9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdDE6IHtcblx0XHRcdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdFx0XHRzcGJ0YWJTZWxlY3RlZDogZmFsc2Vcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHN0eWxlczoge31cblx0XHRcdFx0fSxcblx0XHRcdFx0Mjoge1xuXHRcdFx0XHRcdGNsYXNzZXM6IHtcblx0XHRcdFx0XHRcdHNwYnRhYlNlbGVjdGVkOiBmYWxzZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0c3R5bGVzOiB7fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHQzOiB7XG5cdFx0XHRcdFx0Y2xhc3Nlczoge1xuXHRcdFx0XHRcdFx0c3BidGFiU2VsZWN0ZWQ6IGZhbHNlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdHlsZXM6IHt9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0dXJuT2JqZWN0O1xuXHR9XG5cblx0cmV0dXJuIHN0YXRlc0ZhY3Rvcnk7XG5cbn0iLCIvLyBNT0RVTEVcbnZhciBhaE51dHNXZWJBcHAgPSBhbmd1bGFyLm1vZHVsZSgnYWhOdXRzV2ViQXBwJywgWyduZ1JvdXRlJ10pO1xuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
