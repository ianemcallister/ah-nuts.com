function contactController(){}function landingController(e,t,o){function r(){}var l=this;l.navButtonClicked=function(t){var r="/"+t;e.info("redirecting to: "+r),o.path(r)},r()}function locationsController(e,t){e.info("params are: ",t)}function shoppingController(e,t,o){var r=this;r.currentlyFilling={packaging:void 0,flavors:{noOfFlavors:0,selected:{SRPecans:!1,DRPecans:!1,CNPecans:!1,SRAlmond:!1,CNAlmond:!1,SRCashew:!1,SRPeanut:!1},proportions:{SRPecans:0,DRPecans:0,CNPecans:0,SRAlmond:0,CNAlmond:0,SRCashew:0,SRPeanut:0}}},r.cart=t,r.priceList=o}function emailHelper(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsChronoView(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsMapView(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsThisWeek(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsTimeFilter(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsToday(){function e(e,t,o,r){}function t(e,t,o){var r=this,l=o;r.todaysMarkets=l.get(),console.log(r.todaysMarkets)}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],o}function packagingFiller(){function e(e,t,o,r){}function t(e,t){function o(e){return 1/e}function r(e){Object.keys(a.currentlyFilling.flavors.selected).forEach(function(t){a.currentlyFilling.flavors.selected[t]?a.currentlyFilling.flavors.proportions[t]=e:a.currentlyFilling.flavors.proportions[t]=0})}function l(e){var t={};return Object.keys(e).forEach(function(o){e[o]>0&&(t[o]=e[o])}),t}function n(e,t){var o=void 0;return o="platter"==e?t.SRPeanut>0:t.SRPeanut>=.5}function i(e,t){var o=0,r="withoutPeanuts",l=0,i=n(e,t);return i&&(r="withPeanuts",l=4*t.SRPeanut),o="platter"==e?a.pricing[r][e][l]:a.pricing[r][e]}function c(e,t,o){var r=i(e,t);return r*o}var a=this;a.qty=1,a.pickAFlavor=function(e){a.currentlyFilling.flavors.selected[e]=!a.currentlyFilling.flavors.selected[e],a.currentlyFilling.flavors.selected[e]?a.currentlyFilling.flavors.noOfFlavors++:a.currentlyFilling.flavors.noOfFlavors--;var l=o(a.currentlyFilling.flavors.noOfFlavors);r(l),t.info("# of Flavors",a.currentlyFilling.flavors.noOfFlavors,"split",l,"propritions",a.currentlyFilling.flavors.proportions)},a.addToCart=function(){var e=a.currentlyFilling.packaging,t=l(a.currentlyFilling.flavors.proportions),o=a.qty,r={selectedPackaging:e,mixture:t,qty:o,subtotatl:c(e,t,o)};a.addFilledPackage()(r)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{pricing:"=",currentlyFilling:"=",addFilledPackage:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeEmpties(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeFulls(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectFlavors(){function e(e,t,o,r){}function t(e,t){var o=this;o.fillAPackage=function(e){o.currentlyFilling.packaging=e},o.sizeBtnClicked=function(e){t.info("clikced",e,o.packagingSelected[e]),o.packagingSelected[e]=o.removeASize()(o.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectPackaging(){function e(e,t,o,r){}function t(e,t){var o=this;o.sizeBtnClicked=function(e){o.currentlyFilling.packaging=e,t.info("got this size, ",e)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{currentlyFilling:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function toolBar(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function backendComFactory(e){function t(){return new Promise(function(e,t){e("it worked")})}var o={get:t};return o}function priceListFactory(e){var t={withPeanuts:{small:500,medium:800,large:1100,platter:{1:2e3,2:1800,3:1600,4:1400}},withoutPeanuts:{small:700,medium:1300,large:1800,platter:{0:2200}}};return t}function shoppingCartsFactory(e){function t(t){return e.info("got this",t," returning this ",t+1),t+1}function o(t){return t>0?(e.info("got this",t," returning this ",t-1),t-1):0}function r(t){e.info("adding a new package now",t)}function l(e,t){}var n={selectedPackaging:{smalls:0,mediums:0,larges:0,platters:0},filledPackaging:{smalls:{qty:0,mixes:[],subtotal:0},mediums:{qty:0,mixes:[],subtotal:0},larges:{qty:0,mixes:[],subtotal:0},platters:{qty:0,mixes:[],subtotal:0}},cost:{subtotal:0,taxes:0,discounts:0},addASize:t,removeASize:o,addFilledPackage:r,removeAPackage:l};return n}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"})}config.$inject=["$routeProvider"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=[],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory","priceListFactory"],angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").factory("backendComFactory",backendComFactory),backendComFactory.$inject=["$log","$http"],angular.module("ahNutsWebApp").factory("priceListFactory",priceListFactory),priceListFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"],angular.module("ahNutsWebApp").config(config);
//# sourceMappingURL=data:application/json;base64,
