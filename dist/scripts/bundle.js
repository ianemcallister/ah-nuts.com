function contactController(){}function landingController(e,t,o){function l(){}var r=this;r.navButtonClicked=function(t){var l="/"+t;e.info("redirecting to: "+l),o.path(l)},l()}function locationsController(e,t){e.info("params are: ",t)}function shoppingController(e,t){var o=this;o.currentlyFilling={packaging:void 0,flavors:{SRPecans:0,DRPecans:0,CNPecans:0,SRAlmond:0,CNAlmond:0,SRCashew:0,SRPeanut:0}},o.cart=t}function emailHelper(){function e(e,t,o,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsChronoView(){function e(e,t,o,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsMapView(){function e(e,t,o,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsThisWeek(){function e(e,t,o,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsTimeFilter(){function e(e,t,o,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsToday(){function e(e,t,o,l){}function t(e,t,o){var l=this,r=o;l.todaysMarkets=r.get(),console.log(l.todaysMarkets)}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],o}function packagingFiller(){function e(e,t,o,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{currentlyFilling:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeEmpties(){function e(e,t,o,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeFulls(){function e(e,t,o,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectFlavors(){function e(e,t,o,l){}function t(e,t){var o=this;o.fillAPackage=function(e){o.currentlyFilling.packaging=e},o.sizeBtnClicked=function(e){t.info("clikced",e,o.packagingSelected[e]),o.packagingSelected[e]=o.removeASize()(o.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectPackaging(){function e(e,t,o,l){}function t(e,t){var o=this;o.sizeBtnClicked=function(e){o.currentlyFilling.packaging=e,t.info("got this size, ",e)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{currentlyFilling:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function toolBar(){function e(e,t,o,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"})}function backendComFactory(e){function t(){return new Promise(function(e,t){e("it worked")})}var o={get:t};return o}function shoppingCartsFactory(e){function t(t){return e.info("got this",t," returning this ",t+1),t+1}function o(t){return t>0?(e.info("got this",t," returning this ",t-1),t-1):0}function l(e){}function r(e,t){}var n={selectedPackaging:{smalls:0,mediums:0,larges:0,platters:0},filledPackaging:{smalls:{qty:0,mixes:[],subtotal:0},mediums:{qty:0,mixes:[],subtotal:0},larges:{qty:0,mixes:[],subtotal:0},platters:{qty:0,mixes:[],subtotal:0}},cost:{subtotal:0,taxes:0,discounts:0},addASize:t,removeASize:o,fillAPackage:l,removeAPackage:r};return n}config.$inject=["$routeProvider"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=[],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory"],angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").config(config),angular.module("ahNutsWebApp").factory("backendComFactory",backendComFactory),backendComFactory.$inject=["$log","$http"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"];
//# sourceMappingURL=data:application/json;base64,
