function contactController(){}function landingController(e,t,r){function l(){}var o=this;o.navButtonClicked=function(t){var l="/"+t;e.info("redirecting to: "+l),r.path(l)},l()}function locationsController(e,t){e.info("params are: ",t)}function shoppingController(e,t,r,l,o){var n=this;n.currentlyFilling=r,n.cart=t,n.priceList=l,n.currentState=o.defaultState("shopping"),n.updateSelectedTab=function(t){n.currentState.activeTab=t,e.info("changing to tab",n.currentState.activeTab)}}function coneFiller(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/coneFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function emailHelper(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function listOfFlavors(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/listOfFlavors.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsChronoView(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsMapView(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsThisWeek(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsTimeFilter(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsToday(){function e(e,t,r,l){}function t(e,t,r){var l=this,o=r;l.todaysMarkets=o.get(),console.log(l.todaysMarkets)}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],r}function packagingFiller(){function e(e,t,r,l){}function t(e,t){function r(e){return 1/e}function l(e){Object.keys(a.currentlyFilling.flavors.selected).forEach(function(t){a.currentlyFilling.flavors.selected[t]?a.currentlyFilling.flavors.proportions[t]=e:a.currentlyFilling.flavors.proportions[t]=0})}function o(e){var t={};return Object.keys(e).forEach(function(r){e[r]>0&&(t[r]=e[r])}),t}function n(e,t){var r=void 0;return r="platter"==e?t.SRPeanut>0:t.SRPeanut>=.5}function i(e,t){var r=0,l="withoutPeanuts",o=0,i=n(e,t);return i&&(l="withPeanuts",o=4*t.SRPeanut),r="platter"==e?a.pricing[l][e][o]:a.pricing[l][e]}function c(e,t,r){var l=i(e,t);return l*r}var a=this;a.qty=1,a.pickAFlavor=function(e){a.currentlyFilling.flavors.selected[e]=!a.currentlyFilling.flavors.selected[e],a.currentlyFilling.flavors.selected[e]?a.currentlyFilling.flavors.noOfFlavors++:a.currentlyFilling.flavors.noOfFlavors--;var o=r(a.currentlyFilling.flavors.noOfFlavors);l(o),t.info("# of Flavors",a.currentlyFilling.flavors.noOfFlavors,"split",o,"propritions",a.currentlyFilling.flavors.proportions)},a.addToCart=function(){var e=a.currentlyFilling.packaging,t=o(a.currentlyFilling.flavors.proportions),r=a.qty,l={selectedPackaging:e,mixture:t,qty:r,subtotatl:c(e,t,r)};a.addFilledPackage()(l)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{pricing:"=",currentlyFilling:"=",addFilledPackage:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function platterFiller(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/platterFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeEmpties(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeFulls(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectFlavors(){function e(e,t,r,l){}function t(e,t){var r=this;r.fillAPackage=function(e){r.currentlyFilling.packaging=e},r.sizeBtnClicked=function(e){t.info("clikced",e,r.packagingSelected[e]),r.packagingSelected[e]=r.removeASize()(r.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectPackaging(){function e(e,t,r,l){}function t(e,t){var r=this;r.sizeBtnClicked=function(e){r.currentlyFilling.packaging=e,t.info("got this size, ",e)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{currentlyFilling:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function shoppingProgressBar(){function e(e,t,r,l){}function t(e,t,r){var l=this;l.tabs=r.defaultState("shoppingProgressBar"),l.tabClick=function(e){t.info("clicked",e),l.tabs[l.activeTab].classes.spbtabSelected=!1,l.tabs[e].classes.spbtabSelected=!0,l.changeTab()(e)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shoppingProgressBar.directive.htm",replace:!0,scope:{activeTab:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","stateFactory"],r}function toolBar(){function e(e,t,r,l){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function backendComFactory(e){function t(){return new Promise(function(e,t){e("it worked")})}var r={get:t};return r}function fillingsFactory(e){var t={packaging:void 0,flavors:{noOfFlavors:0,selected:{SRPecans:!1,DRPecans:!1,CNPecans:!1,SRAlmond:!1,CNAlmond:!1,SRCashew:!1,SRPeanut:!1},proportions:{SRPecans:0,DRPecans:0,CNPecans:0,SRAlmond:0,CNAlmond:0,SRCashew:0,SRPeanut:0}}};return t}function priceListFactory(e){var t={withPeanuts:{small:500,medium:800,large:1100,platter:{1:2e3,2:1800,3:1600,4:1400}},withoutPeanuts:{small:700,medium:1300,large:1800,platter:{0:2200}}};return t}function shoppingCartsFactory(e){function t(t){return e.info("got this",t," returning this ",t+1),t+1}function r(t){return t>0?(e.info("got this",t," returning this ",t-1),t-1):0}function l(t){e.info("adding a new package now",t)}function o(e,t){}var n={selectedPackaging:{smalls:0,mediums:0,larges:0,platters:0},filledPackaging:{smalls:{qty:0,mixes:[],subtotal:0},mediums:{qty:0,mixes:[],subtotal:0},larges:{qty:0,mixes:[],subtotal:0},platters:{qty:0,mixes:[],subtotal:0}},cost:{subtotal:0,taxes:0,discounts:0},addASize:t,removeASize:r,addFilledPackage:l,removeAPackage:o};return n}function stateFactory(e){function t(e){var t;return"shopping"==e?t={activeTab:0,allTabs:{0:"package",1:"flavor",2:"access",3:"checkout"},sizeSelected:!1}:"shoppingProgressBar"==e&&(t={0:{classes:{spbtabSelected:!0},styles:{}},1:{classes:{spbtabSelected:!1},styles:{}},2:{classes:{spbtabSelected:!1},styles:{}},3:{classes:{spbtabSelected:!1},styles:{}}}),t}var r={defaultState:t};return r}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"})}config.$inject=["$routeProvider"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=[],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory","fillingsFactory","priceListFactory","stateFactory"],angular.module("ahNutsWebApp").directive("coneFiller",coneFiller),angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("listOfFlavors",listOfFlavors),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("platterFiller",platterFiller),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("shoppingProgressBar",shoppingProgressBar),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").factory("backendComFactory",backendComFactory),backendComFactory.$inject=["$log","$http"],angular.module("ahNutsWebApp").factory("fillingsFactory",fillingsFactory),fillingsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("priceListFactory",priceListFactory),priceListFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"],angular.module("ahNutsWebApp").config(config);
//# sourceMappingURL=data:application/json;base64,
