function contactController(){}function landingController(e,t,r){function o(){}var c=this;c.navButtonClicked=function(t){var o="/"+t;e.info("redirecting to: "+o),r.path(o)},o()}function locationsController(e,t){e.info("params are: ",t)}function shoppingController(e,t,r,o,c){var l=this;l.currentlyFilling=r,l.cart=t,l.priceList=o,l.currentState=c.defaultState("shopping"),l.currentState.flavorsBtnList=c.buildButtonList(),l.updateSelectedTab=function(e){l.currentState.activeTab=e}}function shoppingReceiptController(e){}function aquisitionManager(){function e(e,t,r,o){}function t(e,t){var r=this;r.methodClicked=function(e){var t="";r.state.buttons.aquisition.addressed=!0,r.state.buttons.aquisition[e].selected=!0,r.state.buttons.aquisition[e].classes["glyphicon-ok"]=!0,t="pickup"==e?"ship":"pickup",r.state.buttons.aquisition[t].selected=!1,r.state.buttons.aquisition[t].classes["glyphicon-ok"]=!1}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/aquisitionManager.directive.htm",replace:!0,scope:{state:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function cartSummary(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{cart:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function coneFiller(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/coneFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function emailHelper(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function listOfFlavors(){function e(e,t,r,o){}function t(e,t){function r(e){c.flavors[e].classes.availProductFlavor=!1,c.flavors[e].classes.selectedProductFlavor=!0,c.flavors[e].classes.unAvailProductFlavor=!1}function o(e){c.flavors[e].classes.availProductFlavor=!0,c.flavors[e].classes.selectedProductFlavor=!1,c.flavors[e].classes.unAvailProductFlavor=!1}var c=this;c.clickAFlavor=function(e){t.info("clicking",e);var l=!1;c.flavors[e].selected=!c.flavors[e].selected,c.flavors[e].selected?(r(e),l=!0):o(e),c.pickAFlavor()(e,l)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/listOfFlavors.directive.htm",replace:!0,scope:{flavors:"=",pickAFlavor:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsChronoView(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsMapView(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsThisWeek(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsTimeFilter(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsToday(){function e(e,t,r,o){}function t(e,t,r){var o=this,c=r;o.todaysMarkets=c.get(),console.log(o.todaysMarkets)}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],r}function packagingFiller(){function e(e,t,r,o){}function t(e,t){function r(){n.state.packaging.selected=!1,n.state.packaging.size=void 0,n.state.packaging.flavors=0,n.state.packaging.mix={},Object.keys(n.state.buttons.flavorList).forEach(function(e){n.state.buttons.flavorList[e].selected=!1,n.state.buttons.flavorList[e].classes.availProductFlavor=!0,n.state.buttons.flavorList[e].classes.unAvailProductFlavor=!1,n.state.buttons.flavorList[e].classes.selectedProductFlavor=!1})}function o(e){return 1/e}function c(e){e?n.state.packaging.flavors++:n.state.packaging.flavors--}function l(e,t){var r=e.toString();t?(Object.keys(n.state.packaging.mix).forEach(function(e){n.state.packaging.mix[e]=o(n.state.packaging.flavors)}),n.state.packaging.mix[r]=o(n.state.packaging.flavors)):(Object.keys(n.state.packaging.mix).forEach(function(e){n.state.packaging.mix[e]=o(n.state.packaging.flavors)}),delete n.state.packaging.mix[r])}var n=this;n.qty=1,n.pickAFlavor=function(e,t){c(t),l(e,t)},n.addToCart=function(e){var t=n.state.packaging.size,o=n.state.packaging.mix,c=n.qty,l=n.pricing.calculatePurchasePrice(n.state.packaging,n.pricing),i=n.pricing.buildDescription(n.state.packaging,n.pricing),a={description:i,packaging:t,flavors:o,qty:c,cost:l};n.cart.items.push(n.addFilledPackage()(a)),r(),e?n.changeTab()(2):n.changeTab()(0)},n.discardButtonClicked=function(){r(),n.changeTab()(0)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{cart:"=",pricing:"=",changeTab:"&",state:"=",addFilledPackage:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function paymentManager(){function e(e,t,r,o){}function t(e,t,r){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/paymentManager.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],r}function platterFiller(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/platterFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function qtyManager(){function e(e,t,r,o){}function t(e,t){var r=this;r.subtract=function(){r.qty>1&&r.qty--},r.add=function(){r.qty++}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/qtyManager.directive.htm",replace:!0,scope:{qty:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeEmpties(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeFulls(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectFlavors(){function e(e,t,r,o){}function t(e,t){var r=this;r.fillAPackage=function(e){r.currentlyFilling.packaging=e},r.sizeBtnClicked=function(e){t.info("clikced",e,r.packagingSelected[e]),r.packagingSelected[e]=r.removeASize()(r.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectPackaging(){function e(e,t,r,o){}function t(e,t){var r=this;r.sizeBtnClicked=function(e){r.state.packaging.selected=!0,r.state.packaging.size=e,t.info("got this size, ",r.pricing.packaging[e].title),r.changeTab()(1)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{state:"=",pricing:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function shippingOptions(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shippingOptions.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function shoppingProgressBar(){function e(e,t,r,o){e.$watch("vm.activeTab",function(t,r){e.vm.changeTabClass(t,r)})}function t(e,t,r){var o=this;o.tabs=r.defaultState("shoppingProgressBar"),o.changeTabClass=function(e,t){o.tabs[t].classes.spbtabSelected=!1,o.tabs[e].classes.spbtabSelected=!0},o.tabClick=function(e){o.changeTabClass(e,o.activeTab),o.changeTab()(e)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shoppingProgressBar.directive.htm",replace:!0,scope:{activeTab:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","stateFactory"],r}function toolBar(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function backendComFactory(e){function t(){return new Promise(function(e,t){e("it worked")})}var r={get:t};return r}function fillingsFactory(e){var t={packaging:void 0,flavors:{0:"Secret Recipe Pecans",1:"Drunken Pecans",2:"Cinnamon Pecans",3:"Secret Recipe Almonds",4:"Cinnamon Almonds",5:"Secret Recipe Cashews",6:"Secret Recipe Peanuts"},types:{0:"Pecans",1:"Pecans",2:"Pecans",3:"Almonds",4:"Almonds",5:"Cashews",6:"Peanuts"},recipies:{0:"Secret Recipe",1:"Drunken",2:"Cinnamon",3:"Secret Recipe",4:"Cinnamon",5:"Secret Recipe",6:"Secret Recipe"}};return t}function priceListFactory(e){function t(t,r){var o,c={},l=0;return e.info("mix",r),Object.keys(r).forEach(function(e){c[t[e]]=!0}),Object.keys(c).forEach(function(e){l++,o=e}),l>1&&(o="undefined"!=typeof r[6]&&r[6]>=.5?"Peanut Mix":"Mix"),o}function r(e,t){var r,o={},c=[];switch(Object.keys(t).forEach(function(t){o[e[t]]=!0}),Object.keys(o).forEach(function(e){c.push(e)}),c.length){case 1:r=c[0];break;case 2:r=c[0]+" & "+c[1];break;case 3:r=c[0]+", "+c[1]+" & "+c[2]}return r}function o(e,t){var r=0;if("undefined"==typeof e.mix[6])r=e.size>2?t.withoutPeanuts[e.size.toString()][0]:t.withoutPeanuts[e.size.toString()];else if(e.size>2){var o=4*e.mix[6];r=t.withPeanuts[e.size.toString()][o.toString()]}else r=e.mix[6]>=.5?t.withPeanuts[e.size.toString()]:t.withoutPeanuts[e.size.toString()];return r}function c(e,o){var c="";return c+=o.packaging[e.size.toString()].title,c+=": ",c+=t(o.types,e.mix),c+=" (",c+=r(o.recipies,e.mix),c+=")"}var l={packaging:{0:{title:"Small",volume:4,compartments:1,maxFlavors:100},1:{title:"Average",volume:8,compartments:1,maxFlavors:100},2:{title:"Impressive",volume:16,compartments:1,maxFlavors:100},3:{title:"Platter",volume:20,compartments:4,maxFlavors:4}},flavors:{0:"Secret Recipe Pecans",1:"Drunken Pecans",2:"Cinnamon Pecans",3:"Secret Recipe Almonds",4:"Cinnamon Almonds",5:"Secret Recipe Cashews",6:"Secret Recipe Peanuts"},types:{0:"Pecans",1:"Pecans",2:"Pecans",3:"Almonds",4:"Almonds",5:"Cashews",6:"Peanuts"},recipies:{0:"Secret Recipe",1:"Drunken",2:"Cinnamon",3:"Secret Recipe",4:"Cinnamon",5:"Secret Recipe",6:"Secret Recipe"},withPeanuts:{0:500,1:800,2:1100,3:{1:2e3,2:1800,3:1600,4:1400}},withoutPeanuts:{0:700,1:1300,2:1800,3:{0:2200}},_distillType:t,_distillFlavors:r,calculatePurchasePrice:o,buildDescription:c};return l}function shoppingCartsFactory(e){function t(e){return e+1}function r(e){return e>0?e-1:0}function o(t){return e.info("adding a new package now",t),t}function c(e,t){}function l(e){var t=(e.cost*e.qty/100).toFixed(2);return t}function n(e){var t=0;return e.forEach(function(e){t+=e.cost*e.qty/100}),t.toFixed(2)}var i={items:[],cost:{subtotal:3500,taxes:0,discounts:0,shipping:{}},addASize:t,removeASize:r,addFilledPackage:o,removeAPackage:c,calculateItemSubtotal:l,calculateTotalCost:n};return i}function stateFactory(e){function t(e){var t;return"shopping"==e?t={activeTab:0,allTabs:{0:"package",1:"flavor",2:"access",3:"checkout"},packaging:{selected:!1,size:void 0,flavors:0,mix:{},cost:0},buttons:{typeList:{0:{type:"Pecans",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:3,flavors:{0:{recipe:"SR",selected:!1},1:{recipe:"Drunk",selected:!1},2:{recipe:"Cinn",selected:!1}}},1:{type:"Almonds",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:2,flavors:{0:{recipe:"SR",selected:!1},1:{recipe:"Cinn",selected:!1}}},2:{type:"Cashews",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:1,flavors:{0:{recipe:"SR",selected:!1}}},3:{type:"Peanuts",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:1,flavors:{0:{recipe:"SR",selected:!1}}}},flavorList:{0:{title:"Secret Recipe Pecans",type:"Pecans",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",type:"Pecans",recipe:"Drunken",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",type:"Pecans",recipe:"Cinnamon",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",type:"Almonds",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Almonds",type:"Almonds",recipe:"Cinnamon",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",type:"Cashews",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",type:"Peanuts",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}},aquisition:{addressed:!1,pickup:{selected:!1,classes:{glyphicon:!0,"glyphicon-ok":!1}},ship:{selected:!1,classes:{glyphicon:!0,"glyphicon-ok":!1}}}}}:"shoppingProgressBar"==e&&(t={0:{classes:{spbtabSelected:!0},styles:{}},1:{classes:{spbtabSelected:!1},styles:{}},2:{classes:{spbtabSelected:!1},styles:{}},3:{classes:{spbtabSelected:!1},styles:{}}}),t}function r(){var e={0:{title:"Secret Recipe Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}};return e}var o={defaultState:t,buildButtonList:r};return o}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/shop/receipt",{templateUrl:"views/orderReceipt.htm",controller:"shoppingReceiptController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"})}config.$inject=["$routeProvider"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=[],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory","fillingsFactory","priceListFactory","stateFactory"],angular.module("ahNutsWebApp").controller("shoppingReceiptController",shoppingReceiptController),shoppingReceiptController.$inject=["$log"],angular.module("ahNutsWebApp").directive("aquisitionManager",aquisitionManager),angular.module("ahNutsWebApp").directive("cartSummary",cartSummary),angular.module("ahNutsWebApp").directive("coneFiller",coneFiller),angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("listOfFlavors",listOfFlavors),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("paymentManager",paymentManager),angular.module("ahNutsWebApp").directive("platterFiller",platterFiller),angular.module("ahNutsWebApp").directive("qtyManager",qtyManager),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("shippingOptions",shippingOptions),angular.module("ahNutsWebApp").directive("shoppingProgressBar",shoppingProgressBar),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").factory("backendComFactory",backendComFactory),backendComFactory.$inject=["$log","$http"],angular.module("ahNutsWebApp").factory("fillingsFactory",fillingsFactory),fillingsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("priceListFactory",priceListFactory),priceListFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"],angular.module("ahNutsWebApp").config(config);
//# sourceMappingURL=data:application/json;base64,
