function contactController(e,t){var o=this;o.returnHome=function(o){var r="/";e.info("redirecting to: "+r),t.path(r)}}function landingController(e,t,o){function r(){}var i=this;i.navButtonClicked=function(t){var r="/"+t;e.info("redirecting to: "+r),o.path(r)},r()}function locationsController(e,t,o,r){function i(){n.state.regionFinder.visable=!1,n.state.locationLabel.visable=!0,n.state.locationsToday.visable=!0,n.state.locationsThisWeek.visable=!1,n.state.locationsChronoView.visable=!1}function a(){n.locationsModel=c.getLocations(),n.selectedLocation={state:t.state,region:t.region},n.state={regionFinder:{visable:!0},locationLabel:{visable:!1},everyDayLocations:{visable:!1},eventsAndMarkets:{visable:!0},locationsToday:{visable:!1},locationsThisWeek:{visable:!1},locationsChronoView:{visable:!1}},e.info("params are: ",t),e.info("vm.locationsModel",n.locationsModel),"undefined"!=typeof t.state?(e.info("found a state"),i(),"undefined"!=typeof t.region?e.info("found a region"):e.info("NO region")):e.info("NO state")}var n=this,c=r;n.locationRedirect=function(t,r){var i="locations/";e.info("got this, state.id:",t),i+=t.id,o.path(i)},a()}function shoppingController(e,t,o,r,i){var a=this;a.currentlyFilling=o,a.cart=t,a.priceList=r,a.currentState=i.defaultState("shopping"),a.currentState.flavorsBtnList=i.buildButtonList(),a.updateSelectedTab=function(t){a.currentState.activeTab=t,e.info("changing to tab",a.currentState.activeTab)}}function shoppingReceiptController(e){}function aquisitionManager(){function e(e,t,o,r){}function t(e,t){var o=this;o.methodClicked=function(e){var t="";o.state.buttons.aquisition.addressed=!0,o.state.buttons.aquisition[e].selected=!0,o.state.buttons.aquisition[e].classes["glyphicon-ok"]=!0,t="pickup"==e?"ship":"pickup",o.state.buttons.aquisition[t].selected=!1,o.state.buttons.aquisition[t].classes["glyphicon-ok"]=!1}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/aquisitionManager.directive.htm",replace:!0,scope:{state:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function cartSummary(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{cart:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function coneFiller(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/coneFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function emailHelper(){function e(e,t,o,r){}function t(e,t){function o(e,t){var o=!1;return e.length>=t&&(o=!0),o}var r=this;r.answers={name:{attempted:!1,value:""},email:{attempted:!1,value:""},message:{attempted:!1,value:""}},r.form={name:{error:{display:!1,message:"This is a test"},classes:{}},email:{error:{display:!1,message:"This is a test"},classes:{}},message:{error:{display:!1,message:"This is a test"},classes:{}},btn:{classes:{"btn-primary":!1,"btn-warning":!0,"btn-success":!1}}},r.checkName=function(e){},r.nameAttempt=function(e){r.answers.name.attempted=!0,o(e,3)?t.info("good check"):t.info("too short")},r.submitMessage=function(){r.redirect("")}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{redirect:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function listOfFlavors(){function e(e,t,o,r){}function t(e,t){function o(e){i.flavors[e].classes.availProductFlavor=!1,i.flavors[e].classes.selectedProductFlavor=!0,i.flavors[e].classes.unAvailProductFlavor=!1}function r(e){i.flavors[e].classes.availProductFlavor=!0,i.flavors[e].classes.selectedProductFlavor=!1,i.flavors[e].classes.unAvailProductFlavor=!1}var i=this;i.clickANut=function(e,a){t.info("clicking",e,a),e>=10&&(e=e/10-1);var n=!1;i.flavors[e].selected=!i.flavors[e].selected,i.flavors[e].selected?(o(e),n=!0):r(e),i.pickAFlavor()(e,n)},i.test=function(){t.info("click Test")}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/listOfFlavors.directive.htm",replace:!0,scope:{flavors:"=",pickAFlavor:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsChronoView(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsMapView(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsThisWeek(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsTimeFilter(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function locationsToday(){function e(e,t,o,r){}function t(e,t){function o(e){var t=[];return Object.keys(e).forEach(function(o){var r=e[o];Object.keys(r).forEach(function(e){var o=r[e],i={start:"1:00 PM",end:"4:00 PM",name:o.name,address:"147 W. Center Street, Anaheim"};t.push(i)})}),t}function r(){i.eventsList=o(i.selectedLocation)}var i=this;t.info("vm.selectedLocation",i.selectedLocation),r()}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{selectedLocation:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function packagingFiller(){function e(e,t,o,r){}function t(e,t){function o(){n.state.packaging.selected=!1,n.state.packaging.size=void 0,n.state.packaging.flavors=0,n.state.packaging.mix={},Object.keys(n.state.buttons.flavorList).forEach(function(e){n.state.buttons.flavorList[e].selected=!1,n.state.buttons.flavorList[e].classes.availProductFlavor=!0,n.state.buttons.flavorList[e].classes.unAvailProductFlavor=!1,n.state.buttons.flavorList[e].classes.selectedProductFlavor=!1})}function r(e){return 1/e}function i(e){e?n.state.packaging.flavors++:n.state.packaging.flavors--}function a(e,t){var o=e.toString();t?(Object.keys(n.state.packaging.mix).forEach(function(e){n.state.packaging.mix[e]=r(n.state.packaging.flavors)}),n.state.packaging.mix[o]=r(n.state.packaging.flavors)):(Object.keys(n.state.packaging.mix).forEach(function(e){n.state.packaging.mix[e]=r(n.state.packaging.flavors)}),delete n.state.packaging.mix[o])}var n=this;n.qty=1,n.pickAFlavor=function(e,t){i(t),a(e,t)},n.addToCart=function(e){var t=n.state.packaging.size,r=n.state.packaging.mix,i=n.qty,a=n.pricing.calculatePurchasePrice(n.state.packaging,n.pricing),c=n.pricing.buildDescription(n.state.packaging,n.pricing),l={description:c,packaging:t,flavors:r,qty:i,cost:a};n.cart.items.push(n.addFilledPackage()(l)),o(),e?n.changeTab()(2):n.changeTab()(0)},n.discardButtonClicked=function(){o(),n.changeTab()(0)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{cart:"=",pricing:"=",changeTab:"&",state:"=",addFilledPackage:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function paymentManager(){function e(e,t,o,r){}function t(e,t,o){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/paymentManager.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],o}function platterFiller(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/platterFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function qtyManager(){function e(e,t,o,r){}function t(e,t){var o=this;o.subtract=function(){o.qty>1&&o.qty--},o.add=function(){o.qty++}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/qtyManager.directive.htm",replace:!0,scope:{qty:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function regionFinder(){function e(e,t,o,r){}function t(e,t){var o=this;o.states=[{name:"California",id:"CA"},{name:"Oregon",id:"OR"},{name:"Utah",id:"UT"}],o.selectState=function(e){t.info("got this",o.states[e]),o.locationRedirect()(o.states[e])}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/regionFinder.directive.htm",replace:!0,scope:{locationRedirect:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeEmpties(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function seeFulls(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectFlavors(){function e(e,t,o,r){}function t(e,t){var o=this;o.fillAPackage=function(e){o.currentlyFilling.packaging=e},o.sizeBtnClicked=function(e){t.info("clikced",e,o.packagingSelected[e]),o.packagingSelected[e]=o.removeASize()(o.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function selectPackaging(){function e(e,t,o,r){}function t(e,t){var o=this;o.sizeBtnClicked=function(e){o.state.packaging.selected=!0,o.state.packaging.size=e,t.info("got this size, ",o.pricing.packaging[e].title),o.changeTab()(1)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{state:"=",pricing:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function shippingOptions(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/shippingOptions.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function shoppingProgressBar(){function e(e,t,o,r){e.$watch("vm.activeTab",function(t,o){e.vm.changeTabClass(t,o)})}function t(e,t,o){var r=this;r.tabs=o.defaultState("shoppingProgressBar"),r.changeTabClass=function(e,t){r.tabs[t].classes.spbtabSelected=!1,r.tabs[e].classes.spbtabSelected=!0},r.tabClick=function(e){r.changeTabClass(e,r.activeTab),r.changeTab()(e)}}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/shoppingProgressBar.directive.htm",replace:!0,scope:{activeTab:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","stateFactory"],o}function toolBar(){function e(e,t,o,r){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var o={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],o}function backendComFactory(e){function t(){return new Promise(function(e,t){e("it worked")})}function o(){var e={CA:{name:"California",distributors:{},events:{daily:{},weekly:{0:{name:"Bixby Park Farmers Market",location:{},schedule:[{startDate:"",finishDate:"",startTime:"",finsihTime:""}]},1:{name:"USC Farmers Market",location:{},schedule:[{startDate:"",finishDate:"",startTime:"",finsihTime:""}]},2:{name:"Downtown Anaheim Farmers Market",location:{},schedule:[{startDate:"",finishDate:"",startTime:"",finsihTime:""}]},3:{name:"Huntington Beach Pier Farmers Market",location:{},schedule:[{startDate:"",finishDate:"",startTime:"",finsihTime:""}]},4:{name:"Redondo Beach Farmers Market",location:{},schedule:[{startDate:"",finishDate:"",startTime:"",finsihTime:""}]}},quarterly:{},yearly:{},oneOff:{}}},OR:{name:"Oregon",distributors:{},events:{daily:{},weekly:{0:{name:"Beaverton Farmers Market",location:{},schedule:[{startDate:"",finishDate:"",startTime:"",finsihTime:""}]}},quarterly:{},yearly:{}}},UT:{name:"Utah"}};return e}var r={get:t,getLocations:o};return r}function fillingsFactory(e){var t={packaging:void 0,flavors:{0:"Secret Recipe Pecans",1:"Drunken Pecans",2:"Cinnamon Pecans",3:"Secret Recipe Almonds",4:"Cinnamon Almonds",5:"Secret Recipe Cashews",6:"Secret Recipe Peanuts"},types:{0:"Pecans",1:"Pecans",2:"Pecans",3:"Almonds",4:"Almonds",5:"Cashews",6:"Peanuts"},recipies:{0:"Secret Recipe",1:"Drunken",2:"Cinnamon",3:"Secret Recipe",4:"Cinnamon",5:"Secret Recipe",6:"Secret Recipe"}};return t}function priceListFactory(e){function t(t,o){var r,i={},a=0;return e.info("mix",o),Object.keys(o).forEach(function(e){i[t[e]]=!0}),Object.keys(i).forEach(function(e){a++,r=e}),a>1&&(r="undefined"!=typeof o[6]&&o[6]>=.5?"Peanut Mix":"Mix"),r}function o(e,t){var o,r={},i=[];switch(Object.keys(t).forEach(function(t){r[e[t]]=!0}),Object.keys(r).forEach(function(e){i.push(e)}),i.length){case 1:o=i[0];break;case 2:o=i[0]+" & "+i[1];break;case 3:o=i[0]+", "+i[1]+" & "+i[2]}return o}function r(e,t){var o=0;if("undefined"==typeof e.mix[6])o=e.size>2?t.withoutPeanuts[e.size.toString()][0]:t.withoutPeanuts[e.size.toString()];else if(e.size>2){var r=4*e.mix[6];o=t.withPeanuts[e.size.toString()][r.toString()]}else o=e.mix[6]>=.5?t.withPeanuts[e.size.toString()]:t.withoutPeanuts[e.size.toString()];return o}function i(e,r){var i="";return i+=r.packaging[e.size.toString()].title,i+=": ",i+=t(r.types,e.mix),i+=" (",i+=o(r.recipies,e.mix),i+=")"}var a={packaging:{0:{title:"Small",volume:4,compartments:1,maxFlavors:100},1:{title:"Average",volume:8,compartments:1,maxFlavors:100},2:{title:"Impressive",volume:16,compartments:1,maxFlavors:100},3:{title:"Platter",volume:20,compartments:4,maxFlavors:4}},flavors:{0:"Secret Recipe Pecans",1:"Drunken Pecans",2:"Cinnamon Pecans",3:"Secret Recipe Almonds",4:"Cinnamon Almonds",5:"Secret Recipe Cashews",6:"Secret Recipe Peanuts"},types:{0:"Pecans",1:"Pecans",2:"Pecans",3:"Almonds",4:"Almonds",5:"Cashews",6:"Peanuts"},recipies:{0:"Secret Recipe",1:"Drunken",2:"Cinnamon",3:"Secret Recipe",4:"Cinnamon",5:"Secret Recipe",6:"Secret Recipe"},withPeanuts:{0:500,1:800,2:1100,3:{1:2e3,2:1800,3:1600,4:1400}},withoutPeanuts:{0:700,1:1300,2:1800,3:{0:2200}},_distillType:t,_distillFlavors:o,calculatePurchasePrice:r,buildDescription:i};return a}function shoppingCartsFactory(e){function t(e){return e+1}function o(e){return e>0?e-1:0}function r(t){return e.info("adding a new package now",t),t}function i(e,t){}function a(e){var t=(e.cost*e.qty/100).toFixed(2);return t}function n(e){var t=0;return e.forEach(function(e){t+=e.cost*e.qty/100}),t.toFixed(2)}var c={items:[],cost:{subtotal:3500,taxes:0,discounts:0,shipping:{}},addASize:t,removeASize:o,addFilledPackage:r,removeAPackage:i,calculateItemSubtotal:a,calculateTotalCost:n};return c}function stateFactory(e){function t(e){var t;return"shopping"==e?t={activeTab:0,allTabs:{0:"package",1:"flavor",2:"access",3:"checkout"},packaging:{selected:!1,size:void 0,flavors:0,mix:{},cost:0},buttons:{typeList:{0:{type:"Pecans",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:3,flavors:{0:{recipe:"SR",selected:!1},1:{recipe:"Drunk",selected:!1},2:{recipe:"Cinn",selected:!1}}},1:{type:"Almonds",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:2,flavors:{0:{recipe:"SR",selected:!1},1:{recipe:"Cinn",selected:!1}}},2:{type:"Cashews",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:1,flavors:{0:{recipe:"SR",selected:!1}}},3:{type:"Peanuts",selected:!1,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1},recipies:1,flavors:{0:{recipe:"SR",selected:!1}}}},flavorList:{0:{title:"Secret Recipe Pecans",type:"Pecans",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",type:"Pecans",recipe:"Drunken",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",type:"Pecans",recipe:"Cinnamon",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",type:"Almonds",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Almonds",type:"Almonds",recipe:"Cinnamon",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",type:"Cashews",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",type:"Peanuts",recipe:"Secret Recipe",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}},aquisition:{addressed:!1,pickup:{selected:!1,classes:{glyphicon:!0,"glyphicon-ok":!1}},ship:{selected:!1,classes:{glyphicon:!0,"glyphicon-ok":!1}}}}}:"shoppingProgressBar"==e&&(t={0:{classes:{spbtabSelected:!0},styles:{}},1:{classes:{spbtabSelected:!1},styles:{}},2:{classes:{spbtabSelected:!1},styles:{}},3:{classes:{spbtabSelected:!1},styles:{}}}),t}function o(){var e={0:{title:"Secret Recipe Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},1:{title:"Drunken Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},2:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},3:{title:"Secret Recipe Almonds",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},4:{title:"Cinnamon Pecans",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},5:{title:"Secret Recipe Cashews",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}},6:{title:"Secret Recipe Peanuts",selected:!1,proportion:0,classes:{availProductFlavor:!0,unAvailProductFlavor:!1,selectedProductFlavor:!1}}};return e}var r={defaultState:t,buildButtonList:o};return r}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/shop/receipt",{templateUrl:"views/orderReceipt.htm",controller:"shoppingReceiptController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"})}config.$inject=["$routeProvider"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=["$log","$location"],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams","$location","backendComFactory"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory","fillingsFactory","priceListFactory","stateFactory"],angular.module("ahNutsWebApp").controller("shoppingReceiptController",shoppingReceiptController),shoppingReceiptController.$inject=["$log"],angular.module("ahNutsWebApp").directive("aquisitionManager",aquisitionManager),angular.module("ahNutsWebApp").directive("cartSummary",cartSummary),angular.module("ahNutsWebApp").directive("coneFiller",coneFiller),angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("listOfFlavors",listOfFlavors),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("paymentManager",paymentManager),angular.module("ahNutsWebApp").directive("platterFiller",platterFiller),angular.module("ahNutsWebApp").directive("qtyManager",qtyManager),angular.module("ahNutsWebApp").directive("regionFinder",regionFinder),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("shippingOptions",shippingOptions),angular.module("ahNutsWebApp").directive("shoppingProgressBar",shoppingProgressBar),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").factory("backendComFactory",backendComFactory),backendComFactory.$inject=["$log","$http"],angular.module("ahNutsWebApp").factory("fillingsFactory",fillingsFactory),fillingsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("priceListFactory",priceListFactory),priceListFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"],angular.module("ahNutsWebApp").config(config);
//# sourceMappingURL=data:application/json;base64,
