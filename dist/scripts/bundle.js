function contactController(){}function landingController(e,t,r){function o(){}var l=this;l.navButtonClicked=function(t){var o="/"+t;e.info("redirecting to: "+o),r.path(o)},o()}function locationsController(e,t){e.info("params are: ",t)}function shoppingController(e,t,r,o,l){var n=this;n.currentlyFilling=r,n.cart=t,n.priceList=o,n.currentState=l.defaultState("shopping"),n.updateSelectedTab=function(t){n.currentState.activeTab=t,e.info("changing to tab",n.currentState.activeTab)}}function aquisitionManager(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/aquisitionManager.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function cartSummary(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/cartSummary.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function coneFiller(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/coneFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function emailHelper(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/emailHelper.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function listOfFlavors(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/listOfFlavors.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsChronoView(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsChronoView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsMapView(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsMapView.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsThisWeek(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsThisWeek.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsTimeFilter(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsTimeFilter.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function locationsToday(){function e(e,t,r,o){}function t(e,t,r){var o=this,l=r;o.todaysMarkets=l.get(),console.log(o.todaysMarkets)}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/locationsToday.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],r}function packagingFiller(){function e(e,t,r,o){}function t(e,t){function r(e){return 1/e}function o(e){Object.keys(a.currentlyFilling.flavors.selected).forEach(function(t){a.currentlyFilling.flavors.selected[t]?a.currentlyFilling.flavors.proportions[t]=e:a.currentlyFilling.flavors.proportions[t]=0})}function l(e){var t={};return Object.keys(e).forEach(function(r){e[r]>0&&(t[r]=e[r])}),t}function n(e,t){var r=void 0;return r="platter"==e?t.SRPeanut>0:t.SRPeanut>=.5}function i(e,t){var r=0,o="withoutPeanuts",l=0,i=n(e,t);return i&&(o="withPeanuts",l=4*t.SRPeanut),r="platter"==e?a.pricing[o][e][l]:a.pricing[o][e]}function c(e,t,r){var o=i(e,t);return o*r}var a=this;a.qty=1,a.pickAFlavor=function(e){a.currentlyFilling.flavors.selected[e]=!a.currentlyFilling.flavors.selected[e],a.currentlyFilling.flavors.selected[e]?a.currentlyFilling.flavors.noOfFlavors++:a.currentlyFilling.flavors.noOfFlavors--;var l=r(a.currentlyFilling.flavors.noOfFlavors);o(l),t.info("# of Flavors",a.currentlyFilling.flavors.noOfFlavors,"split",l,"propritions",a.currentlyFilling.flavors.proportions)},a.addToCart=function(){var e=a.currentlyFilling.packaging,t=l(a.currentlyFilling.flavors.proportions),r=a.qty,o={selectedPackaging:e,mixture:t,qty:r,subtotatl:c(e,t,r)};a.addFilledPackage()(o),a.changeTab()(2)},a.discardButtonClicked=function(){a.currentlyFilling.packaging=void 0,a.changeTab()(0)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/packagingFiller.directive.htm",replace:!0,scope:{pricing:"=",changeTab:"&",currentlyFilling:"=",addFilledPackage:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function paymentManager(){function e(e,t,r,o){}function t(e,t,r){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/paymentManager.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","backendComFactory"],r}function platterFiller(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/platterFiller.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function qtyManager(){function e(e,t,r,o){}function t(e,t){var r=this;r.subtract=function(){r.qty>1&&r.qty--},r.add=function(){r.qty++}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/qtyManager.directive.htm",replace:!0,scope:{qty:"="},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeEmpties(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeEmpties.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function seeFulls(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/seeFulls.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectFlavors(){function e(e,t,r,o){}function t(e,t){var r=this;r.fillAPackage=function(e){r.currentlyFilling.packaging=e},r.sizeBtnClicked=function(e){t.info("clikced",e,r.packagingSelected[e]),r.packagingSelected[e]=r.removeASize()(r.packagingSelected[e])}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectFlavors.directive.htm",replace:!0,scope:{packagingSelected:"=",removeASize:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function selectPackaging(){function e(e,t,r,o){}function t(e,t){var r=this;r.sizeBtnClicked=function(e){r.currentlyFilling.packaging=e,t.info("got this size, ",e),r.changeTab()(1)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/selectPackaging.directive.htm",replace:!0,scope:{currentlyFilling:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function shoppingProgressBar(){function e(e,t,r,o){e.$watch("vm.activeTab",function(t,r){console.log("the tab changed",r,t),e.vm.changeTabClass(t,r)})}function t(e,t,r){var o=this;o.tabs=r.defaultState("shoppingProgressBar"),o.changeTabClass=function(e,t){o.tabs[t].classes.spbtabSelected=!1,o.tabs[e].classes.spbtabSelected=!0},o.tabClick=function(e){o.changeTabClass(e,o.activeTab),o.changeTab()(e)}}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/shoppingProgressBar.directive.htm",replace:!0,scope:{activeTab:"=",changeTab:"&"},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log","stateFactory"],r}function toolBar(){function e(e,t,r,o){}function t(e,t){}e.$inject=["scope","el","attr","ctrl"];var r={restrict:"AECM",templateUrl:"views/directives/toolBar.directive.htm",replace:!0,scope:{},link:e,controller:t,controllerAs:"vm",bindToController:!0};return t.$inject=["$scope","$log"],r}function backendComFactory(e){function t(){return new Promise(function(e,t){e("it worked")})}var r={get:t};return r}function fillingsFactory(e){var t={packaging:void 0,flavors:{noOfFlavors:0,selected:{SRPecans:!1,DRPecans:!1,CNPecans:!1,SRAlmond:!1,CNAlmond:!1,SRCashew:!1,SRPeanut:!1},proportions:{SRPecans:0,DRPecans:0,CNPecans:0,SRAlmond:0,CNAlmond:0,SRCashew:0,SRPeanut:0}}};return t}function priceListFactory(e){var t={withPeanuts:{small:500,medium:800,large:1100,platter:{1:2e3,2:1800,3:1600,4:1400}},withoutPeanuts:{small:700,medium:1300,large:1800,platter:{0:2200}}};return t}function shoppingCartsFactory(e){function t(t){return e.info("got this",t," returning this ",t+1),t+1}function r(t){return t>0?(e.info("got this",t," returning this ",t-1),t-1):0}function o(t){e.info("adding a new package now",t)}function l(e,t){}var n={selectedPackaging:{smalls:0,mediums:0,larges:0,platters:0},filledPackaging:{smalls:{qty:0,mixes:[],subtotal:0},mediums:{qty:0,mixes:[],subtotal:0},larges:{qty:0,mixes:[],subtotal:0},platters:{qty:0,mixes:[],subtotal:0}},cost:{subtotal:0,taxes:0,discounts:0},addASize:t,removeASize:r,addFilledPackage:o,removeAPackage:l};return n}function stateFactory(e){function t(e){var t;return"shopping"==e?t={activeTab:0,allTabs:{0:"package",1:"flavor",2:"access",3:"checkout"},sizeSelected:!1}:"shoppingProgressBar"==e&&(t={0:{classes:{spbtabSelected:!0},styles:{}},1:{classes:{spbtabSelected:!1},styles:{}},2:{classes:{spbtabSelected:!1},styles:{}},3:{classes:{spbtabSelected:!1},styles:{}}}),t}var r={defaultState:t};return r}function config(e){e.when("/",{templateUrl:"views/landingPage.htm",controller:"landingController",controllerAs:"vm"}).when("/shop",{templateUrl:"views/shopping.htm",controller:"shoppingController",controllerAs:"vm"}).when("/locations",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/locations/:state/:region",{templateUrl:"views/locations.htm",controller:"locationsController",controllerAs:"vm"}).when("/contact",{templateUrl:"views/contact.htm",controller:"contactController",controllerAs:"vm"})}config.$inject=["$routeProvider"];var ahNutsWebApp=angular.module("ahNutsWebApp",["ngRoute"]);angular.module("ahNutsWebApp").controller("contactController",contactController),contactController.$inject=[],angular.module("ahNutsWebApp").controller("landingController",landingController),landingController.$inject=["$log","$routeParams","$location"],angular.module("ahNutsWebApp").controller("locationsController",locationsController),locationsController.$inject=["$log","$routeParams"],angular.module("ahNutsWebApp").controller("shoppingController",shoppingController),shoppingController.$inject=["$log","shoppingCartsFactory","fillingsFactory","priceListFactory","stateFactory"],angular.module("ahNutsWebApp").directive("aquisitionManager",aquisitionManager),angular.module("ahNutsWebApp").directive("cartSummary",cartSummary),angular.module("ahNutsWebApp").directive("coneFiller",coneFiller),angular.module("ahNutsWebApp").directive("emailHelper",emailHelper),angular.module("ahNutsWebApp").directive("listOfFlavors",listOfFlavors),angular.module("ahNutsWebApp").directive("locationsChronoView",locationsChronoView),angular.module("ahNutsWebApp").directive("locationsMapView",locationsMapView),angular.module("ahNutsWebApp").directive("locationsThisWeek",locationsThisWeek),angular.module("ahNutsWebApp").directive("locationsTimeFilter",locationsTimeFilter),angular.module("ahNutsWebApp").directive("locationsToday",locationsToday),angular.module("ahNutsWebApp").directive("packagingFiller",packagingFiller),angular.module("ahNutsWebApp").directive("paymentManager",paymentManager),angular.module("ahNutsWebApp").directive("platterFiller",platterFiller),angular.module("ahNutsWebApp").directive("qtyManager",qtyManager),angular.module("ahNutsWebApp").directive("seeEmpties",seeEmpties),angular.module("ahNutsWebApp").directive("seeFulls",seeFulls),angular.module("ahNutsWebApp").directive("selectFlavors",selectFlavors),angular.module("ahNutsWebApp").directive("selectPackaging",selectPackaging),angular.module("ahNutsWebApp").directive("shoppingProgressBar",shoppingProgressBar),angular.module("ahNutsWebApp").directive("toolBar",toolBar),angular.module("ahNutsWebApp").factory("backendComFactory",backendComFactory),backendComFactory.$inject=["$log","$http"],angular.module("ahNutsWebApp").factory("fillingsFactory",fillingsFactory),fillingsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("priceListFactory",priceListFactory),priceListFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("shoppingCartsFactory",shoppingCartsFactory),shoppingCartsFactory.$inject=["$log"],angular.module("ahNutsWebApp").factory("stateFactory",stateFactory),stateFactory.$inject=["$log"],angular.module("ahNutsWebApp").config(config);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMvY29udHJvbGxlcnMvY29udGFjdC5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9sYW5kaW5nLmNvbnRyb2xsZXIuanMiLCJzY3JpcHRzL2NvbnRyb2xsZXJzL2xvY2F0aW9ucy5jb250cm9sbGVyLmpzIiwic2NyaXB0cy9jb250cm9sbGVycy9zaG9wcGluZy5jb250cm9sbGVyLmpzIiwiYnVuZGxlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2FxdWlzaXRpb25NYW5hZ2VyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9jYXJ0U3VtbWFyeS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvY29uZUZpbGxlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvZW1haWxIZWxwZXIuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2xpc3RPZkZsYXZvcnMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2xvY2F0aW9uc0Nocm9ub1ZpZXcuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2xvY2F0aW9uc01hcFZpZXcuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL2xvY2F0aW9uc1RoaXNXZWVrLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9sb2NhdGlvbnNUaW1lRmlsdGVyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9sb2NhdGlvbnNUb2RheS5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcGFja2FnaW5nRmlsbGVyLmRpcmVjdGl2ZS5qcyIsInNjcmlwdHMvZGlyZWN0aXZlcy9wYXltZW50TWFuYWdlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcGxhdHRlckZpbGxlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvcXR5TWFuYWdlci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2VlRW1wdGllcy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2VlRnVsbHMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NlbGVjdEZsYXZvcnMuZGlyZWN0aXZlLmpzIiwic2NyaXB0cy9kaXJlY3RpdmVzL3NlbGVjdFBhY2thZ2luZy5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvc2hvcHBpbmdQcm9ncmVzc0Jhci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2RpcmVjdGl2ZXMvdG9vbGJhci5kaXJlY3RpdmUuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9iYWNrZW5kQ29tLmZhY3RvcnkuanMiLCJzY3JpcHRzL2ZhY3Rvcmllcy9maWxsaW5ncy5mYWN0b3J5LmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvcHJpY2VMaXN0cy5mYWN0b3J5LmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvc2hvcHBpbmdDYXJ0cy5mYWN0b3J5LmpzIiwic2NyaXB0cy9mYWN0b3JpZXMvc3RhdGUuZmFjdG9yeS5qcyIsInNjcmlwdHMvcm91dGVzL3JvdXRlLWNvbmZpZy5qcyIsInNjcmlwdHMvYXBwLmpzIl0sIm5hbWVzIjpbImNvbnRhY3RDb250cm9sbGVyIiwibGFuZGluZ0NvbnRyb2xsZXIiLCIkbG9nIiwiJHJvdXRlUGFyYW1zIiwiJGxvY2F0aW9uIiwiaW5pdCIsInZtIiwidGhpcyIsIm5hdkJ1dHRvbkNsaWNrZWQiLCJwYXJhbSIsImZ1bGxQYXRoIiwiaW5mbyIsInBhdGgiLCJsb2NhdGlvbnNDb250cm9sbGVyIiwic2hvcHBpbmdDb250cm9sbGVyIiwic2hvcHBpbmdDYXJ0c0ZhY3RvcnkiLCJmaWxsaW5nc0ZhY3RvcnkiLCJwcmljZUxpc3RGYWN0b3J5Iiwic3RhdGVGYWN0b3J5IiwiY3VycmVudGx5RmlsbGluZyIsImNhcnQiLCJwcmljZUxpc3QiLCJjdXJyZW50U3RhdGUiLCJkZWZhdWx0U3RhdGUiLCJ1cGRhdGVTZWxlY3RlZFRhYiIsInRhYiIsImFjdGl2ZVRhYiIsImFxdWlzaXRpb25NYW5hZ2VyIiwibGlua0Z1bmMiLCJzY29wZSIsImVsIiwiYXR0ciIsImN0cmwiLCJhcXVpc2l0aW9uTWFuYWdlckNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkaW5qZWN0IiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJ0ZW1wbGF0ZVVybCIsInJlcGxhY2UiLCJsaW5rIiwiY29udHJvbGxlciIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCJjYXJ0U3VtbWFyeSIsImNhcnRTdW1tYXJ5Q29udHJvbGxlciIsImNvbmVGaWxsZXIiLCJjb25lRmlsbGVyQ29udHJvbGxlciIsImVtYWlsSGVscGVyIiwiZW1haWxIZWxwZXJDb250cm9sbGVyIiwibGlzdE9mRmxhdm9ycyIsImxpc3RPZkZsYXZvcnNDb250cm9sbGVyIiwibG9jYXRpb25zQ2hyb25vVmlldyIsImxvY2F0aW9uc0Nocm9ub1ZpZXdDb250cm9sbGVyIiwibG9jYXRpb25zTWFwVmlldyIsImxvY2F0aW9uc01hcFZpZXdDb250cm9sbGVyIiwibG9jYXRpb25zVGhpc1dlZWsiLCJsb2NhdGlvbnNUaGlzV2Vla0NvbnRyb2xsZXIiLCJsb2NhdGlvbnNUaW1lRmlsdGVyIiwibG9jYXRpb25zVGltZUZpbHRlckNvbnRyb2xsZXIiLCJsb2NhdGlvbnNUb2RheSIsImxvY2F0aW9uc1RvZGF5Q29udHJvbGxlciIsImJhY2tlbmRDb21GYWN0b3J5IiwiYmFja2VuZCIsInRvZGF5c01hcmtldHMiLCJnZXQiLCJjb25zb2xlIiwibG9nIiwicGFja2FnaW5nRmlsbGVyIiwicGFja2FnaW5nRmlsbGVyQ29udHJvbGxlciIsImVxdWFsU3BsaXQiLCJkaXZpc2lvbnMiLCJhc3NpZ25FcXVhbFNwbGl0IiwiZXF1YWxQb3J0aW9uIiwiT2JqZWN0Iiwia2V5cyIsImZsYXZvcnMiLCJzZWxlY3RlZCIsImZvckVhY2giLCJmbGF2b3IiLCJwcm9wb3J0aW9ucyIsInN1cHBseU1peHR1cmVPYmplY3QiLCJmbGF2b3JQcm9wb3J0aW9ucyIsInJldHVybk9iamVjdCIsImNoZWNrRm9yUGVhbnV0cyIsInBhY2thZ2luZyIsIm1peHR1cmUiLCJoYXNQZWFudXRzIiwidW5kZWZpbmVkIiwiU1JQZWFudXQiLCJjYWxjdWxhdGVQdXJjaGFzZVByaWNlIiwic2FsZVByaWNlIiwicGVhbnV0U3RhdHVzIiwicGVhbnV0U2VjdGlvbnMiLCJwZWFudXRzQXJlUHJlc2VudCIsInByaWNpbmciLCJjYWxjdWxhdGVJdGVtU3VidG90YWwiLCJxdHkiLCJwdXJjaGFzZVByaWNlIiwicGlja0FGbGF2b3IiLCJub09mRmxhdm9ycyIsImVxdWFsUG9ydGlvbnMiLCJhZGRUb0NhcnQiLCJ0aGlzUGFja2FnaW5nIiwidGhpc01peHR1cmUiLCJ0aGlzUXVhbnRpdHkiLCJuZXdQYWNrYWdlIiwic2VsZWN0ZWRQYWNrYWdpbmciLCJzdWJ0b3RhdGwiLCJhZGRGaWxsZWRQYWNrYWdlIiwiY2hhbmdlVGFiIiwiZGlzY2FyZEJ1dHRvbkNsaWNrZWQiLCJwYXltZW50TWFuYWdlciIsInBheW1lbnRNYW5hZ2VyQ29udHJvbGxlciIsInBsYXR0ZXJGaWxsZXIiLCJwbGF0dGVyRmlsbGVyQ29udHJvbGxlciIsInF0eU1hbmFnZXIiLCJxdHlNYW5hZ2VyQ29udHJvbGxlciIsInN1YnRyYWN0IiwiYWRkIiwic2VlRW1wdGllcyIsInNlZUVtcHRpZXNDb250cm9sbGVyIiwic2VlRnVsbHMiLCJzZWVGdWxsc0NvbnRyb2xsZXIiLCJzZWxlY3RGbGF2b3JzIiwic2VsZWN0Rmxhdm9yc0NvbnRyb2xsZXIiLCJmaWxsQVBhY2thZ2UiLCJzaXplQnRuQ2xpY2tlZCIsInBhY2thZ2luZ1NlbGVjdGVkIiwicmVtb3ZlQVNpemUiLCJzZWxlY3RQYWNrYWdpbmciLCJzZWxlY3RQYWNrYWdpbmdDb250cm9sbGVyIiwic2l6ZSIsInNob3BwaW5nUHJvZ3Jlc3NCYXIiLCIkd2F0Y2giLCJuZXh0IiwiY3VycmVudCIsImNoYW5nZVRhYkNsYXNzIiwic2hvcHBpbmdQcm9ncmVzc0JhckNvbnRyb2xsZXIiLCJ0YWJzIiwiY2xhc3NlcyIsInNwYnRhYlNlbGVjdGVkIiwidGFiQ2xpY2siLCJ0b29sQmFyIiwiVG9vbEJhckNvbnRyb2xsZXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImJhY2tlbmRDb21FbGVtZW50cyIsImFsbEZpbGxpbmdzIiwiU1JQZWNhbnMiLCJEUlBlY2FucyIsIkNOUGVjYW5zIiwiU1JBbG1vbmQiLCJDTkFsbW9uZCIsIlNSQ2FzaGV3IiwiYWxsUHJpY2VzIiwid2l0aFBlYW51dHMiLCJzbWFsbCIsIm1lZGl1bSIsImxhcmdlIiwicGxhdHRlciIsIjEiLCIyIiwiMyIsIjQiLCJ3aXRob3V0UGVhbnV0cyIsIjAiLCJhZGRBU2l6ZSIsInN0YXJ0aW5nVmFsdWUiLCJyZW1vdmVBUGFja2FnZSIsImlkIiwiYWxsQ2FydEVsZW1lbnRzIiwic21hbGxzIiwibWVkaXVtcyIsImxhcmdlcyIsInBsYXR0ZXJzIiwiZmlsbGVkUGFja2FnaW5nIiwibWl4ZXMiLCJzdWJ0b3RhbCIsImNvc3QiLCJ0YXhlcyIsImRpc2NvdW50cyIsInNlY3Rpb24iLCJhbGxUYWJzIiwic2l6ZVNlbGVjdGVkIiwic3R5bGVzIiwic3RhdGVzRmFjdG9yeSIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwid2hlbiIsImFoTnV0c1dlYkFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJmYWN0b3J5Il0sIm1hcHBpbmdzIjoiQUFPQSxRQUFBQSxzQkNBQSxRQUFBQyxtQkFBQUMsRUFBQUMsRUFBQUMsR0FNQSxRQUFBQyxNQUhBLEdBQUFDLEdBQUFDLElBV0FELEdBQUFFLGlCQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQSxJQUFBRCxDQUVBUCxHQUFBUyxLQUFBLG1CQUFBRCxHQUNBTixFQUFBUSxLQUFBRixJQUlBTCxJQ3RCQSxRQUFBUSxxQkFBQVgsRUFBQUMsR0FNQUQsRUFBQVMsS0FBQSxlQUFBUixHQ05BLFFBQUFXLG9CQUFBWixFQUFBYSxFQUFBQyxFQUFBQyxFQUFBQyxHQUdB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Y2VzQ29udGVudCI6WyJhbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuY29udHJvbGxlcignY29udGFjdENvbnRyb2xsZXInLCBjb250YWN0Q29udHJvbGxlcik7XG5cbmNvbnRhY3RDb250cm9sbGVyLiRpbmplY3QgPSBbXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb250YWN0Q29udHJvbGxlcigpIHtcblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5jb250cm9sbGVyKCdsYW5kaW5nQ29udHJvbGxlcicsIGxhbmRpbmdDb250cm9sbGVyKTtcblxubGFuZGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICckcm91dGVQYXJhbXMnLCAnJGxvY2F0aW9uJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbGFuZGluZ0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24pIHtcblxuXHQvL2RlZmluZSB2aWV3IG1vZGVsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9sb2NhbCBtZXRob2RzXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cdFx0Ly9kZWZpbmUgdGhlIHN0YXRlIG9mIHRoaXMgcGFnZVxuXHRcdFxuXHRcdFxuXG5cdH07XG5cblx0Ly92aWV3IG1ldGhvZHNcblx0dm0ubmF2QnV0dG9uQ2xpY2tlZCA9IGZ1bmN0aW9uKHBhcmFtKSB7XG5cdFx0dmFyIGZ1bGxQYXRoID0gJy8nICsgcGFyYW07XG5cdFx0Ly9yZWRpcmVjdFxuXHRcdCRsb2cuaW5mbygncmVkaXJlY3RpbmcgdG86ICcgKyBmdWxsUGF0aCk7XG5cdFx0JGxvY2F0aW9uLnBhdGgoZnVsbFBhdGgpO1xuXHR9XG5cblx0Ly9ydW4gaW5pdCBmdW5jdGlvblxuXHRpbml0KCk7XG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ2xvY2F0aW9uc0NvbnRyb2xsZXInLCBsb2NhdGlvbnNDb250cm9sbGVyKTtcblxubG9jYXRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxvY2F0aW9uc0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vbm90aWZ5IHRoZSBwYXJhbXMgZm9yIHRoZSB0aW1lIGJlaW5nXHRUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cdCRsb2cuaW5mbygncGFyYW1zIGFyZTogJywgJHJvdXRlUGFyYW1zKTtcblxuXHQvL2xvY2FsIG1ldGhvZHNcblxuXHQvL3ZpZXcgbWV0aG9kc1xufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5jb250cm9sbGVyKCdzaG9wcGluZ0NvbnRyb2xsZXInLCBzaG9wcGluZ0NvbnRyb2xsZXIpO1xuXG5zaG9wcGluZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJGxvZycsICdzaG9wcGluZ0NhcnRzRmFjdG9yeScsICdmaWxsaW5nc0ZhY3RvcnknLCAncHJpY2VMaXN0RmFjdG9yeScsICdzdGF0ZUZhY3RvcnknXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzaG9wcGluZ0NvbnRyb2xsZXIoJGxvZywgc2hvcHBpbmdDYXJ0c0ZhY3RvcnksIGZpbGxpbmdzRmFjdG9yeSwgcHJpY2VMaXN0RmFjdG9yeSwgc3RhdGVGYWN0b3J5KSB7XG5cblx0Ly9kZWZpbmUgdGhlIGxvY2FsIHZhcmlhYmxlXG5cdHZhciB2bSA9IHRoaXM7XG5cblx0Ly9pbXBvcnQgcmVxdWlyZWQgb2JqZWN0c1xuICAgIHZtLmN1cnJlbnRseUZpbGxpbmcgPSBmaWxsaW5nc0ZhY3Rvcnk7XG5cdHZtLmNhcnQgPSBzaG9wcGluZ0NhcnRzRmFjdG9yeTtcblx0dm0ucHJpY2VMaXN0ID0gcHJpY2VMaXN0RmFjdG9yeTtcblxuXHQvL3N0YXRlIHRyYWNraW5nXG5cdHZtLmN1cnJlbnRTdGF0ZSA9IHN0YXRlRmFjdG9yeS5kZWZhdWx0U3RhdGUoJ3Nob3BwaW5nJyk7XG5cblx0Ly92aWV3IG1vZGVsIGZ1bmN0aW9uc1xuXG5cdC8vd2hlbiBhIHRhYiBpcyBzZWxlY3RlZCBjaGFuZ2UgdGhlIHRhYlxuXHR2bS51cGRhdGVTZWxlY3RlZFRhYiA9IGZ1bmN0aW9uKHRhYikge1xuXHRcdHZtLmN1cnJlbnRTdGF0ZS5hY3RpdmVUYWIgPSB0YWI7XG5cdFx0JGxvZy5pbmZvKCdjaGFuZ2luZyB0byB0YWInLCB2bS5jdXJyZW50U3RhdGUuYWN0aXZlVGFiKTtcblx0fVxuXG5cdFxufSIsIi8vIE1PRFVMRVxuY29uZmlnLiRpbmplY3QgPSBbXCIkcm91dGVQcm92aWRlclwiXTtcbnZhciBhaE51dHNXZWJBcHAgPSBhbmd1bGFyLm1vZHVsZSgnYWhOdXRzV2ViQXBwJywgWyduZ1JvdXRlJ10pO1xuXG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5jb250cm9sbGVyKCdjb250YWN0Q29udHJvbGxlcicsIGNvbnRhY3RDb250cm9sbGVyKTtcblxuY29udGFjdENvbnRyb2xsZXIuJGluamVjdCA9IFtdO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbnRhY3RDb250cm9sbGVyKCkge1xuXG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuY29udHJvbGxlcignbGFuZGluZ0NvbnRyb2xsZXInLCBsYW5kaW5nQ29udHJvbGxlcik7XG5cbmxhbmRpbmdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRsb2cnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbiddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxhbmRpbmdDb250cm9sbGVyKCRsb2csICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vbG9jYWwgbWV0aG9kc1xuXHRmdW5jdGlvbiBpbml0KCkge1xuXHRcdC8vZGVmaW5lIHRoZSBzdGF0ZSBvZiB0aGlzIHBhZ2Vcblx0XHRcblx0XHRcblxuXHR9O1xuXG5cdC8vdmlldyBtZXRob2RzXG5cdHZtLm5hdkJ1dHRvbkNsaWNrZWQgPSBmdW5jdGlvbihwYXJhbSkge1xuXHRcdHZhciBmdWxsUGF0aCA9ICcvJyArIHBhcmFtO1xuXHRcdC8vcmVkaXJlY3Rcblx0XHQkbG9nLmluZm8oJ3JlZGlyZWN0aW5nIHRvOiAnICsgZnVsbFBhdGgpO1xuXHRcdCRsb2NhdGlvbi5wYXRoKGZ1bGxQYXRoKTtcblx0fVxuXG5cdC8vcnVuIGluaXQgZnVuY3Rpb25cblx0aW5pdCgpO1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ2xvY2F0aW9uc0NvbnRyb2xsZXInLCBsb2NhdGlvbnNDb250cm9sbGVyKTtcblxubG9jYXRpb25zQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJyRyb3V0ZVBhcmFtcyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxvY2F0aW9uc0NvbnRyb2xsZXIoJGxvZywgJHJvdXRlUGFyYW1zKSB7XG5cblx0Ly9kZWZpbmUgdmlldyBtb2RlbCB2YXJpYWJsZVxuXHR2YXIgdm0gPSB0aGlzO1xuXG5cdC8vbm90aWZ5IHRoZSBwYXJhbXMgZm9yIHRoZSB0aW1lIGJlaW5nXHRUT0RPOiBUQUtFIFRISVMgT1VUIExBVEVSXG5cdCRsb2cuaW5mbygncGFyYW1zIGFyZTogJywgJHJvdXRlUGFyYW1zKTtcblxuXHQvL2xvY2FsIG1ldGhvZHNcblxuXHQvL3ZpZXcgbWV0aG9kc1xufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ3Nob3BwaW5nQ29udHJvbGxlcicsIHNob3BwaW5nQ29udHJvbGxlcik7XG5cbnNob3BwaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9nJywgJ3Nob3BwaW5nQ2FydHNGYWN0b3J5JywgJ2ZpbGxpbmdzRmFjdG9yeScsICdwcmljZUxpc3RGYWN0b3J5JywgJ3N0YXRlRmFjdG9yeSddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNob3BwaW5nQ29udHJvbGxlcigkbG9nLCBzaG9wcGluZ0NhcnRzRmFjdG9yeSwgZmlsbGluZ3NGYWN0b3J5LCBwcmljZUxpc3RGYWN0b3J5LCBzdGF0ZUZhY3RvcnkpIHtcblxuXHQvL2RlZmluZSB0aGUgbG9jYWwgdmFyaWFibGVcblx0dmFyIHZtID0gdGhpcztcblxuXHQvL2ltcG9ydCByZXF1aXJlZCBvYmplY3RzXG4gICAgdm0uY3VycmVudGx5RmlsbGluZyA9IGZpbGxpbmdzRmFjdG9yeTtcblx0dm0uY2FydCA9IHNob3BwaW5nQ2FydHNGYWN0b3J5O1xuXHR2bS5wcmljZUxpc3QgPSBwcmljZUxpc3RGYWN0b3J5O1xuXG5cdC8vc3RhdGUgdHJhY2tpbmdcblx0dm0uY3VycmVudFN0YXRlID0gc3RhdGVGYWN0b3J5LmRlZmF1bHRTdGF0ZSgnc2hvcHBpbmcnKTtcblxuXHQvL3ZpZXcgbW9kZWwgZnVuY3Rpb25zXG5cblx0Ly93aGVuIGEgdGFiIGlzIHNlbGVjdGVkIGNoYW5nZSB0aGUgdGFiXG5cdHZtLnVwZGF0ZVNlbGVjdGVkVGFiID0gZnVuY3Rpb24odGFiKSB7XG5cdFx0dm0uY3VycmVudFN0YXRlLmFjdGl2ZVRhYiA9IHRhYjtcblx0XHQkbG9nLmluZm8oJ2NoYW5naW5nIHRvIHRhYicsIHZtLmN1cnJlbnRTdGF0ZS5hY3RpdmVUYWIpO1xuXHR9XG5cblx0XG59XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdhcXVpc2l0aW9uTWFuYWdlcicsIGFxdWlzaXRpb25NYW5hZ2VyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBhcXVpc2l0aW9uTWFuYWdlcigpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2FxdWlzaXRpb25NYW5hZ2VyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGFxdWlzaXRpb25NYW5hZ2VyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGFxdWlzaXRpb25NYW5hZ2VyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGFxdWlzaXRpb25NYW5hZ2VyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2NhcnRTdW1tYXJ5JywgY2FydFN1bW1hcnkpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNhcnRTdW1tYXJ5KCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY2FydFN1bW1hcnkuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogY2FydFN1bW1hcnlDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY2FydFN1bW1hcnlDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY2FydFN1bW1hcnlDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnY29uZUZpbGxlcicsIGNvbmVGaWxsZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmVGaWxsZXIoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jb25lRmlsbGVyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGNvbmVGaWxsZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgY29uZUZpbGxlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjb25lRmlsbGVyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2VtYWlsSGVscGVyJywgZW1haWxIZWxwZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGVtYWlsSGVscGVyKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZW1haWxIZWxwZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogZW1haWxIZWxwZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZW1haWxIZWxwZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZW1haWxIZWxwZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnbGlzdE9mRmxhdm9ycycsIGxpc3RPZkZsYXZvcnMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxpc3RPZkZsYXZvcnMoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9saXN0T2ZGbGF2b3JzLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxpc3RPZkZsYXZvcnNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgbGlzdE9mRmxhdm9yc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsaXN0T2ZGbGF2b3JzQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xvY2F0aW9uc0Nocm9ub1ZpZXcnLCBsb2NhdGlvbnNDaHJvbm9WaWV3KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNDaHJvbm9WaWV3KCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvbG9jYXRpb25zQ2hyb25vVmlldy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2NhdGlvbnNDaHJvbm9WaWV3Q29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGxvY2F0aW9uc0Nocm9ub1ZpZXdDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gbG9jYXRpb25zQ2hyb25vVmlld0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdsb2NhdGlvbnNNYXBWaWV3JywgbG9jYXRpb25zTWFwVmlldyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9jYXRpb25zTWFwVmlldygpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc01hcFZpZXcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbG9jYXRpb25zTWFwVmlld0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNNYXBWaWV3Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc01hcFZpZXdDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLypmdW5jdGlvbiBpbml0TWFwKCkge1xuXHQgICAgICAgIHZhciB1bHVydSA9IHtsYXQ6IC0yNS4zNjMsIGxuZzogMTMxLjA0NH07XG5cdCAgICAgICAgdmFyIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XG5cdCAgICAgICAgICB6b29tOiA0LFxuXHQgICAgICAgICAgY2VudGVyOiB1bHVydVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcblx0ICAgICAgICAgIHBvc2l0aW9uOiB1bHVydSxcblx0ICAgICAgICAgIG1hcDogbWFwXG5cdCAgICAgICAgfSk7XG5cdCAgICB9Ki9cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnbG9jYXRpb25zVGhpc1dlZWsnLCBsb2NhdGlvbnNUaGlzV2Vlayk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9jYXRpb25zVGhpc1dlZWsoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2NhdGlvbnNUaGlzV2Vlay5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2NhdGlvbnNUaGlzV2Vla0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNUaGlzV2Vla0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsb2NhdGlvbnNUaGlzV2Vla0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdsb2NhdGlvbnNUaW1lRmlsdGVyJywgbG9jYXRpb25zVGltZUZpbHRlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9jYXRpb25zVGltZUZpbHRlcigpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc1RpbWVGaWx0ZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbG9jYXRpb25zVGltZUZpbHRlckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNUaW1lRmlsdGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc1RpbWVGaWx0ZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnbG9jYXRpb25zVG9kYXknLCBsb2NhdGlvbnNUb2RheSk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9jYXRpb25zVG9kYXkoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2NhdGlvbnNUb2RheS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2NhdGlvbnNUb2RheUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNUb2RheUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnYmFja2VuZENvbUZhY3RvcnknXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsb2NhdGlvbnNUb2RheUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBiYWNrZW5kQ29tRmFjdG9yeSkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZhciBiYWNrZW5kID0gYmFja2VuZENvbUZhY3Rvcnk7XG5cblx0ICAgIHZtLnRvZGF5c01hcmtldHMgPSBiYWNrZW5kLmdldCgpO1xuXG5cdCAgICBjb25zb2xlLmxvZyh2bS50b2RheXNNYXJrZXRzKTtcblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3BhY2thZ2luZ0ZpbGxlcicsIHBhY2thZ2luZ0ZpbGxlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcGFja2FnaW5nRmlsbGVyKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcGFja2FnaW5nRmlsbGVyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHByaWNpbmc6IFwiPVwiLFxuXHRcdFx0Y2hhbmdlVGFiOiAnJicsXG5cdFx0XHRjdXJyZW50bHlGaWxsaW5nOiBcIj1cIixcblx0XHRcdGFkZEZpbGxlZFBhY2thZ2U6IFwiJlwiXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwYWNrYWdpbmdGaWxsZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcGFja2FnaW5nRmlsbGVyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHBhY2thZ2luZ0ZpbGxlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICAvL3ZpZXcgbW9kZWwgdmFyaWFibGVzXG5cdCAgICB2bS5xdHkgPSAxO1xuXG5cdCAgICBmdW5jdGlvbiBlcXVhbFNwbGl0KGRpdmlzaW9ucykge1xuXHQgICAgXHRyZXR1cm4gMSAvIGRpdmlzaW9ucztcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gYXNzaWduRXF1YWxTcGxpdChlcXVhbFBvcnRpb24pIHtcblxuXHQgICAgXHRPYmplY3Qua2V5cyh2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWQpLmZvckVhY2goZnVuY3Rpb24oZmxhdm9yKSB7XG5cdCAgICBcdFx0XG5cdCAgICBcdFx0aWYodm0uY3VycmVudGx5RmlsbGluZy5mbGF2b3JzLnNlbGVjdGVkW2ZsYXZvcl0pXG5cdCAgICBcdFx0XHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMucHJvcG9ydGlvbnNbZmxhdm9yXSA9IGVxdWFsUG9ydGlvbjtcblx0ICAgIFx0XHRlbHNlXG5cdCAgICBcdFx0XHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMucHJvcG9ydGlvbnNbZmxhdm9yXSA9IDAuMDBcblxuXHQgICAgXHR9KVxuXG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIHN1cHBseU1peHR1cmVPYmplY3QoZmxhdm9yUHJvcG9ydGlvbnMpIHtcdFx0Ly9yZWNlaXZlIGFsbCB0aGUgcHJvcHJ0aW9uc1xuXHQgICAgXHQvL2luaXRpYWxpemUgbG9jYWwgdmFyaWFibGVcblx0ICAgIFx0dmFyIHJldHVybk9iamVjdCA9IHt9O1xuXG5cdCAgICBcdC8vY3ljbGUgdGhyb3VnaCBhbGwgdGhlIGZsYXZvcnMsIGlmIHByb3BvcnRpb24gaXMgZ3JlYXQgdGhhbiBcblx0ICAgIFx0T2JqZWN0LmtleXMoZmxhdm9yUHJvcG9ydGlvbnMpLmZvckVhY2goZnVuY3Rpb24oZmxhdm9yKSB7XG5cblx0ICAgIFx0XHRpZihmbGF2b3JQcm9wb3J0aW9uc1tmbGF2b3JdID4gMClcblx0ICAgIFx0XHRcdHJldHVybk9iamVjdFtmbGF2b3JdID0gZmxhdm9yUHJvcG9ydGlvbnNbZmxhdm9yXVxuXG5cdCAgICBcdH0pO1xuXG5cdCAgICBcdHJldHVybiByZXR1cm5PYmplY3RcdFx0Ly9yZXR1cm4gYSBkaXN0aWxsZWQgbGlzdCBvZiBwcm9wb3J0aW9uc1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBjaGVja0ZvclBlYW51dHMocGFja2FnaW5nLCBtaXh0dXJlKSB7XG5cblx0ICAgIFx0dmFyIGhhc1BlYW51dHMgPSB1bmRlZmluZWQ7XG5cblx0ICAgIFx0Ly9pcyB0aGlzIGEgbWl4dHVyZSBvciBhIHBsYXR0ZXI/XG5cdCAgICBcdGlmKHBhY2thZ2luZz09J3BsYXR0ZXInKSB7XG5cdCAgICBcdFx0Ly9hIHBsYXR0ZXIgd2l0aCBhdCBsZWFzdCBvbmUgc2VjdGlvbiBvZiBwZWFudXRzIGhhcyBwZWFudXRzXG5cdCAgICBcdFx0aWYobWl4dHVyZS5TUlBlYW51dCA+IDApIGhhc1BlYW51dHMgPSB0cnVlO1xuXHQgICAgXHRcdGVsc2UgaGFzUGVhbnV0cyA9IGZhbHNlO1xuXG5cdCAgICBcdH0gZWxzZSB7XG5cdCAgICBcdFx0Ly9hIG1peHR1cmUgbXVzdCBoYXZlIGF0IGxlYXN0IDUwJSBwZWFudXRzIHRvIGJlIGNvbnNpZGVyZWQgcGVhbnV0XG5cdCAgICBcdFx0aWYobWl4dHVyZS5TUlBlYW51dCA+PSAwLjUpIGhhc1BlYW51dHMgPSB0cnVlO1xuXHQgICAgXHRcdGVsc2UgaGFzUGVhbnV0cyA9IGZhbHNlO1xuXHQgICAgXHR9XG5cblx0ICAgIFx0cmV0dXJuIGhhc1BlYW51dHM7XG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVB1cmNoYXNlUHJpY2UocGFja2FnaW5nLCBtaXh0dXJlKSB7XG5cdCAgICBcdFxuXHQgICAgXHQvL2RlZmluZSB0aGUgbG9jYWwgdmFyaWFibGVcblx0ICAgIFx0dmFyIHNhbGVQcmljZSA9IDA7XG5cdCAgICBcdHZhciBwZWFudXRTdGF0dXMgPSAnd2l0aG91dFBlYW51dHMnO1xuXHQgICAgXHR2YXIgcGVhbnV0U2VjdGlvbnMgPSAwO1xuXG5cdCAgICBcdC8vZGV0ZXJtaW5lIHBlYW51dHMgcHJlc2VuY2UgYW5kIHF0eVxuXHQgICAgXHR2YXIgcGVhbnV0c0FyZVByZXNlbnQgPSBjaGVja0ZvclBlYW51dHMocGFja2FnaW5nLCBtaXh0dXJlKTtcblxuXHQgICAgXHRpZihwZWFudXRzQXJlUHJlc2VudCkge1xuXHQgICAgXHRcdC8vc2V0IHRoZSBvYmplY3QgdmFsdWVcblx0ICAgIFx0XHRwZWFudXRTdGF0dXMgPSAnd2l0aFBlYW51dHMnO1xuXHQgICAgXHRcdC8vY2FsY3VsYXRlIHRoZSBudW1iZXIgb2YgcGVhbnV0IHNlY3Rpb25zXG5cdCAgICBcdFx0cGVhbnV0U2VjdGlvbnMgPSBtaXh0dXJlLlNSUGVhbnV0ICogNDtcblx0ICAgIFx0fVxuXG5cdCAgICBcdC8vcGFja2FnaW5nIGRpZmZlcnMgZm9yIHBsYXR0ZXJzIGFuZCBiYWdzXG5cdCAgICBcdGlmKHBhY2thZ2luZz09J3BsYXR0ZXInKSB7XG5cdCAgICBcdFx0c2FsZVByaWNlID0gdm0ucHJpY2luZ1twZWFudXRTdGF0dXNdW3BhY2thZ2luZ11bcGVhbnV0U2VjdGlvbnNdO1xuXHQgICAgXHR9IGVsc2Uge1xuXHQgICAgXHRcdHNhbGVQcmljZSA9IHZtLnByaWNpbmdbcGVhbnV0U3RhdHVzXVtwYWNrYWdpbmddO1xuXHQgICAgXHR9XG5cblx0ICAgIFx0cmV0dXJuIHNhbGVQcmljZTtcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY2FsY3VsYXRlSXRlbVN1YnRvdGFsKHBhY2thZ2luZywgbWl4dHVyZSwgcXR5KSB7XG5cblx0ICAgIFx0dmFyIHB1cmNoYXNlUHJpY2UgPSBjYWxjdWxhdGVQdXJjaGFzZVByaWNlKHBhY2thZ2luZywgbWl4dHVyZSk7XG5cblx0ICAgIFx0cmV0dXJuIHB1cmNoYXNlUHJpY2UgKiBxdHk7XG5cdCAgICB9XG5cblx0ICAgIC8vdmlld21vZGVsIG1ldGhvZHNcblx0ICAgIHZtLnBpY2tBRmxhdm9yID0gZnVuY3Rpb24oZmxhdm9yKSB7XG5cblx0ICAgIFx0Ly9maXJzdCBmbGlwIHRoZSBjaGVja2JveFxuXHQgICAgXHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXSA9ICF2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXTtcblxuXHQgICAgXHQvL2luY3JlYXNlIG9yIGRlY3JlYXNlIHRoZSBudW1iZXIgb2YgZmxhdm9ycyBiYXNlZCBvbiB0aGUgc2lnblxuXHQgICAgXHRpZih2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXSlcblx0ICAgIFx0XHR2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMubm9PZkZsYXZvcnMrKztcblx0ICAgIFx0ZWxzZVxuXHQgICAgXHRcdHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5ub09mRmxhdm9ycy0tO1xuXG5cdCAgICBcdC8vdGhlbiBmb3IgZXF1YWwgc3BsaXQgY2FsY3VsYXRlIHRoZSBwZXJjZW50YWdlLCBiYXNlZCBvbiB0aGUgbnVtYmVyIG9mIGZsYXZvcnNcblx0ICAgIFx0dmFyIGVxdWFsUG9ydGlvbnMgPSBlcXVhbFNwbGl0KHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5ub09mRmxhdm9ycyk7XG5cdCAgICBcdGFzc2lnbkVxdWFsU3BsaXQoZXF1YWxQb3J0aW9ucyk7XG5cblx0ICAgIFx0Ly9ub3RpZnkgdGhlIHVzZXJcblx0ICAgIFx0JGxvZy5pbmZvKCcjIG9mIEZsYXZvcnMnLCB2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMubm9PZkZsYXZvcnMsIFwic3BsaXRcIiwgZXF1YWxQb3J0aW9ucywgJ3Byb3ByaXRpb25zJywgdm0uY3VycmVudGx5RmlsbGluZy5mbGF2b3JzLnByb3BvcnRpb25zKTtcblx0ICAgIH1cblxuXHQgICAgdm0uYWRkVG9DYXJ0ID0gZnVuY3Rpb24oKSB7XHRcdC8vYWRkIHRoZSBjdXJyZW50IGl0ZW0gdG8gdGhlIGNhcnRcblx0ICAgIFx0XG5cdCAgICBcdC8vZGlzdGlsbCB0aGUgbWl4dHVyZVxuXHQgICAgXHR2YXIgdGhpc1BhY2thZ2luZyA9IHZtLmN1cnJlbnRseUZpbGxpbmcucGFja2FnaW5nO1xuXHQgICAgXHR2YXIgdGhpc01peHR1cmUgPSBzdXBwbHlNaXh0dXJlT2JqZWN0KHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5wcm9wb3J0aW9ucyk7XG5cdCAgICBcdHZhciB0aGlzUXVhbnRpdHkgPSB2bS5xdHk7XG5cblx0ICAgIFx0Ly9mb3JtYXQgdGhlIG9iamVjdCB0byBiZSBhZGRlZCB0byB0aGUgY2FydFxuXHQgICAgXHR2YXIgbmV3UGFja2FnZSA9IHtcblx0ICAgIFx0XHRzZWxlY3RlZFBhY2thZ2luZzogdGhpc1BhY2thZ2luZyxcblx0ICAgIFx0XHRtaXh0dXJlOiB0aGlzTWl4dHVyZSxcblx0ICAgIFx0XHRxdHk6IHRoaXNRdWFudGl0eSxcblx0ICAgIFx0XHRzdWJ0b3RhdGw6IGNhbGN1bGF0ZUl0ZW1TdWJ0b3RhbCh0aGlzUGFja2FnaW5nLCB0aGlzTWl4dHVyZSwgdGhpc1F1YW50aXR5KVxuXHQgICAgXHR9O1xuXG5cdCAgICBcdC8vcGFzcyBpdCB0byB0aGUgY2FydFxuXHQgICAgXHR2bS5hZGRGaWxsZWRQYWNrYWdlKCkobmV3UGFja2FnZSk7XG5cblx0ICAgIFx0Ly90aGVuIG1vdmUgdG8gdGhlIG5leHQgdGFiXG5cdCAgICBcdHZtLmNoYW5nZVRhYigpKDIpO1xuXHQgICAgfVxuXG5cdCAgICB2bS5kaXNjYXJkQnV0dG9uQ2xpY2tlZCA9IGZ1bmN0aW9uKCkge1x0Ly93aGVuIHRoZSBidG4gaXMgY2xpY2tlZCB0aGlzIGhhcHBlbnNcblx0ICAgIFx0XG5cdCAgICBcdC8vY3VycmVudGx5IGZpbGxpbmcgcGFja2FnZSBzZXQgdG8gdW5kZWZpbmVkXG5cdCAgICBcdHZtLmN1cnJlbnRseUZpbGxpbmcucGFja2FnaW5nID0gdW5kZWZpbmVkO1xuXG5cdCAgICBcdC8vYWN0aXZlIHRhYiBzd2l0Y2hlZCBiYWNrIHRvIDBcblx0ICAgIFx0dm0uY2hhbmdlVGFiKCkoMCk7XG5cdCAgICB9XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3BheW1lbnRNYW5hZ2VyJywgcGF5bWVudE1hbmFnZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHBheW1lbnRNYW5hZ2VyKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcGF5bWVudE1hbmFnZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcGF5bWVudE1hbmFnZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcGF5bWVudE1hbmFnZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJywgJ2JhY2tlbmRDb21GYWN0b3J5J107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcGF5bWVudE1hbmFnZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZywgYmFja2VuZENvbUZhY3RvcnkpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3BsYXR0ZXJGaWxsZXInLCBwbGF0dGVyRmlsbGVyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBwbGF0dGVyRmlsbGVyKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcGxhdHRlckZpbGxlci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwbGF0dGVyRmlsbGVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHBsYXR0ZXJGaWxsZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcGxhdHRlckZpbGxlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07XG4vKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdxdHlNYW5hZ2VyJywgcXR5TWFuYWdlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcXR5TWFuYWdlcigpIHtcbiAgICBsaW5rRnVuYy4kaW5qZWN0ID0gW1wic2NvcGVcIiwgXCJlbFwiLCBcImF0dHJcIiwgXCJjdHJsXCJdO1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3F0eU1hbmFnZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cXR5OiAnPSdcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHF0eU1hbmFnZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgcXR5TWFuYWdlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBxdHlNYW5hZ2VyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblxuXHQgICAgdm0uc3VidHJhY3QgPSBmdW5jdGlvbigpIHsgaWYodm0ucXR5ID4gMSkgdm0ucXR5LS07IH1cblx0ICAgIHZtLmFkZCA9IGZ1bmN0aW9uKCkgeyB2bS5xdHkrKzsgfVxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2VlRW1wdGllcycsIHNlZUVtcHRpZXMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNlZUVtcHRpZXMoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWVFbXB0aWVzLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNlZUVtcHRpZXNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VlRW1wdGllc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWVFbXB0aWVzQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3NlZUZ1bGxzJywgc2VlRnVsbHMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNlZUZ1bGxzKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2VlRnVsbHMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogc2VlRnVsbHNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VlRnVsbHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2VlRnVsbHNDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2VsZWN0Rmxhdm9ycycsIHNlbGVjdEZsYXZvcnMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNlbGVjdEZsYXZvcnMoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9zZWxlY3RGbGF2b3JzLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdHBhY2thZ2luZ1NlbGVjdGVkOiAnPScsXG5cdFx0XHRyZW1vdmVBU2l6ZTogJyYnXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWxlY3RGbGF2b3JzQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHNlbGVjdEZsYXZvcnNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2VsZWN0Rmxhdm9yc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cblx0ICAgIC8vYXNzaWduIGEgYmFnIHRvIGJlIGZpbGxlZFxuXHQgICAgdm0uZmlsbEFQYWNrYWdlID0gZnVuY3Rpb24ocGFja2FnaW5nKSB7XG5cdCAgICBcdHZtLmN1cnJlbnRseUZpbGxpbmcucGFja2FnaW5nID0gcGFja2FnaW5nO1xuXHQgICAgfVxuXG5cdCAgICB2bS5zaXplQnRuQ2xpY2tlZCA9IGZ1bmN0aW9uKHBhY2thZ2luZykge1xuXHQgICAgXHQkbG9nLmluZm8oJ2NsaWtjZWQnLCBwYWNrYWdpbmcsIHZtLnBhY2thZ2luZ1NlbGVjdGVkW3BhY2thZ2luZ10pO1xuXHQgICAgXHQvL2RlY3JlbWVudCB0aGUgY291bnQgb2YgdGhpcyBwYWNrYWdlIHRoYXQgd2FzIGNsaWNrZWRcblx0ICAgIFx0dm0ucGFja2FnaW5nU2VsZWN0ZWRbcGFja2FnaW5nXSA9IHZtLnJlbW92ZUFTaXplKCkodm0ucGFja2FnaW5nU2VsZWN0ZWRbcGFja2FnaW5nXSk7XG5cdCAgICB9XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3NlbGVjdFBhY2thZ2luZycsIHNlbGVjdFBhY2thZ2luZyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VsZWN0UGFja2FnaW5nKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2VsZWN0UGFja2FnaW5nLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHRcdGN1cnJlbnRseUZpbGxpbmc6ICc9Jyxcblx0XHRcdGNoYW5nZVRhYjogJyYnXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWxlY3RQYWNrYWdpbmdDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VsZWN0UGFja2FnaW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHNlbGVjdFBhY2thZ2luZ0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdCAgICB2bS5zaXplQnRuQ2xpY2tlZCA9IGZ1bmN0aW9uKHNpemUpIHtcblxuXHQgICAgXHR2bS5jdXJyZW50bHlGaWxsaW5nLnBhY2thZ2luZyA9IHNpemU7XG5cdCAgICBcdCRsb2cuaW5mbygnZ290IHRoaXMgc2l6ZSwgJywgc2l6ZSk7XG5cblx0ICAgIFx0Ly9jaGFuZ2UgdGhlIGFjdGl2ZSB0YWJcblx0ICAgIFx0dm0uY2hhbmdlVGFiKCkoMSk7XG5cdCAgICB9XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3Nob3BwaW5nUHJvZ3Jlc3NCYXInLCBzaG9wcGluZ1Byb2dyZXNzQmFyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzaG9wcGluZ1Byb2dyZXNzQmFyKCkge1xuICAgIGxpbmtGdW5jLiRpbmplY3QgPSBbXCJzY29wZVwiLCBcImVsXCIsIFwiYXR0clwiLCBcImN0cmxcIl07XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2hvcHBpbmdQcm9ncmVzc0Jhci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRhY3RpdmVUYWI6ICc9Jyxcblx0XHRcdGNoYW5nZVRhYjogJyYnXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzaG9wcGluZ1Byb2dyZXNzQmFyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuXHRcdC8vbmVlZHMgdG8gbGlzdGVuIGZvciBjaGFuZ2VzIGluIGFjdGl2ZSB0YWIsIGFzIG90aGVyIGRpcmVjdGl2ZXNcblx0XHQvL2NhbiBwcm9tcHQgdGhlc2UgY2hhbmdlc1xuXHRcdHNjb3BlLiR3YXRjaCgndm0uYWN0aXZlVGFiJywgZnVuY3Rpb24obmV4dCwgY3VycmVudCkge1xuXHRcdFx0Y29uc29sZS5sb2coJ3RoZSB0YWIgY2hhbmdlZCcsIGN1cnJlbnQsIG5leHQpO1xuXHRcdFx0Ly91cGRhdGUgc3R5bGVzXG5cdCAgICBcdHNjb3BlLnZtLmNoYW5nZVRhYkNsYXNzKG5leHQsIGN1cnJlbnQpO1xuXG5cdFx0fSk7XG4gICAgfVxuXG4gICAgc2hvcHBpbmdQcm9ncmVzc0JhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnc3RhdGVGYWN0b3J5J107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2hvcHBpbmdQcm9ncmVzc0JhckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBzdGF0ZUZhY3RvcnkpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vdmlldyBtb2RlbCB2YXJpYWJsZXNcblx0ICAgIHZtLnRhYnMgPSBzdGF0ZUZhY3RvcnkuZGVmYXVsdFN0YXRlKCdzaG9wcGluZ1Byb2dyZXNzQmFyJyk7XG5cblx0ICAgIC8vdmlldyBtb2RlbCBmdW5jdGlvbnNcblx0ICAgIHZtLmNoYW5nZVRhYkNsYXNzID0gZnVuY3Rpb24obmV4dCwgY3VycmVudCkge1xuXHQgICAgXHQvL3VwZGF0ZSBzdHlsZXNcblx0ICAgIFx0dm0udGFic1tjdXJyZW50XS5jbGFzc2VzLnNwYnRhYlNlbGVjdGVkID0gZmFsc2U7XG5cdCAgICBcdHZtLnRhYnNbbmV4dF0uY2xhc3Nlcy5zcGJ0YWJTZWxlY3RlZCA9IHRydWU7XHQgICAgXHRcblx0ICAgIH1cblxuXHQgICAgdm0udGFiQ2xpY2sgPSBmdW5jdGlvbih0YWIpIHtcblxuXHQgICAgXHQvL3VwZGF0ZSB0aGUgc3R5bGVzXG5cdCAgICBcdHZtLmNoYW5nZVRhYkNsYXNzKHRhYiwgdm0uYWN0aXZlVGFiKTtcblxuXHQgICAgXHQvL3VwZGF0ZSBwYXJlbnQgbW9kZWxcblx0ICAgIFx0dm0uY2hhbmdlVGFiKCkodGFiKTtcblx0ICAgIH1cblx0fVx0XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59O1xuLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgndG9vbEJhcicsIHRvb2xCYXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHRvb2xCYXIoKSB7XG4gICAgbGlua0Z1bmMuJGluamVjdCA9IFtcInNjb3BlXCIsIFwiZWxcIiwgXCJhdHRyXCIsIFwiY3RybFwiXTtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy90b29sQmFyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IFRvb2xCYXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgVG9vbEJhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBUb29sQmFyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTtcbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5mYWN0b3J5KCdiYWNrZW5kQ29tRmFjdG9yeScsIGJhY2tlbmRDb21GYWN0b3J5KTtcblxuYmFja2VuZENvbUZhY3RvcnkuJGluamVjdCA9IFsnJGxvZycsICckaHR0cCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGJhY2tlbmRDb21GYWN0b3J5KCRsb2cpIHtcblxuXHR2YXIgYmFja2VuZENvbUVsZW1lbnRzID0ge1xuXHRcdGdldDogZ2V0XG5cdH07XG5cblx0ZnVuY3Rpb24gZ2V0KCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdHJlc29sdmUoJ2l0IHdvcmtlZCcpO1xuXG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gYmFja2VuZENvbUVsZW1lbnRzO1xuXG59XG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcbiAgICAuZmFjdG9yeSgnZmlsbGluZ3NGYWN0b3J5JywgZmlsbGluZ3NGYWN0b3J5KTtcblxuZmlsbGluZ3NGYWN0b3J5LiRpbmplY3QgPSBbJyRsb2cnXTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBmaWxsaW5nc0ZhY3RvcnkoJGxvZykge1xuXG5cdC8vVEVNUE9SQVJZIE9CSkVDVFxuXHR2YXIgYWxsRmlsbGluZ3MgPSB7XG4gICAgXHRwYWNrYWdpbmc6IHVuZGVmaW5lZCxcbiAgICBcdGZsYXZvcnM6IHtcbiAgICBcdFx0bm9PZkZsYXZvcnM6IDAsXG4gICAgXHRcdHNlbGVjdGVkOiB7XG5cdCAgICBcdFx0U1JQZWNhbnM6IGZhbHNlLFxuXHQgICAgXHRcdERSUGVjYW5zOiBmYWxzZSxcblx0ICAgIFx0XHRDTlBlY2FuczogZmFsc2UsXG5cdCAgICBcdFx0U1JBbG1vbmQ6IGZhbHNlLFxuXHQgICAgXHRcdENOQWxtb25kOiBmYWxzZSxcblx0ICAgIFx0XHRTUkNhc2hldzogZmFsc2UsXG5cdCAgICBcdFx0U1JQZWFudXQ6IGZhbHNlXG4gICAgXHRcdH0sXG4gICAgXHRcdHByb3BvcnRpb25zOiB7XG5cdCAgICBcdFx0U1JQZWNhbnM6IDAuMDAsXG5cdCAgICBcdFx0RFJQZWNhbnM6IDAuMDAsXG5cdCAgICBcdFx0Q05QZWNhbnM6IDAuMDAsXG5cdCAgICBcdFx0U1JBbG1vbmQ6IDAuMDAsXG5cdCAgICBcdFx0Q05BbG1vbmQ6IDAuMDAsXG5cdCAgICBcdFx0U1JDYXNoZXc6IDAuMDAsXG5cdCAgICBcdFx0U1JQZWFudXQ6IDAuMDBcbiAgICBcdFx0fVxuICAgIFx0fVxuICAgIH07XG5cdFxuXHRyZXR1cm4gYWxsRmlsbGluZ3M7XG5cbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5mYWN0b3J5KCdwcmljZUxpc3RGYWN0b3J5JywgcHJpY2VMaXN0RmFjdG9yeSk7XG5cbnByaWNlTGlzdEZhY3RvcnkuJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHByaWNlTGlzdEZhY3RvcnkoJGxvZykge1xuXG5cdC8vVEVNUE9SQVJZIE9CSkVDVFxuXHR2YXIgYWxsUHJpY2VzID0ge1xuXHRcdHdpdGhQZWFudXRzOiB7XG5cdFx0XHRzbWFsbDogNTAwLFxuXHRcdFx0bWVkaXVtOiA4MDAsXG5cdFx0XHRsYXJnZTogMTEwMCxcblx0XHRcdHBsYXR0ZXI6IHtcblx0XHRcdFx0MTogMjAwMCxcblx0XHRcdFx0MjogMTgwMCxcblx0XHRcdFx0MzogMTYwMCxcblx0XHRcdFx0NDogMTQwMFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0d2l0aG91dFBlYW51dHM6IHtcblx0XHRcdHNtYWxsOiA3MDAsXG5cdFx0XHRtZWRpdW06IDEzMDAsXG5cdFx0XHRsYXJnZTogMTgwMCxcblx0XHRcdHBsYXR0ZXI6IHtcblx0XHRcdFx0MDogMjIwMFxuXHRcdFx0fVx0XHRcdFxuXHRcdH1cblx0fTtcblx0XG5cdHJldHVybiBhbGxQcmljZXM7XG5cbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5mYWN0b3J5KCdzaG9wcGluZ0NhcnRzRmFjdG9yeScsIHNob3BwaW5nQ2FydHNGYWN0b3J5KTtcblxuc2hvcHBpbmdDYXJ0c0ZhY3RvcnkuJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNob3BwaW5nQ2FydHNGYWN0b3J5KCRsb2cpIHtcblxuXHQvL1RFTVBPUkFSWSBPQkpFQ1Rcblx0dmFyIGFsbENhcnRFbGVtZW50cyA9IHtcblx0XHRzZWxlY3RlZFBhY2thZ2luZzoge1xuXHRcdFx0c21hbGxzOiAwLFxuXHRcdFx0bWVkaXVtczogMCxcblx0XHRcdGxhcmdlczogMCxcblx0XHRcdHBsYXR0ZXJzOiAwXG5cdFx0fSxcblx0XHRmaWxsZWRQYWNrYWdpbmc6IHtcblx0XHRcdHNtYWxsczoge1xuXHRcdFx0XHRxdHk6IDAsXG5cdFx0XHRcdG1peGVzOiBbXSxcblx0XHRcdFx0c3VidG90YWw6IDBcblx0XHRcdH0sXG5cdFx0XHRtZWRpdW1zOiAge1xuXHRcdFx0XHRxdHk6IDAsXG5cdFx0XHRcdG1peGVzOiBbXSxcblx0XHRcdFx0c3VidG90YWw6IDBcblx0XHRcdH0sXG5cdFx0XHRsYXJnZXM6ICB7XG5cdFx0XHRcdHF0eTogMCxcblx0XHRcdFx0bWl4ZXM6IFtdLFxuXHRcdFx0XHRzdWJ0b3RhbDogMFxuXHRcdFx0fSxcblx0XHRcdHBsYXR0ZXJzOiAge1xuXHRcdFx0XHRxdHk6IDAsXG5cdFx0XHRcdG1peGVzOiBbXSxcblx0XHRcdFx0c3VidG90YWw6IDBcblx0XHRcdH1cblx0XHR9LFxuXHRcdGNvc3Q6IHtcblx0XHRcdHN1YnRvdGFsOiAwLFxuXHRcdFx0dGF4ZXM6IDAsXG5cdFx0XHRkaXNjb3VudHM6IDBcblx0XHR9LFxuXHRcdGFkZEFTaXplOiBhZGRBU2l6ZSxcblx0XHRyZW1vdmVBU2l6ZTogcmVtb3ZlQVNpemUsXG5cdFx0YWRkRmlsbGVkUGFja2FnZTogYWRkRmlsbGVkUGFja2FnZSxcblx0XHRyZW1vdmVBUGFja2FnZTogcmVtb3ZlQVBhY2thZ2Vcblx0fTtcblxuXHRmdW5jdGlvbiBhZGRBU2l6ZShzdGFydGluZ1ZhbHVlKSB7XG5cdFx0Ly9UT0RPOiBSRU1PVkUgVEhJUyBMQVRFUlxuXHRcdC8vbm90aWZ5IHRoZSB1c2VyIHdoYXQgaXMgY29taW5nIGluIGFuZCB3aGF0IGlzIGdvaW5nIG91dFxuXHRcdCRsb2cuaW5mbygnZ290IHRoaXMnLCBzdGFydGluZ1ZhbHVlLCAnIHJldHVybmluZyB0aGlzICcsIHN0YXJ0aW5nVmFsdWUgKyAxKTtcblxuXHRcdC8vaW5jcmltZW50IHRoZSBzdGFydGluZyB2YWx1ZSBcblx0XHRyZXR1cm4gc3RhcnRpbmdWYWx1ZSArIDE7XG5cdH1cblx0ZnVuY3Rpb24gcmVtb3ZlQVNpemUoc3RhcnRpbmdWYWx1ZSkge1xuXHRcdFxuXHRcdGlmKHN0YXJ0aW5nVmFsdWUgPiAwKSB7XG5cdFx0XHQvL1RPRE86IFJFTU9WRSBUSElTIExBVEVSXG5cdFx0XHQvL25vdGlmeSB0aGUgdXNlciB3aGF0IGlzIGNvbWluZyBpbiBhbmQgd2hhdCBpcyBnb2luZyBvdXRcblx0XHRcdCRsb2cuaW5mbygnZ290IHRoaXMnLCBzdGFydGluZ1ZhbHVlLCAnIHJldHVybmluZyB0aGlzICcsIHN0YXJ0aW5nVmFsdWUgLSAxKTtcblxuXHRcdFx0Ly9pbmNyaW1lbnQgdGhlIHN0YXJ0aW5nIHZhbHVlIFxuXHRcdFx0cmV0dXJuIHN0YXJ0aW5nVmFsdWUgLSAxO1xuXHRcdH0gZWxzZSByZXR1cm4gMDtcdFx0XG5cdH1cblx0ZnVuY3Rpb24gYWRkRmlsbGVkUGFja2FnZShuZXdQYWNrYWdlKSB7XG5cdFx0JGxvZy5pbmZvKCdhZGRpbmcgYSBuZXcgcGFja2FnZSBub3cnLCBuZXdQYWNrYWdlKTtcblx0fVxuXHRmdW5jdGlvbiByZW1vdmVBUGFja2FnZShzaXplLCBpZCkge31cblxuXHRcblx0cmV0dXJuIGFsbENhcnRFbGVtZW50cztcblxufVxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmZhY3RvcnkoJ3N0YXRlRmFjdG9yeScsIHN0YXRlRmFjdG9yeSk7XG5cbnN0YXRlRmFjdG9yeS4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc3RhdGVGYWN0b3J5KCRsb2cpIHtcblxuXHQvL1RFTVBPUkFSWSBPQkpFQ1Rcblx0dmFyIHN0YXRlc0ZhY3RvcnkgPSB7XG5cdFx0ZGVmYXVsdFN0YXRlOiBkZWZhdWx0U3RhdGVcblx0fTtcblx0XG5cdGZ1bmN0aW9uIGRlZmF1bHRTdGF0ZShzZWN0aW9uKSB7XG5cdFx0Ly9kZWNsYXJlIGxvY2FsIHZhcmlhYmxlXG5cdFx0dmFyIHJldHVybk9iamVjdDtcblxuXHRcdGlmKHNlY3Rpb249PSdzaG9wcGluZycpIHtcblx0XHRcdHJldHVybk9iamVjdCA9IHtcblx0XHRcdFx0YWN0aXZlVGFiOiAwLFxuXHRcdFx0XHRhbGxUYWJzOiB7XG5cdFx0XHRcdFx0MDogJ3BhY2thZ2UnLFxuXHRcdFx0XHRcdDE6ICdmbGF2b3InLFxuXHRcdFx0XHRcdDI6ICdhY2Nlc3MnLFxuXHRcdFx0XHRcdDM6ICdjaGVja291dCdcblx0XHRcdFx0fSxcblx0XHRcdFx0c2l6ZVNlbGVjdGVkOiBmYWxzZVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZihzZWN0aW9uPT0nc2hvcHBpbmdQcm9ncmVzc0JhcicpIHtcblx0XHRcdHJldHVybk9iamVjdCA9IHtcblx0XHRcdFx0MDoge1xuXHRcdFx0XHRcdGNsYXNzZXM6IHtcblx0XHRcdFx0XHRcdHNwYnRhYlNlbGVjdGVkOiB0cnVlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdHlsZXM6IHt9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdDE6IHtcblx0XHRcdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdFx0XHRzcGJ0YWJTZWxlY3RlZDogZmFsc2Vcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHN0eWxlczoge31cblx0XHRcdFx0fSxcblx0XHRcdFx0Mjoge1xuXHRcdFx0XHRcdGNsYXNzZXM6IHtcblx0XHRcdFx0XHRcdHNwYnRhYlNlbGVjdGVkOiBmYWxzZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0c3R5bGVzOiB7fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHQzOiB7XG5cdFx0XHRcdFx0Y2xhc3Nlczoge1xuXHRcdFx0XHRcdFx0c3BidGFiU2VsZWN0ZWQ6IGZhbHNlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdHlsZXM6IHt9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0dXJuT2JqZWN0O1xuXHR9XG5cblx0cmV0dXJuIHN0YXRlc0ZhY3Rvcnk7XG5cbn1cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5jb25maWcoY29uZmlnKTtcbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gY29uZmlnKCRyb3V0ZVByb3ZpZGVyKSB7ICAgXG4gICAgJHJvdXRlUHJvdmlkZXJcbiAgICAvL2RlZmluZSB0aGUgbGFuZGluZyBwYWdlXG4gICAgLndoZW4oJy8nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbGFuZGluZ1BhZ2UuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2xhbmRpbmdDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgc2hvcHBpbmcgcm91dGVzXG4gICAgLndoZW4oJy9zaG9wJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL3Nob3BwaW5nLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdzaG9wcGluZ0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBsb2NhdGlvbnMgcm91dGVzXG4gICAgLndoZW4oJy9sb2NhdGlvbnMnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbG9jYXRpb25zLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsb2NhdGlvbnNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSkgICAgXG4gICAgLndoZW4oJy9sb2NhdGlvbnMvOnN0YXRlJywge1xuICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2xvY2F0aW9ucy5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnbG9jYXRpb25zQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLndoZW4oJy9sb2NhdGlvbnMvOnN0YXRlLzpyZWdpb24nLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbG9jYXRpb25zLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsb2NhdGlvbnNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAvL2RlZmluZSB0aGUgY29udGFjdCByb3V0ZXNcbiAgICAud2hlbignL2NvbnRhY3QnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvY29udGFjdC5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnY29udGFjdENvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KTtcbn1cbiIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2FxdWlzaXRpb25NYW5hZ2VyJywgYXF1aXNpdGlvbk1hbmFnZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGFxdWlzaXRpb25NYW5hZ2VyKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2FxdWlzaXRpb25NYW5hZ2VyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHtcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGFxdWlzaXRpb25NYW5hZ2VyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGFxdWlzaXRpb25NYW5hZ2VyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGFxdWlzaXRpb25NYW5hZ2VyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdjYXJ0U3VtbWFyeScsIGNhcnRTdW1tYXJ5KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjYXJ0U3VtbWFyeSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9jYXJ0U3VtbWFyeS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjYXJ0U3VtbWFyeUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBjYXJ0U3VtbWFyeUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBjYXJ0U3VtbWFyeUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnY29uZUZpbGxlcicsIGNvbmVGaWxsZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGNvbmVGaWxsZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvY29uZUZpbGxlci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBjb25lRmlsbGVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGNvbmVGaWxsZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gY29uZUZpbGxlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnZW1haWxIZWxwZXInLCBlbWFpbEhlbHBlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZW1haWxIZWxwZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvZW1haWxIZWxwZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogZW1haWxIZWxwZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgZW1haWxIZWxwZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gZW1haWxIZWxwZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xpc3RPZkZsYXZvcnMnLCBsaXN0T2ZGbGF2b3JzKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsaXN0T2ZGbGF2b3JzKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xpc3RPZkZsYXZvcnMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbGlzdE9mRmxhdm9yc0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsaXN0T2ZGbGF2b3JzQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxpc3RPZkZsYXZvcnNDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xvY2F0aW9uc0Nocm9ub1ZpZXcnLCBsb2NhdGlvbnNDaHJvbm9WaWV3KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNDaHJvbm9WaWV3KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc0Nocm9ub1ZpZXcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbG9jYXRpb25zQ2hyb25vVmlld0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNDaHJvbm9WaWV3Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc0Nocm9ub1ZpZXdDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xvY2F0aW9uc01hcFZpZXcnLCBsb2NhdGlvbnNNYXBWaWV3KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNNYXBWaWV3KCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc01hcFZpZXcuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogbG9jYXRpb25zTWFwVmlld0NvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNNYXBWaWV3Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc01hcFZpZXdDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgLypmdW5jdGlvbiBpbml0TWFwKCkge1xuXHQgICAgICAgIHZhciB1bHVydSA9IHtsYXQ6IC0yNS4zNjMsIGxuZzogMTMxLjA0NH07XG5cdCAgICAgICAgdmFyIG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XG5cdCAgICAgICAgICB6b29tOiA0LFxuXHQgICAgICAgICAgY2VudGVyOiB1bHVydVxuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcblx0ICAgICAgICAgIHBvc2l0aW9uOiB1bHVydSxcblx0ICAgICAgICAgIG1hcDogbWFwXG5cdCAgICAgICAgfSk7XG5cdCAgICB9Ki9cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ2xvY2F0aW9uc1RoaXNXZWVrJywgbG9jYXRpb25zVGhpc1dlZWspO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGxvY2F0aW9uc1RoaXNXZWVrKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL2xvY2F0aW9uc1RoaXNXZWVrLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIGxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIGxvY2F0aW9uc1RoaXNXZWVrQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdsb2NhdGlvbnNUaW1lRmlsdGVyJywgbG9jYXRpb25zVGltZUZpbHRlcik7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gbG9jYXRpb25zVGltZUZpbHRlcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2NhdGlvbnNUaW1lRmlsdGVyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IGxvY2F0aW9uc1RpbWVGaWx0ZXJDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgbG9jYXRpb25zVGltZUZpbHRlckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsb2NhdGlvbnNUaW1lRmlsdGVyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdsb2NhdGlvbnNUb2RheScsIGxvY2F0aW9uc1RvZGF5KTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBsb2NhdGlvbnNUb2RheSgpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9sb2NhdGlvbnNUb2RheS5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBsb2NhdGlvbnNUb2RheUNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBsb2NhdGlvbnNUb2RheUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnYmFja2VuZENvbUZhY3RvcnknXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBsb2NhdGlvbnNUb2RheUNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBiYWNrZW5kQ29tRmFjdG9yeSkge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblx0ICAgIHZhciBiYWNrZW5kID0gYmFja2VuZENvbUZhY3Rvcnk7XG5cblx0ICAgIHZtLnRvZGF5c01hcmtldHMgPSBiYWNrZW5kLmdldCgpO1xuXG5cdCAgICBjb25zb2xlLmxvZyh2bS50b2RheXNNYXJrZXRzKTtcblx0fVxuXG5cdHJldHVybiAgZGlyZWN0aXZlO1xuXHRcdFxufTsiLCIvKiBUb29sQmFyLmRpcmVjdGl2ZS5qcyAqL1xuXG4vKipcbiogQGRlc2MgdG9vbGJhciBkaXJlY3RpdmUgdGhhdCBpcyB1c2VkIG9uIHRoZSBtYWluIHBhZ2UgYWNyb3NzIHRoZSBlbnRpcmUgYXBwLlxuKiBAZXhhbXBsZSA8ZGl2IHRvb2wtYmFyPjwvZGl2PlxuKi9cblxuYW5ndWxhclxuXHQubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuXHQuZGlyZWN0aXZlKCdwYWNrYWdpbmdGaWxsZXInLCBwYWNrYWdpbmdGaWxsZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHBhY2thZ2luZ0ZpbGxlcigpIHtcblx0dmFyIGRpcmVjdGl2ZSA9IHtcblx0XHRyZXN0cmljdDogJ0FFQ00nLFxuXHRcdHRlbXBsYXRlVXJsOiAndmlld3MvZGlyZWN0aXZlcy9wYWNrYWdpbmdGaWxsZXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cHJpY2luZzogXCI9XCIsXG5cdFx0XHRjaGFuZ2VUYWI6ICcmJyxcblx0XHRcdGN1cnJlbnRseUZpbGxpbmc6IFwiPVwiLFxuXHRcdFx0YWRkRmlsbGVkUGFja2FnZTogXCImXCJcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHBhY2thZ2luZ0ZpbGxlckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBwYWNrYWdpbmdGaWxsZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcGFja2FnaW5nRmlsbGVyQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vdmlldyBtb2RlbCB2YXJpYWJsZXNcblx0ICAgIHZtLnF0eSA9IDE7XG5cblx0ICAgIGZ1bmN0aW9uIGVxdWFsU3BsaXQoZGl2aXNpb25zKSB7XG5cdCAgICBcdHJldHVybiAxIC8gZGl2aXNpb25zO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBhc3NpZ25FcXVhbFNwbGl0KGVxdWFsUG9ydGlvbikge1xuXG5cdCAgICBcdE9iamVjdC5rZXlzKHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5zZWxlY3RlZCkuZm9yRWFjaChmdW5jdGlvbihmbGF2b3IpIHtcblx0ICAgIFx0XHRcblx0ICAgIFx0XHRpZih2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMuc2VsZWN0ZWRbZmxhdm9yXSlcblx0ICAgIFx0XHRcdHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5wcm9wb3J0aW9uc1tmbGF2b3JdID0gZXF1YWxQb3J0aW9uO1xuXHQgICAgXHRcdGVsc2Vcblx0ICAgIFx0XHRcdHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5wcm9wb3J0aW9uc1tmbGF2b3JdID0gMC4wMFxuXG5cdCAgICBcdH0pXG5cblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gc3VwcGx5TWl4dHVyZU9iamVjdChmbGF2b3JQcm9wb3J0aW9ucykge1x0XHQvL3JlY2VpdmUgYWxsIHRoZSBwcm9wcnRpb25zXG5cdCAgICBcdC8vaW5pdGlhbGl6ZSBsb2NhbCB2YXJpYWJsZVxuXHQgICAgXHR2YXIgcmV0dXJuT2JqZWN0ID0ge307XG5cblx0ICAgIFx0Ly9jeWNsZSB0aHJvdWdoIGFsbCB0aGUgZmxhdm9ycywgaWYgcHJvcG9ydGlvbiBpcyBncmVhdCB0aGFuIFxuXHQgICAgXHRPYmplY3Qua2V5cyhmbGF2b3JQcm9wb3J0aW9ucykuZm9yRWFjaChmdW5jdGlvbihmbGF2b3IpIHtcblxuXHQgICAgXHRcdGlmKGZsYXZvclByb3BvcnRpb25zW2ZsYXZvcl0gPiAwKVxuXHQgICAgXHRcdFx0cmV0dXJuT2JqZWN0W2ZsYXZvcl0gPSBmbGF2b3JQcm9wb3J0aW9uc1tmbGF2b3JdXG5cblx0ICAgIFx0fSk7XG5cblx0ICAgIFx0cmV0dXJuIHJldHVybk9iamVjdFx0XHQvL3JldHVybiBhIGRpc3RpbGxlZCBsaXN0IG9mIHByb3BvcnRpb25zXG5cdCAgICB9XG5cblx0ICAgIGZ1bmN0aW9uIGNoZWNrRm9yUGVhbnV0cyhwYWNrYWdpbmcsIG1peHR1cmUpIHtcblxuXHQgICAgXHR2YXIgaGFzUGVhbnV0cyA9IHVuZGVmaW5lZDtcblxuXHQgICAgXHQvL2lzIHRoaXMgYSBtaXh0dXJlIG9yIGEgcGxhdHRlcj9cblx0ICAgIFx0aWYocGFja2FnaW5nPT0ncGxhdHRlcicpIHtcblx0ICAgIFx0XHQvL2EgcGxhdHRlciB3aXRoIGF0IGxlYXN0IG9uZSBzZWN0aW9uIG9mIHBlYW51dHMgaGFzIHBlYW51dHNcblx0ICAgIFx0XHRpZihtaXh0dXJlLlNSUGVhbnV0ID4gMCkgaGFzUGVhbnV0cyA9IHRydWU7XG5cdCAgICBcdFx0ZWxzZSBoYXNQZWFudXRzID0gZmFsc2U7XG5cblx0ICAgIFx0fSBlbHNlIHtcblx0ICAgIFx0XHQvL2EgbWl4dHVyZSBtdXN0IGhhdmUgYXQgbGVhc3QgNTAlIHBlYW51dHMgdG8gYmUgY29uc2lkZXJlZCBwZWFudXRcblx0ICAgIFx0XHRpZihtaXh0dXJlLlNSUGVhbnV0ID49IDAuNSkgaGFzUGVhbnV0cyA9IHRydWU7XG5cdCAgICBcdFx0ZWxzZSBoYXNQZWFudXRzID0gZmFsc2U7XG5cdCAgICBcdH1cblxuXHQgICAgXHRyZXR1cm4gaGFzUGVhbnV0cztcblx0ICAgIH1cblxuXHQgICAgZnVuY3Rpb24gY2FsY3VsYXRlUHVyY2hhc2VQcmljZShwYWNrYWdpbmcsIG1peHR1cmUpIHtcblx0ICAgIFx0XG5cdCAgICBcdC8vZGVmaW5lIHRoZSBsb2NhbCB2YXJpYWJsZVxuXHQgICAgXHR2YXIgc2FsZVByaWNlID0gMDtcblx0ICAgIFx0dmFyIHBlYW51dFN0YXR1cyA9ICd3aXRob3V0UGVhbnV0cyc7XG5cdCAgICBcdHZhciBwZWFudXRTZWN0aW9ucyA9IDA7XG5cblx0ICAgIFx0Ly9kZXRlcm1pbmUgcGVhbnV0cyBwcmVzZW5jZSBhbmQgcXR5XG5cdCAgICBcdHZhciBwZWFudXRzQXJlUHJlc2VudCA9IGNoZWNrRm9yUGVhbnV0cyhwYWNrYWdpbmcsIG1peHR1cmUpO1xuXG5cdCAgICBcdGlmKHBlYW51dHNBcmVQcmVzZW50KSB7XG5cdCAgICBcdFx0Ly9zZXQgdGhlIG9iamVjdCB2YWx1ZVxuXHQgICAgXHRcdHBlYW51dFN0YXR1cyA9ICd3aXRoUGVhbnV0cyc7XG5cdCAgICBcdFx0Ly9jYWxjdWxhdGUgdGhlIG51bWJlciBvZiBwZWFudXQgc2VjdGlvbnNcblx0ICAgIFx0XHRwZWFudXRTZWN0aW9ucyA9IG1peHR1cmUuU1JQZWFudXQgKiA0O1xuXHQgICAgXHR9XG5cblx0ICAgIFx0Ly9wYWNrYWdpbmcgZGlmZmVycyBmb3IgcGxhdHRlcnMgYW5kIGJhZ3Ncblx0ICAgIFx0aWYocGFja2FnaW5nPT0ncGxhdHRlcicpIHtcblx0ICAgIFx0XHRzYWxlUHJpY2UgPSB2bS5wcmljaW5nW3BlYW51dFN0YXR1c11bcGFja2FnaW5nXVtwZWFudXRTZWN0aW9uc107XG5cdCAgICBcdH0gZWxzZSB7XG5cdCAgICBcdFx0c2FsZVByaWNlID0gdm0ucHJpY2luZ1twZWFudXRTdGF0dXNdW3BhY2thZ2luZ107XG5cdCAgICBcdH1cblxuXHQgICAgXHRyZXR1cm4gc2FsZVByaWNlO1xuXHQgICAgfVxuXG5cdCAgICBmdW5jdGlvbiBjYWxjdWxhdGVJdGVtU3VidG90YWwocGFja2FnaW5nLCBtaXh0dXJlLCBxdHkpIHtcblxuXHQgICAgXHR2YXIgcHVyY2hhc2VQcmljZSA9IGNhbGN1bGF0ZVB1cmNoYXNlUHJpY2UocGFja2FnaW5nLCBtaXh0dXJlKTtcblxuXHQgICAgXHRyZXR1cm4gcHVyY2hhc2VQcmljZSAqIHF0eTtcblx0ICAgIH1cblxuXHQgICAgLy92aWV3bW9kZWwgbWV0aG9kc1xuXHQgICAgdm0ucGlja0FGbGF2b3IgPSBmdW5jdGlvbihmbGF2b3IpIHtcblxuXHQgICAgXHQvL2ZpcnN0IGZsaXAgdGhlIGNoZWNrYm94XG5cdCAgICBcdHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5zZWxlY3RlZFtmbGF2b3JdID0gIXZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5zZWxlY3RlZFtmbGF2b3JdO1xuXG5cdCAgICBcdC8vaW5jcmVhc2Ugb3IgZGVjcmVhc2UgdGhlIG51bWJlciBvZiBmbGF2b3JzIGJhc2VkIG9uIHRoZSBzaWduXG5cdCAgICBcdGlmKHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5zZWxlY3RlZFtmbGF2b3JdKVxuXHQgICAgXHRcdHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5ub09mRmxhdm9ycysrO1xuXHQgICAgXHRlbHNlXG5cdCAgICBcdFx0dm0uY3VycmVudGx5RmlsbGluZy5mbGF2b3JzLm5vT2ZGbGF2b3JzLS07XG5cblx0ICAgIFx0Ly90aGVuIGZvciBlcXVhbCBzcGxpdCBjYWxjdWxhdGUgdGhlIHBlcmNlbnRhZ2UsIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgZmxhdm9yc1xuXHQgICAgXHR2YXIgZXF1YWxQb3J0aW9ucyA9IGVxdWFsU3BsaXQodm0uY3VycmVudGx5RmlsbGluZy5mbGF2b3JzLm5vT2ZGbGF2b3JzKTtcblx0ICAgIFx0YXNzaWduRXF1YWxTcGxpdChlcXVhbFBvcnRpb25zKTtcblxuXHQgICAgXHQvL25vdGlmeSB0aGUgdXNlclxuXHQgICAgXHQkbG9nLmluZm8oJyMgb2YgRmxhdm9ycycsIHZtLmN1cnJlbnRseUZpbGxpbmcuZmxhdm9ycy5ub09mRmxhdm9ycywgXCJzcGxpdFwiLCBlcXVhbFBvcnRpb25zLCAncHJvcHJpdGlvbnMnLCB2bS5jdXJyZW50bHlGaWxsaW5nLmZsYXZvcnMucHJvcG9ydGlvbnMpO1xuXHQgICAgfVxuXG5cdCAgICB2bS5hZGRUb0NhcnQgPSBmdW5jdGlvbigpIHtcdFx0Ly9hZGQgdGhlIGN1cnJlbnQgaXRlbSB0byB0aGUgY2FydFxuXHQgICAgXHRcblx0ICAgIFx0Ly9kaXN0aWxsIHRoZSBtaXh0dXJlXG5cdCAgICBcdHZhciB0aGlzUGFja2FnaW5nID0gdm0uY3VycmVudGx5RmlsbGluZy5wYWNrYWdpbmc7XG5cdCAgICBcdHZhciB0aGlzTWl4dHVyZSA9IHN1cHBseU1peHR1cmVPYmplY3Qodm0uY3VycmVudGx5RmlsbGluZy5mbGF2b3JzLnByb3BvcnRpb25zKTtcblx0ICAgIFx0dmFyIHRoaXNRdWFudGl0eSA9IHZtLnF0eTtcblxuXHQgICAgXHQvL2Zvcm1hdCB0aGUgb2JqZWN0IHRvIGJlIGFkZGVkIHRvIHRoZSBjYXJ0XG5cdCAgICBcdHZhciBuZXdQYWNrYWdlID0ge1xuXHQgICAgXHRcdHNlbGVjdGVkUGFja2FnaW5nOiB0aGlzUGFja2FnaW5nLFxuXHQgICAgXHRcdG1peHR1cmU6IHRoaXNNaXh0dXJlLFxuXHQgICAgXHRcdHF0eTogdGhpc1F1YW50aXR5LFxuXHQgICAgXHRcdHN1YnRvdGF0bDogY2FsY3VsYXRlSXRlbVN1YnRvdGFsKHRoaXNQYWNrYWdpbmcsIHRoaXNNaXh0dXJlLCB0aGlzUXVhbnRpdHkpXG5cdCAgICBcdH07XG5cblx0ICAgIFx0Ly9wYXNzIGl0IHRvIHRoZSBjYXJ0XG5cdCAgICBcdHZtLmFkZEZpbGxlZFBhY2thZ2UoKShuZXdQYWNrYWdlKTtcblxuXHQgICAgXHQvL3RoZW4gbW92ZSB0byB0aGUgbmV4dCB0YWJcblx0ICAgIFx0dm0uY2hhbmdlVGFiKCkoMik7XG5cdCAgICB9XG5cblx0ICAgIHZtLmRpc2NhcmRCdXR0b25DbGlja2VkID0gZnVuY3Rpb24oKSB7XHQvL3doZW4gdGhlIGJ0biBpcyBjbGlja2VkIHRoaXMgaGFwcGVuc1xuXHQgICAgXHRcblx0ICAgIFx0Ly9jdXJyZW50bHkgZmlsbGluZyBwYWNrYWdlIHNldCB0byB1bmRlZmluZWRcblx0ICAgIFx0dm0uY3VycmVudGx5RmlsbGluZy5wYWNrYWdpbmcgPSB1bmRlZmluZWQ7XG5cblx0ICAgIFx0Ly9hY3RpdmUgdGFiIHN3aXRjaGVkIGJhY2sgdG8gMFxuXHQgICAgXHR2bS5jaGFuZ2VUYWIoKSgwKTtcblx0ICAgIH1cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3BheW1lbnRNYW5hZ2VyJywgcGF5bWVudE1hbmFnZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHBheW1lbnRNYW5hZ2VyKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3BheW1lbnRNYW5hZ2VyLmRpcmVjdGl2ZS5odG0nLFxuXHRcdHJlcGxhY2U6IHRydWUsXG5cdFx0c2NvcGU6IHt9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHBheW1lbnRNYW5hZ2VyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHBheW1lbnRNYW5hZ2VyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZycsICdiYWNrZW5kQ29tRmFjdG9yeSddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHBheW1lbnRNYW5hZ2VyQ29udHJvbGxlcigkc2NvcGUsICRsb2csIGJhY2tlbmRDb21GYWN0b3J5KSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgncGxhdHRlckZpbGxlcicsIHBsYXR0ZXJGaWxsZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHBsYXR0ZXJGaWxsZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcGxhdHRlckZpbGxlci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBwbGF0dGVyRmlsbGVyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHBsYXR0ZXJGaWxsZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gcGxhdHRlckZpbGxlckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgncXR5TWFuYWdlcicsIHF0eU1hbmFnZXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHF0eU1hbmFnZXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvcXR5TWFuYWdlci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRxdHk6ICc9J1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogcXR5TWFuYWdlckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBxdHlNYW5hZ2VyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIHF0eU1hbmFnZXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXG5cdCAgICB2bS5zdWJ0cmFjdCA9IGZ1bmN0aW9uKCkgeyBpZih2bS5xdHkgPiAxKSB2bS5xdHktLTsgfVxuXHQgICAgdm0uYWRkID0gZnVuY3Rpb24oKSB7IHZtLnF0eSsrOyB9XG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2VlRW1wdGllcycsIHNlZUVtcHRpZXMpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNlZUVtcHRpZXMoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2VlRW1wdGllcy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzZWVFbXB0aWVzQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHNlZUVtcHRpZXNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2VlRW1wdGllc0NvbnRyb2xsZXIoJHNjb3BlLCAkbG9nKSB7XG5cdCAgICB2YXIgdm0gPSB0aGlzO1xuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2VlRnVsbHMnLCBzZWVGdWxscyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VlRnVsbHMoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2VlRnVsbHMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogc2VlRnVsbHNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VlRnVsbHNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckbG9nJ107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2VlRnVsbHNDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3NlbGVjdEZsYXZvcnMnLCBzZWxlY3RGbGF2b3JzKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBzZWxlY3RGbGF2b3JzKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3NlbGVjdEZsYXZvcnMuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge1xuXHRcdFx0cGFja2FnaW5nU2VsZWN0ZWQ6ICc9Jyxcblx0XHRcdHJlbW92ZUFTaXplOiAnJidcblx0XHR9LFxuXHRcdGxpbms6IGxpbmtGdW5jLFxuXHRcdGNvbnRyb2xsZXI6IHNlbGVjdEZsYXZvcnNDb250cm9sbGVyLFxuXHRcdGNvbnRyb2xsZXJBczogJ3ZtJyxcblx0XHRiaW5kVG9Db250cm9sbGVyOiB0cnVlXG5cdH1cblxuXHQvKiBAbmdJbmplY3QgKi9cblx0ZnVuY3Rpb24gbGlua0Z1bmMoc2NvcGUsIGVsLCBhdHRyLCBjdHJsKSB7XG4gICAgfVxuXG4gICAgc2VsZWN0Rmxhdm9yc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWxlY3RGbGF2b3JzQ29udHJvbGxlcigkc2NvcGUsICRsb2cpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblxuXHQgICAgLy9hc3NpZ24gYSBiYWcgdG8gYmUgZmlsbGVkXG5cdCAgICB2bS5maWxsQVBhY2thZ2UgPSBmdW5jdGlvbihwYWNrYWdpbmcpIHtcblx0ICAgIFx0dm0uY3VycmVudGx5RmlsbGluZy5wYWNrYWdpbmcgPSBwYWNrYWdpbmc7XG5cdCAgICB9XG5cblx0ICAgIHZtLnNpemVCdG5DbGlja2VkID0gZnVuY3Rpb24ocGFja2FnaW5nKSB7XG5cdCAgICBcdCRsb2cuaW5mbygnY2xpa2NlZCcsIHBhY2thZ2luZywgdm0ucGFja2FnaW5nU2VsZWN0ZWRbcGFja2FnaW5nXSk7XG5cdCAgICBcdC8vZGVjcmVtZW50IHRoZSBjb3VudCBvZiB0aGlzIHBhY2thZ2UgdGhhdCB3YXMgY2xpY2tlZFxuXHQgICAgXHR2bS5wYWNrYWdpbmdTZWxlY3RlZFtwYWNrYWdpbmddID0gdm0ucmVtb3ZlQVNpemUoKSh2bS5wYWNrYWdpbmdTZWxlY3RlZFtwYWNrYWdpbmddKTtcblx0ICAgIH1cblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3NlbGVjdFBhY2thZ2luZycsIHNlbGVjdFBhY2thZ2luZyk7XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gc2VsZWN0UGFja2FnaW5nKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3NlbGVjdFBhY2thZ2luZy5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRjdXJyZW50bHlGaWxsaW5nOiAnPScsXG5cdFx0XHRjaGFuZ2VUYWI6ICcmJ1xuXHRcdH0sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogc2VsZWN0UGFja2FnaW5nQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuICAgIH1cblxuICAgIHNlbGVjdFBhY2thZ2luZ0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnXTtcbiAgICAvKiBAbmdJbmplY3QgKi9cbiAgICBmdW5jdGlvbiBzZWxlY3RQYWNrYWdpbmdDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHQgICAgdm0uc2l6ZUJ0bkNsaWNrZWQgPSBmdW5jdGlvbihzaXplKSB7XG5cblx0ICAgIFx0dm0uY3VycmVudGx5RmlsbGluZy5wYWNrYWdpbmcgPSBzaXplO1xuXHQgICAgXHQkbG9nLmluZm8oJ2dvdCB0aGlzIHNpemUsICcsIHNpemUpO1xuXG5cdCAgICBcdC8vY2hhbmdlIHRoZSBhY3RpdmUgdGFiXG5cdCAgICBcdHZtLmNoYW5nZVRhYigpKDEpO1xuXHQgICAgfVxuXG5cdH1cblxuXHRyZXR1cm4gIGRpcmVjdGl2ZTtcblx0XHRcbn07IiwiLyogVG9vbEJhci5kaXJlY3RpdmUuanMgKi9cblxuLyoqXG4qIEBkZXNjIHRvb2xiYXIgZGlyZWN0aXZlIHRoYXQgaXMgdXNlZCBvbiB0aGUgbWFpbiBwYWdlIGFjcm9zcyB0aGUgZW50aXJlIGFwcC5cbiogQGV4YW1wbGUgPGRpdiB0b29sLWJhcj48L2Rpdj5cbiovXG5cbmFuZ3VsYXJcblx0Lm1vZHVsZSgnYWhOdXRzV2ViQXBwJylcblx0LmRpcmVjdGl2ZSgnc2hvcHBpbmdQcm9ncmVzc0JhcicsIHNob3BwaW5nUHJvZ3Jlc3NCYXIpO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNob3BwaW5nUHJvZ3Jlc3NCYXIoKSB7XG5cdHZhciBkaXJlY3RpdmUgPSB7XG5cdFx0cmVzdHJpY3Q6ICdBRUNNJyxcblx0XHR0ZW1wbGF0ZVVybDogJ3ZpZXdzL2RpcmVjdGl2ZXMvc2hvcHBpbmdQcm9ncmVzc0Jhci5kaXJlY3RpdmUuaHRtJyxcblx0XHRyZXBsYWNlOiB0cnVlLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRhY3RpdmVUYWI6ICc9Jyxcblx0XHRcdGNoYW5nZVRhYjogJyYnXG5cdFx0fSxcblx0XHRsaW5rOiBsaW5rRnVuYyxcblx0XHRjb250cm9sbGVyOiBzaG9wcGluZ1Byb2dyZXNzQmFyQ29udHJvbGxlcixcblx0XHRjb250cm9sbGVyQXM6ICd2bScsXG5cdFx0YmluZFRvQ29udHJvbGxlcjogdHJ1ZVxuXHR9XG5cblx0LyogQG5nSW5qZWN0ICovXG5cdGZ1bmN0aW9uIGxpbmtGdW5jKHNjb3BlLCBlbCwgYXR0ciwgY3RybCkge1xuXHRcdC8vbmVlZHMgdG8gbGlzdGVuIGZvciBjaGFuZ2VzIGluIGFjdGl2ZSB0YWIsIGFzIG90aGVyIGRpcmVjdGl2ZXNcblx0XHQvL2NhbiBwcm9tcHQgdGhlc2UgY2hhbmdlc1xuXHRcdHNjb3BlLiR3YXRjaCgndm0uYWN0aXZlVGFiJywgZnVuY3Rpb24obmV4dCwgY3VycmVudCkge1xuXHRcdFx0Y29uc29sZS5sb2coJ3RoZSB0YWIgY2hhbmdlZCcsIGN1cnJlbnQsIG5leHQpO1xuXHRcdFx0Ly91cGRhdGUgc3R5bGVzXG5cdCAgICBcdHNjb3BlLnZtLmNoYW5nZVRhYkNsYXNzKG5leHQsIGN1cnJlbnQpO1xuXG5cdFx0fSk7XG4gICAgfVxuXG4gICAgc2hvcHBpbmdQcm9ncmVzc0JhckNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRsb2cnLCAnc3RhdGVGYWN0b3J5J107XG4gICAgLyogQG5nSW5qZWN0ICovXG4gICAgZnVuY3Rpb24gc2hvcHBpbmdQcm9ncmVzc0JhckNvbnRyb2xsZXIoJHNjb3BlLCAkbG9nLCBzdGF0ZUZhY3RvcnkpIHtcblx0ICAgIHZhciB2bSA9IHRoaXM7XG5cblx0ICAgIC8vdmlldyBtb2RlbCB2YXJpYWJsZXNcblx0ICAgIHZtLnRhYnMgPSBzdGF0ZUZhY3RvcnkuZGVmYXVsdFN0YXRlKCdzaG9wcGluZ1Byb2dyZXNzQmFyJyk7XG5cblx0ICAgIC8vdmlldyBtb2RlbCBmdW5jdGlvbnNcblx0ICAgIHZtLmNoYW5nZVRhYkNsYXNzID0gZnVuY3Rpb24obmV4dCwgY3VycmVudCkge1xuXHQgICAgXHQvL3VwZGF0ZSBzdHlsZXNcblx0ICAgIFx0dm0udGFic1tjdXJyZW50XS5jbGFzc2VzLnNwYnRhYlNlbGVjdGVkID0gZmFsc2U7XG5cdCAgICBcdHZtLnRhYnNbbmV4dF0uY2xhc3Nlcy5zcGJ0YWJTZWxlY3RlZCA9IHRydWU7XHQgICAgXHRcblx0ICAgIH1cblxuXHQgICAgdm0udGFiQ2xpY2sgPSBmdW5jdGlvbih0YWIpIHtcblxuXHQgICAgXHQvL3VwZGF0ZSB0aGUgc3R5bGVzXG5cdCAgICBcdHZtLmNoYW5nZVRhYkNsYXNzKHRhYiwgdm0uYWN0aXZlVGFiKTtcblxuXHQgICAgXHQvL3VwZGF0ZSBwYXJlbnQgbW9kZWxcblx0ICAgIFx0dm0uY2hhbmdlVGFiKCkodGFiKTtcblx0ICAgIH1cblx0fVx0XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsIi8qIFRvb2xCYXIuZGlyZWN0aXZlLmpzICovXG5cbi8qKlxuKiBAZGVzYyB0b29sYmFyIGRpcmVjdGl2ZSB0aGF0IGlzIHVzZWQgb24gdGhlIG1haW4gcGFnZSBhY3Jvc3MgdGhlIGVudGlyZSBhcHAuXG4qIEBleGFtcGxlIDxkaXYgdG9vbC1iYXI+PC9kaXY+XG4qL1xuXG5hbmd1bGFyXG5cdC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG5cdC5kaXJlY3RpdmUoJ3Rvb2xCYXInLCB0b29sQmFyKTtcblxuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiB0b29sQmFyKCkge1xuXHR2YXIgZGlyZWN0aXZlID0ge1xuXHRcdHJlc3RyaWN0OiAnQUVDTScsXG5cdFx0dGVtcGxhdGVVcmw6ICd2aWV3cy9kaXJlY3RpdmVzL3Rvb2xCYXIuZGlyZWN0aXZlLmh0bScsXG5cdFx0cmVwbGFjZTogdHJ1ZSxcblx0XHRzY29wZToge30sXG5cdFx0bGluazogbGlua0Z1bmMsXG5cdFx0Y29udHJvbGxlcjogVG9vbEJhckNvbnRyb2xsZXIsXG5cdFx0Y29udHJvbGxlckFzOiAndm0nLFxuXHRcdGJpbmRUb0NvbnRyb2xsZXI6IHRydWVcblx0fVxuXG5cdC8qIEBuZ0luamVjdCAqL1xuXHRmdW5jdGlvbiBsaW5rRnVuYyhzY29wZSwgZWwsIGF0dHIsIGN0cmwpIHtcbiAgICB9XG5cbiAgICBUb29sQmFyQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGxvZyddO1xuICAgIC8qIEBuZ0luamVjdCAqL1xuICAgIGZ1bmN0aW9uIFRvb2xCYXJDb250cm9sbGVyKCRzY29wZSwgJGxvZykge1xuXHQgICAgdmFyIHZtID0gdGhpcztcblxuXHR9XG5cblx0cmV0dXJuICBkaXJlY3RpdmU7XG5cdFx0XG59OyIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5mYWN0b3J5KCdiYWNrZW5kQ29tRmFjdG9yeScsIGJhY2tlbmRDb21GYWN0b3J5KTtcblxuYmFja2VuZENvbUZhY3RvcnkuJGluamVjdCA9IFsnJGxvZycsICckaHR0cCddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIGJhY2tlbmRDb21GYWN0b3J5KCRsb2cpIHtcblxuXHR2YXIgYmFja2VuZENvbUVsZW1lbnRzID0ge1xuXHRcdGdldDogZ2V0XG5cdH07XG5cblx0ZnVuY3Rpb24gZ2V0KCkge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdHJlc29sdmUoJ2l0IHdvcmtlZCcpO1xuXG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gYmFja2VuZENvbUVsZW1lbnRzO1xuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmZhY3RvcnkoJ2ZpbGxpbmdzRmFjdG9yeScsIGZpbGxpbmdzRmFjdG9yeSk7XG5cbmZpbGxpbmdzRmFjdG9yeS4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gZmlsbGluZ3NGYWN0b3J5KCRsb2cpIHtcblxuXHQvL1RFTVBPUkFSWSBPQkpFQ1Rcblx0dmFyIGFsbEZpbGxpbmdzID0ge1xuICAgIFx0cGFja2FnaW5nOiB1bmRlZmluZWQsXG4gICAgXHRmbGF2b3JzOiB7XG4gICAgXHRcdG5vT2ZGbGF2b3JzOiAwLFxuICAgIFx0XHRzZWxlY3RlZDoge1xuXHQgICAgXHRcdFNSUGVjYW5zOiBmYWxzZSxcblx0ICAgIFx0XHREUlBlY2FuczogZmFsc2UsXG5cdCAgICBcdFx0Q05QZWNhbnM6IGZhbHNlLFxuXHQgICAgXHRcdFNSQWxtb25kOiBmYWxzZSxcblx0ICAgIFx0XHRDTkFsbW9uZDogZmFsc2UsXG5cdCAgICBcdFx0U1JDYXNoZXc6IGZhbHNlLFxuXHQgICAgXHRcdFNSUGVhbnV0OiBmYWxzZVxuICAgIFx0XHR9LFxuICAgIFx0XHRwcm9wb3J0aW9uczoge1xuXHQgICAgXHRcdFNSUGVjYW5zOiAwLjAwLFxuXHQgICAgXHRcdERSUGVjYW5zOiAwLjAwLFxuXHQgICAgXHRcdENOUGVjYW5zOiAwLjAwLFxuXHQgICAgXHRcdFNSQWxtb25kOiAwLjAwLFxuXHQgICAgXHRcdENOQWxtb25kOiAwLjAwLFxuXHQgICAgXHRcdFNSQ2FzaGV3OiAwLjAwLFxuXHQgICAgXHRcdFNSUGVhbnV0OiAwLjAwXG4gICAgXHRcdH1cbiAgICBcdH1cbiAgICB9O1xuXHRcblx0cmV0dXJuIGFsbEZpbGxpbmdzO1xuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmZhY3RvcnkoJ3ByaWNlTGlzdEZhY3RvcnknLCBwcmljZUxpc3RGYWN0b3J5KTtcblxucHJpY2VMaXN0RmFjdG9yeS4kaW5qZWN0ID0gWyckbG9nJ107XG5cbi8qIEBuZ0luamVjdCAqL1xuZnVuY3Rpb24gcHJpY2VMaXN0RmFjdG9yeSgkbG9nKSB7XG5cblx0Ly9URU1QT1JBUlkgT0JKRUNUXG5cdHZhciBhbGxQcmljZXMgPSB7XG5cdFx0d2l0aFBlYW51dHM6IHtcblx0XHRcdHNtYWxsOiA1MDAsXG5cdFx0XHRtZWRpdW06IDgwMCxcblx0XHRcdGxhcmdlOiAxMTAwLFxuXHRcdFx0cGxhdHRlcjoge1xuXHRcdFx0XHQxOiAyMDAwLFxuXHRcdFx0XHQyOiAxODAwLFxuXHRcdFx0XHQzOiAxNjAwLFxuXHRcdFx0XHQ0OiAxNDAwXG5cdFx0XHR9XG5cdFx0fSxcblx0XHR3aXRob3V0UGVhbnV0czoge1xuXHRcdFx0c21hbGw6IDcwMCxcblx0XHRcdG1lZGl1bTogMTMwMCxcblx0XHRcdGxhcmdlOiAxODAwLFxuXHRcdFx0cGxhdHRlcjoge1xuXHRcdFx0XHQwOiAyMjAwXG5cdFx0XHR9XHRcdFx0XG5cdFx0fVxuXHR9O1xuXHRcblx0cmV0dXJuIGFsbFByaWNlcztcblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5mYWN0b3J5KCdzaG9wcGluZ0NhcnRzRmFjdG9yeScsIHNob3BwaW5nQ2FydHNGYWN0b3J5KTtcblxuc2hvcHBpbmdDYXJ0c0ZhY3RvcnkuJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHNob3BwaW5nQ2FydHNGYWN0b3J5KCRsb2cpIHtcblxuXHQvL1RFTVBPUkFSWSBPQkpFQ1Rcblx0dmFyIGFsbENhcnRFbGVtZW50cyA9IHtcblx0XHRzZWxlY3RlZFBhY2thZ2luZzoge1xuXHRcdFx0c21hbGxzOiAwLFxuXHRcdFx0bWVkaXVtczogMCxcblx0XHRcdGxhcmdlczogMCxcblx0XHRcdHBsYXR0ZXJzOiAwXG5cdFx0fSxcblx0XHRmaWxsZWRQYWNrYWdpbmc6IHtcblx0XHRcdHNtYWxsczoge1xuXHRcdFx0XHRxdHk6IDAsXG5cdFx0XHRcdG1peGVzOiBbXSxcblx0XHRcdFx0c3VidG90YWw6IDBcblx0XHRcdH0sXG5cdFx0XHRtZWRpdW1zOiAge1xuXHRcdFx0XHRxdHk6IDAsXG5cdFx0XHRcdG1peGVzOiBbXSxcblx0XHRcdFx0c3VidG90YWw6IDBcblx0XHRcdH0sXG5cdFx0XHRsYXJnZXM6ICB7XG5cdFx0XHRcdHF0eTogMCxcblx0XHRcdFx0bWl4ZXM6IFtdLFxuXHRcdFx0XHRzdWJ0b3RhbDogMFxuXHRcdFx0fSxcblx0XHRcdHBsYXR0ZXJzOiAge1xuXHRcdFx0XHRxdHk6IDAsXG5cdFx0XHRcdG1peGVzOiBbXSxcblx0XHRcdFx0c3VidG90YWw6IDBcblx0XHRcdH1cblx0XHR9LFxuXHRcdGNvc3Q6IHtcblx0XHRcdHN1YnRvdGFsOiAwLFxuXHRcdFx0dGF4ZXM6IDAsXG5cdFx0XHRkaXNjb3VudHM6IDBcblx0XHR9LFxuXHRcdGFkZEFTaXplOiBhZGRBU2l6ZSxcblx0XHRyZW1vdmVBU2l6ZTogcmVtb3ZlQVNpemUsXG5cdFx0YWRkRmlsbGVkUGFja2FnZTogYWRkRmlsbGVkUGFja2FnZSxcblx0XHRyZW1vdmVBUGFja2FnZTogcmVtb3ZlQVBhY2thZ2Vcblx0fTtcblxuXHRmdW5jdGlvbiBhZGRBU2l6ZShzdGFydGluZ1ZhbHVlKSB7XG5cdFx0Ly9UT0RPOiBSRU1PVkUgVEhJUyBMQVRFUlxuXHRcdC8vbm90aWZ5IHRoZSB1c2VyIHdoYXQgaXMgY29taW5nIGluIGFuZCB3aGF0IGlzIGdvaW5nIG91dFxuXHRcdCRsb2cuaW5mbygnZ290IHRoaXMnLCBzdGFydGluZ1ZhbHVlLCAnIHJldHVybmluZyB0aGlzICcsIHN0YXJ0aW5nVmFsdWUgKyAxKTtcblxuXHRcdC8vaW5jcmltZW50IHRoZSBzdGFydGluZyB2YWx1ZSBcblx0XHRyZXR1cm4gc3RhcnRpbmdWYWx1ZSArIDE7XG5cdH1cblx0ZnVuY3Rpb24gcmVtb3ZlQVNpemUoc3RhcnRpbmdWYWx1ZSkge1xuXHRcdFxuXHRcdGlmKHN0YXJ0aW5nVmFsdWUgPiAwKSB7XG5cdFx0XHQvL1RPRE86IFJFTU9WRSBUSElTIExBVEVSXG5cdFx0XHQvL25vdGlmeSB0aGUgdXNlciB3aGF0IGlzIGNvbWluZyBpbiBhbmQgd2hhdCBpcyBnb2luZyBvdXRcblx0XHRcdCRsb2cuaW5mbygnZ290IHRoaXMnLCBzdGFydGluZ1ZhbHVlLCAnIHJldHVybmluZyB0aGlzICcsIHN0YXJ0aW5nVmFsdWUgLSAxKTtcblxuXHRcdFx0Ly9pbmNyaW1lbnQgdGhlIHN0YXJ0aW5nIHZhbHVlIFxuXHRcdFx0cmV0dXJuIHN0YXJ0aW5nVmFsdWUgLSAxO1xuXHRcdH0gZWxzZSByZXR1cm4gMDtcdFx0XG5cdH1cblx0ZnVuY3Rpb24gYWRkRmlsbGVkUGFja2FnZShuZXdQYWNrYWdlKSB7XG5cdFx0JGxvZy5pbmZvKCdhZGRpbmcgYSBuZXcgcGFja2FnZSBub3cnLCBuZXdQYWNrYWdlKTtcblx0fVxuXHRmdW5jdGlvbiByZW1vdmVBUGFja2FnZShzaXplLCBpZCkge31cblxuXHRcblx0cmV0dXJuIGFsbENhcnRFbGVtZW50cztcblxufSIsImFuZ3VsYXJcbiAgICAubW9kdWxlKCdhaE51dHNXZWJBcHAnKVxuICAgIC5mYWN0b3J5KCdzdGF0ZUZhY3RvcnknLCBzdGF0ZUZhY3RvcnkpO1xuXG5zdGF0ZUZhY3RvcnkuJGluamVjdCA9IFsnJGxvZyddO1xuXG4vKiBAbmdJbmplY3QgKi9cbmZ1bmN0aW9uIHN0YXRlRmFjdG9yeSgkbG9nKSB7XG5cblx0Ly9URU1QT1JBUlkgT0JKRUNUXG5cdHZhciBzdGF0ZXNGYWN0b3J5ID0ge1xuXHRcdGRlZmF1bHRTdGF0ZTogZGVmYXVsdFN0YXRlXG5cdH07XG5cdFxuXHRmdW5jdGlvbiBkZWZhdWx0U3RhdGUoc2VjdGlvbikge1xuXHRcdC8vZGVjbGFyZSBsb2NhbCB2YXJpYWJsZVxuXHRcdHZhciByZXR1cm5PYmplY3Q7XG5cblx0XHRpZihzZWN0aW9uPT0nc2hvcHBpbmcnKSB7XG5cdFx0XHRyZXR1cm5PYmplY3QgPSB7XG5cdFx0XHRcdGFjdGl2ZVRhYjogMCxcblx0XHRcdFx0YWxsVGFiczoge1xuXHRcdFx0XHRcdDA6ICdwYWNrYWdlJyxcblx0XHRcdFx0XHQxOiAnZmxhdm9yJyxcblx0XHRcdFx0XHQyOiAnYWNjZXNzJyxcblx0XHRcdFx0XHQzOiAnY2hlY2tvdXQnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNpemVTZWxlY3RlZDogZmFsc2Vcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYoc2VjdGlvbj09J3Nob3BwaW5nUHJvZ3Jlc3NCYXInKSB7XG5cdFx0XHRyZXR1cm5PYmplY3QgPSB7XG5cdFx0XHRcdDA6IHtcblx0XHRcdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdFx0XHRzcGJ0YWJTZWxlY3RlZDogdHJ1ZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0c3R5bGVzOiB7fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHQxOiB7XG5cdFx0XHRcdFx0Y2xhc3Nlczoge1xuXHRcdFx0XHRcdFx0c3BidGFiU2VsZWN0ZWQ6IGZhbHNlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRzdHlsZXM6IHt9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdDI6IHtcblx0XHRcdFx0XHRjbGFzc2VzOiB7XG5cdFx0XHRcdFx0XHRzcGJ0YWJTZWxlY3RlZDogZmFsc2Vcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHN0eWxlczoge31cblx0XHRcdFx0fSxcblx0XHRcdFx0Mzoge1xuXHRcdFx0XHRcdGNsYXNzZXM6IHtcblx0XHRcdFx0XHRcdHNwYnRhYlNlbGVjdGVkOiBmYWxzZVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0c3R5bGVzOiB7fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldHVybk9iamVjdDtcblx0fVxuXG5cdHJldHVybiBzdGF0ZXNGYWN0b3J5O1xuXG59IiwiYW5ndWxhclxuICAgIC5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcpXG4gICAgLmNvbmZpZyhjb25maWcpO1xuLyogQG5nSW5qZWN0ICovXG5mdW5jdGlvbiBjb25maWcoJHJvdXRlUHJvdmlkZXIpIHsgICBcbiAgICAkcm91dGVQcm92aWRlclxuICAgIC8vZGVmaW5lIHRoZSBsYW5kaW5nIHBhZ2VcbiAgICAud2hlbignLycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sYW5kaW5nUGFnZS5odG0nLFxuICAgICAgICBjb250cm9sbGVyOiAnbGFuZGluZ0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBzaG9wcGluZyByb3V0ZXNcbiAgICAud2hlbignL3Nob3AnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2hvcHBpbmcuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ3Nob3BwaW5nQ29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pXG4gICAgLy9kZWZpbmUgdGhlIGxvY2F0aW9ucyByb3V0ZXNcbiAgICAud2hlbignL2xvY2F0aW9ucycsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2NhdGlvbnMuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2xvY2F0aW9uc0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KSAgICBcbiAgICAud2hlbignL2xvY2F0aW9ucy86c3RhdGUnLCB7XG4gICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbG9jYXRpb25zLmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdsb2NhdGlvbnNDb250cm9sbGVyJyxcbiAgICAgICAgY29udHJvbGxlckFzOiAndm0nXG4gICAgfSlcbiAgICAud2hlbignL2xvY2F0aW9ucy86c3RhdGUvOnJlZ2lvbicsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9sb2NhdGlvbnMuaHRtJyxcbiAgICAgICAgY29udHJvbGxlcjogJ2xvY2F0aW9uc0NvbnRyb2xsZXInLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd2bSdcbiAgICB9KVxuICAgIC8vZGVmaW5lIHRoZSBjb250YWN0IHJvdXRlc1xuICAgIC53aGVuKCcvY29udGFjdCcsIHtcbiAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9jb250YWN0Lmh0bScsXG4gICAgICAgIGNvbnRyb2xsZXI6ICdjb250YWN0Q29udHJvbGxlcicsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJ1xuICAgIH0pO1xufVxuIiwiLy8gTU9EVUxFXG52YXIgYWhOdXRzV2ViQXBwID0gYW5ndWxhci5tb2R1bGUoJ2FoTnV0c1dlYkFwcCcsIFsnbmdSb3V0ZSddKTtcblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
